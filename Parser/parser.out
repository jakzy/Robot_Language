Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> call NEWLINE
Rule 5     statement -> declaration NEWLINE
Rule 6     statement -> assignment NEWLINE
Rule 7     statement -> cycle NEWLINE
Rule 8     statement -> command NEWLINE
Rule 9     statement -> procedure NEWLINE
Rule 10    statement -> record NEWLINE
Rule 11    statement -> empty NEWLINE
Rule 12    declaration -> type variable
Rule 13    call -> VARIABLE L_RBRACKET variables R_RBRACKET
Rule 14    assignment -> variable ASSIGNMENT expression
Rule 15    assignment -> variable ASSIGNMENT assignment
Rule 16    cycle -> L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
Rule 17    command -> MOVEUP L_RBRACKET variable R_RBRACKET
Rule 18    command -> MOVEDOWN L_RBRACKET variable R_RBRACKET
Rule 19    command -> MOVERIGHT L_RBRACKET variable R_RBRACKET
Rule 20    command -> MOVELEFT L_RBRACKET variable R_RBRACKET
Rule 21    command -> PINGUP L_RBRACKET variable R_RBRACKET
Rule 22    command -> PINGDOWN L_RBRACKET variable R_RBRACKET
Rule 23    command -> PINGRIGHT L_RBRACKET variable R_RBRACKET
Rule 24    command -> PINGLEFT L_RBRACKET variable R_RBRACKET
Rule 25    command -> VISION L_RBRACKET variable R_RBRACKET
Rule 26    command -> VOICE L_RBRACKET expression R_RBRACKET
Rule 27    procedure -> PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group
Rule 28    record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET
Rule 29    record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions
Rule 30    conversions -> conversions conversion
Rule 31    conversions -> conversion
Rule 32    conversion -> CONVERSION TO type VARIABLE
Rule 33    conversion -> CONVERSION FROM type VARIABLE
Rule 34    empty -> <empty>
Rule 35    type -> NUMERIC
Rule 36    type -> STRING
Rule 37    type -> LOGIC
Rule 38    type -> VARIABLE
Rule 39    expression -> variable
Rule 40    expression -> const
Rule 41    expression -> complex_expression
Rule 42    variables -> expression
Rule 43    variables -> expression COMMA variables
Rule 44    variable -> VARIABLE indexing
Rule 45    variable -> VARIABLE
Rule 46    indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing
Rule 47    indexing -> L_QBRACKET DECIMAL R_QBRACKET
Rule 48    indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing
Rule 49    indexing -> L_QBRACKET VARIABLE R_QBRACKET
Rule 50    const -> TRUE
Rule 51    const -> FALSE
Rule 52    const -> UNDEF
Rule 53    const -> DECIMAL
Rule 54    const -> TEXT
Rule 55    complex_expression -> part_expression PLUS part_expression
Rule 56    complex_expression -> part_expression MINUS part_expression
Rule 57    complex_expression -> part_expression STAR part_expression
Rule 58    complex_expression -> part_expression SLASH part_expression
Rule 59    complex_expression -> part_expression CARET part_expression
Rule 60    complex_expression -> part_expression GREATER part_expression
Rule 61    complex_expression -> part_expression LESS part_expression
Rule 62    complex_expression -> part_expression EQ part_expression
Rule 63    complex_expression -> part_expression NOTEQ part_expression
Rule 64    complex_expression -> MINUS expression
Rule 65    part_expression -> DOT expression
Rule 66    part_expression -> expression DOT
Rule 67    part_expression -> expression
Rule 68    parameters -> parameter COMMA parameters
Rule 69    parameters -> parameter
Rule 70    parameter -> type VARIABLE AMPERSAND
Rule 71    parameter -> type VARIABLE
Rule 72    statements_group -> BLOCK inner_statements UNBLOCK
Rule 73    statements_group -> inner_statement
Rule 74    inner_statements -> inner_statement inner_statements
Rule 75    inner_statements -> inner_statement
Rule 76    inner_statement -> declaration NEWLINE
Rule 77    inner_statement -> assignment NEWLINE
Rule 78    inner_statement -> cycle NEWLINE
Rule 79    inner_statement -> command NEWLINE
Rule 80    inner_statement -> call NEWLINE
Rule 81    inner_statement -> empty NEWLINE
Rule 82    statement -> error
Rule 83    declaration -> type error
Rule 84    assignment -> variable ASSIGNMENT error
Rule 85    command -> MOVEUP L_RBRACKET error R_RBRACKET
Rule 86    command -> MOVEDOWN L_RBRACKET error R_RBRACKET
Rule 87    command -> MOVERIGHT L_RBRACKET error R_RBRACKET
Rule 88    command -> MOVELEFT L_RBRACKET error R_RBRACKET
Rule 89    command -> PINGUP L_RBRACKET error R_RBRACKET
Rule 90    command -> PINGDOWN L_RBRACKET error R_RBRACKET
Rule 91    command -> PINGRIGHT L_RBRACKET error R_RBRACKET
Rule 92    command -> PINGLEFT L_RBRACKET error R_RBRACKET
Rule 93    command -> VISION L_RBRACKET error R_RBRACKET
Rule 94    command -> VOICE L_RBRACKET error R_RBRACKET

Terminals, with rules where they appear

AMPERSAND            : 70
ASSIGNMENT           : 14 15 84
BLOCK                : 16 72
CARET                : 59
COMMA                : 43 68
CONVERSION           : 32 33
DATA                 : 28 29
DECIMAL              : 46 47 53
DOT                  : 65 66
EQ                   : 62
FALSE                : 51
FROM                 : 33
GREATER              : 60
LESS                 : 61
LOGIC                : 37
L_FBRACKET           : 16
L_QBRACKET           : 27 28 29 46 47 48 49
L_RBRACKET           : 13 17 18 19 20 21 22 23 24 25 26 85 86 87 88 89 90 91 92 93 94
MINUS                : 56 64
MOVEDOWN             : 18 86
MOVELEFT             : 20 88
MOVERIGHT            : 19 87
MOVEUP               : 17 85
NEWLINE              : 4 5 6 7 8 9 10 11 76 77 78 79 80 81
NOTEQ                : 63
NUMERIC              : 35
PINGDOWN             : 22 90
PINGLEFT             : 24 92
PINGRIGHT            : 23 91
PINGUP               : 21 89
PLUS                 : 55
PROC                 : 27
RECORD               : 28 29
R_FBRACKET           : 16
R_QBRACKET           : 27 28 29 46 47 48 49
R_RBRACKET           : 13 17 18 19 20 21 22 23 24 25 26 85 86 87 88 89 90 91 92 93 94
SLASH                : 58
STAR                 : 57
STRING               : 36
TEXT                 : 54
TO                   : 32
TRUE                 : 50
UNBLOCK              : 16 72
UNDEF                : 52
VARIABLE             : 13 27 28 29 32 33 38 44 45 48 49 70 71
VISION               : 25 93
VOICE                : 26 94
error                : 82 83 84 85 86 87 88 89 90 91 92 93 94

Nonterminals, with rules where they appear

assignment           : 6 15 77
call                 : 4 80
command              : 8 79
complex_expression   : 41
const                : 40
conversion           : 30 31
conversions          : 29 30
cycle                : 7 78
declaration          : 5 76
empty                : 11 81
expression           : 14 16 26 42 43 64 65 66 67
indexing             : 44 46 48
inner_statement      : 73 74 75
inner_statements     : 16 72 74
parameter            : 68 69
parameters           : 27 28 29 68
part_expression      : 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63
procedure            : 9
program              : 0
record               : 10
statement            : 2 3
statements           : 1 2
statements_group     : 27
type                 : 12 32 33 70 71 83
variable             : 12 14 15 17 18 19 20 21 22 23 24 25 39 84
variables            : 13 43

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . call NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . cycle NEWLINE
    (8) statement -> . command NEWLINE
    (9) statement -> . procedure NEWLINE
    (10) statement -> . record NEWLINE
    (11) statement -> . empty NEWLINE
    (82) statement -> . error
    (13) call -> . VARIABLE L_RBRACKET variables R_RBRACKET
    (12) declaration -> . type variable
    (83) declaration -> . type error
    (14) assignment -> . variable ASSIGNMENT expression
    (15) assignment -> . variable ASSIGNMENT assignment
    (84) assignment -> . variable ASSIGNMENT error
    (16) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (17) command -> . MOVEUP L_RBRACKET variable R_RBRACKET
    (18) command -> . MOVEDOWN L_RBRACKET variable R_RBRACKET
    (19) command -> . MOVERIGHT L_RBRACKET variable R_RBRACKET
    (20) command -> . MOVELEFT L_RBRACKET variable R_RBRACKET
    (21) command -> . PINGUP L_RBRACKET variable R_RBRACKET
    (22) command -> . PINGDOWN L_RBRACKET variable R_RBRACKET
    (23) command -> . PINGRIGHT L_RBRACKET variable R_RBRACKET
    (24) command -> . PINGLEFT L_RBRACKET variable R_RBRACKET
    (25) command -> . VISION L_RBRACKET variable R_RBRACKET
    (26) command -> . VOICE L_RBRACKET expression R_RBRACKET
    (85) command -> . MOVEUP L_RBRACKET error R_RBRACKET
    (86) command -> . MOVEDOWN L_RBRACKET error R_RBRACKET
    (87) command -> . MOVERIGHT L_RBRACKET error R_RBRACKET
    (88) command -> . MOVELEFT L_RBRACKET error R_RBRACKET
    (89) command -> . PINGUP L_RBRACKET error R_RBRACKET
    (90) command -> . PINGDOWN L_RBRACKET error R_RBRACKET
    (91) command -> . PINGRIGHT L_RBRACKET error R_RBRACKET
    (92) command -> . PINGLEFT L_RBRACKET error R_RBRACKET
    (93) command -> . VISION L_RBRACKET error R_RBRACKET
    (94) command -> . VOICE L_RBRACKET error R_RBRACKET
    (27) procedure -> . PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group
    (28) record -> . RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET
    (29) record -> . RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions
    (34) empty -> .
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    error           shift and go to state 12
    VARIABLE        shift and go to state 13
    L_FBRACKET      shift and go to state 16
    MOVEUP          shift and go to state 17
    MOVEDOWN        shift and go to state 18
    MOVERIGHT       shift and go to state 19
    MOVELEFT        shift and go to state 20
    PINGUP          shift and go to state 21
    PINGDOWN        shift and go to state 22
    PINGRIGHT       shift and go to state 23
    PINGLEFT        shift and go to state 24
    VISION          shift and go to state 25
    VOICE           shift and go to state 26
    PROC            shift and go to state 27
    RECORD          shift and go to state 28
    NEWLINE         reduce using rule 34 (empty -> .)
    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    call                           shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    cycle                          shift and go to state 7
    command                        shift and go to state 8
    procedure                      shift and go to state 9
    record                         shift and go to state 10
    empty                          shift and go to state 11
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . call NEWLINE
    (5) statement -> . declaration NEWLINE
    (6) statement -> . assignment NEWLINE
    (7) statement -> . cycle NEWLINE
    (8) statement -> . command NEWLINE
    (9) statement -> . procedure NEWLINE
    (10) statement -> . record NEWLINE
    (11) statement -> . empty NEWLINE
    (82) statement -> . error
    (13) call -> . VARIABLE L_RBRACKET variables R_RBRACKET
    (12) declaration -> . type variable
    (83) declaration -> . type error
    (14) assignment -> . variable ASSIGNMENT expression
    (15) assignment -> . variable ASSIGNMENT assignment
    (84) assignment -> . variable ASSIGNMENT error
    (16) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (17) command -> . MOVEUP L_RBRACKET variable R_RBRACKET
    (18) command -> . MOVEDOWN L_RBRACKET variable R_RBRACKET
    (19) command -> . MOVERIGHT L_RBRACKET variable R_RBRACKET
    (20) command -> . MOVELEFT L_RBRACKET variable R_RBRACKET
    (21) command -> . PINGUP L_RBRACKET variable R_RBRACKET
    (22) command -> . PINGDOWN L_RBRACKET variable R_RBRACKET
    (23) command -> . PINGRIGHT L_RBRACKET variable R_RBRACKET
    (24) command -> . PINGLEFT L_RBRACKET variable R_RBRACKET
    (25) command -> . VISION L_RBRACKET variable R_RBRACKET
    (26) command -> . VOICE L_RBRACKET expression R_RBRACKET
    (85) command -> . MOVEUP L_RBRACKET error R_RBRACKET
    (86) command -> . MOVEDOWN L_RBRACKET error R_RBRACKET
    (87) command -> . MOVERIGHT L_RBRACKET error R_RBRACKET
    (88) command -> . MOVELEFT L_RBRACKET error R_RBRACKET
    (89) command -> . PINGUP L_RBRACKET error R_RBRACKET
    (90) command -> . PINGDOWN L_RBRACKET error R_RBRACKET
    (91) command -> . PINGRIGHT L_RBRACKET error R_RBRACKET
    (92) command -> . PINGLEFT L_RBRACKET error R_RBRACKET
    (93) command -> . VISION L_RBRACKET error R_RBRACKET
    (94) command -> . VOICE L_RBRACKET error R_RBRACKET
    (27) procedure -> . PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group
    (28) record -> . RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET
    (29) record -> . RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions
    (34) empty -> .
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    $end            reduce using rule 1 (program -> statements .)
    error           shift and go to state 12
    VARIABLE        shift and go to state 13
    L_FBRACKET      shift and go to state 16
    MOVEUP          shift and go to state 17
    MOVEDOWN        shift and go to state 18
    MOVERIGHT       shift and go to state 19
    MOVELEFT        shift and go to state 20
    PINGUP          shift and go to state 21
    PINGDOWN        shift and go to state 22
    PINGRIGHT       shift and go to state 23
    PINGLEFT        shift and go to state 24
    VISION          shift and go to state 25
    VOICE           shift and go to state 26
    PROC            shift and go to state 27
    RECORD          shift and go to state 28
    NEWLINE         reduce using rule 34 (empty -> .)
    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31

    statement                      shift and go to state 32
    call                           shift and go to state 4
    declaration                    shift and go to state 5
    assignment                     shift and go to state 6
    cycle                          shift and go to state 7
    command                        shift and go to state 8
    procedure                      shift and go to state 9
    record                         shift and go to state 10
    empty                          shift and go to state 11
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 3

    (3) statements -> statement .

    error           reduce using rule 3 (statements -> statement .)
    VARIABLE        reduce using rule 3 (statements -> statement .)
    L_FBRACKET      reduce using rule 3 (statements -> statement .)
    MOVEUP          reduce using rule 3 (statements -> statement .)
    MOVEDOWN        reduce using rule 3 (statements -> statement .)
    MOVERIGHT       reduce using rule 3 (statements -> statement .)
    MOVELEFT        reduce using rule 3 (statements -> statement .)
    PINGUP          reduce using rule 3 (statements -> statement .)
    PINGDOWN        reduce using rule 3 (statements -> statement .)
    PINGRIGHT       reduce using rule 3 (statements -> statement .)
    PINGLEFT        reduce using rule 3 (statements -> statement .)
    VISION          reduce using rule 3 (statements -> statement .)
    VOICE           reduce using rule 3 (statements -> statement .)
    PROC            reduce using rule 3 (statements -> statement .)
    RECORD          reduce using rule 3 (statements -> statement .)
    NUMERIC         reduce using rule 3 (statements -> statement .)
    STRING          reduce using rule 3 (statements -> statement .)
    LOGIC           reduce using rule 3 (statements -> statement .)
    NEWLINE         reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> call . NEWLINE

    NEWLINE         shift and go to state 33


state 5

    (5) statement -> declaration . NEWLINE

    NEWLINE         shift and go to state 34


state 6

    (6) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 35


state 7

    (7) statement -> cycle . NEWLINE

    NEWLINE         shift and go to state 36


state 8

    (8) statement -> command . NEWLINE

    NEWLINE         shift and go to state 37


state 9

    (9) statement -> procedure . NEWLINE

    NEWLINE         shift and go to state 38


state 10

    (10) statement -> record . NEWLINE

    NEWLINE         shift and go to state 39


state 11

    (11) statement -> empty . NEWLINE

    NEWLINE         shift and go to state 40


state 12

    (82) statement -> error .

    error           reduce using rule 82 (statement -> error .)
    VARIABLE        reduce using rule 82 (statement -> error .)
    L_FBRACKET      reduce using rule 82 (statement -> error .)
    MOVEUP          reduce using rule 82 (statement -> error .)
    MOVEDOWN        reduce using rule 82 (statement -> error .)
    MOVERIGHT       reduce using rule 82 (statement -> error .)
    MOVELEFT        reduce using rule 82 (statement -> error .)
    PINGUP          reduce using rule 82 (statement -> error .)
    PINGDOWN        reduce using rule 82 (statement -> error .)
    PINGRIGHT       reduce using rule 82 (statement -> error .)
    PINGLEFT        reduce using rule 82 (statement -> error .)
    VISION          reduce using rule 82 (statement -> error .)
    VOICE           reduce using rule 82 (statement -> error .)
    PROC            reduce using rule 82 (statement -> error .)
    RECORD          reduce using rule 82 (statement -> error .)
    NUMERIC         reduce using rule 82 (statement -> error .)
    STRING          reduce using rule 82 (statement -> error .)
    LOGIC           reduce using rule 82 (statement -> error .)
    NEWLINE         reduce using rule 82 (statement -> error .)
    $end            reduce using rule 82 (statement -> error .)


state 13

    (13) call -> VARIABLE . L_RBRACKET variables R_RBRACKET
    (38) type -> VARIABLE .
    (44) variable -> VARIABLE . indexing
    (45) variable -> VARIABLE .
    (46) indexing -> . L_QBRACKET DECIMAL R_QBRACKET indexing
    (47) indexing -> . L_QBRACKET DECIMAL R_QBRACKET
    (48) indexing -> . L_QBRACKET VARIABLE R_QBRACKET indexing
    (49) indexing -> . L_QBRACKET VARIABLE R_QBRACKET

    L_RBRACKET      shift and go to state 41
    error           reduce using rule 38 (type -> VARIABLE .)
    VARIABLE        reduce using rule 38 (type -> VARIABLE .)
    ASSIGNMENT      reduce using rule 45 (variable -> VARIABLE .)
    L_QBRACKET      shift and go to state 43

    indexing                       shift and go to state 42

state 14

    (12) declaration -> type . variable
    (83) declaration -> type . error
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    error           shift and go to state 45
    VARIABLE        shift and go to state 46

    variable                       shift and go to state 44

state 15

    (14) assignment -> variable . ASSIGNMENT expression
    (15) assignment -> variable . ASSIGNMENT assignment
    (84) assignment -> variable . ASSIGNMENT error

    ASSIGNMENT      shift and go to state 47


state 16

    (16) cycle -> L_FBRACKET . expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58
    DOT             shift and go to state 59

    expression                     shift and go to state 48
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51
    part_expression                shift and go to state 57

state 17

    (17) command -> MOVEUP . L_RBRACKET variable R_RBRACKET
    (85) command -> MOVEUP . L_RBRACKET error R_RBRACKET

    L_RBRACKET      shift and go to state 60


state 18

    (18) command -> MOVEDOWN . L_RBRACKET variable R_RBRACKET
    (86) command -> MOVEDOWN . L_RBRACKET error R_RBRACKET

    L_RBRACKET      shift and go to state 61


state 19

    (19) command -> MOVERIGHT . L_RBRACKET variable R_RBRACKET
    (87) command -> MOVERIGHT . L_RBRACKET error R_RBRACKET

    L_RBRACKET      shift and go to state 62


state 20

    (20) command -> MOVELEFT . L_RBRACKET variable R_RBRACKET
    (88) command -> MOVELEFT . L_RBRACKET error R_RBRACKET

    L_RBRACKET      shift and go to state 63


state 21

    (21) command -> PINGUP . L_RBRACKET variable R_RBRACKET
    (89) command -> PINGUP . L_RBRACKET error R_RBRACKET

    L_RBRACKET      shift and go to state 64


state 22

    (22) command -> PINGDOWN . L_RBRACKET variable R_RBRACKET
    (90) command -> PINGDOWN . L_RBRACKET error R_RBRACKET

    L_RBRACKET      shift and go to state 65


state 23

    (23) command -> PINGRIGHT . L_RBRACKET variable R_RBRACKET
    (91) command -> PINGRIGHT . L_RBRACKET error R_RBRACKET

    L_RBRACKET      shift and go to state 66


state 24

    (24) command -> PINGLEFT . L_RBRACKET variable R_RBRACKET
    (92) command -> PINGLEFT . L_RBRACKET error R_RBRACKET

    L_RBRACKET      shift and go to state 67


state 25

    (25) command -> VISION . L_RBRACKET variable R_RBRACKET
    (93) command -> VISION . L_RBRACKET error R_RBRACKET

    L_RBRACKET      shift and go to state 68


state 26

    (26) command -> VOICE . L_RBRACKET expression R_RBRACKET
    (94) command -> VOICE . L_RBRACKET error R_RBRACKET

    L_RBRACKET      shift and go to state 69


state 27

    (27) procedure -> PROC . VARIABLE L_QBRACKET parameters R_QBRACKET statements_group

    VARIABLE        shift and go to state 70


state 28

    (28) record -> RECORD . VARIABLE DATA L_QBRACKET parameters R_QBRACKET
    (29) record -> RECORD . VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions

    VARIABLE        shift and go to state 71


state 29

    (35) type -> NUMERIC .

    error           reduce using rule 35 (type -> NUMERIC .)
    VARIABLE        reduce using rule 35 (type -> NUMERIC .)


state 30

    (36) type -> STRING .

    error           reduce using rule 36 (type -> STRING .)
    VARIABLE        reduce using rule 36 (type -> STRING .)


state 31

    (37) type -> LOGIC .

    error           reduce using rule 37 (type -> LOGIC .)
    VARIABLE        reduce using rule 37 (type -> LOGIC .)


state 32

    (2) statements -> statements statement .

    error           reduce using rule 2 (statements -> statements statement .)
    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    L_FBRACKET      reduce using rule 2 (statements -> statements statement .)
    MOVEUP          reduce using rule 2 (statements -> statements statement .)
    MOVEDOWN        reduce using rule 2 (statements -> statements statement .)
    MOVERIGHT       reduce using rule 2 (statements -> statements statement .)
    MOVELEFT        reduce using rule 2 (statements -> statements statement .)
    PINGUP          reduce using rule 2 (statements -> statements statement .)
    PINGDOWN        reduce using rule 2 (statements -> statements statement .)
    PINGRIGHT       reduce using rule 2 (statements -> statements statement .)
    PINGLEFT        reduce using rule 2 (statements -> statements statement .)
    VISION          reduce using rule 2 (statements -> statements statement .)
    VOICE           reduce using rule 2 (statements -> statements statement .)
    PROC            reduce using rule 2 (statements -> statements statement .)
    RECORD          reduce using rule 2 (statements -> statements statement .)
    NUMERIC         reduce using rule 2 (statements -> statements statement .)
    STRING          reduce using rule 2 (statements -> statements statement .)
    LOGIC           reduce using rule 2 (statements -> statements statement .)
    NEWLINE         reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 33

    (4) statement -> call NEWLINE .

    error           reduce using rule 4 (statement -> call NEWLINE .)
    VARIABLE        reduce using rule 4 (statement -> call NEWLINE .)
    L_FBRACKET      reduce using rule 4 (statement -> call NEWLINE .)
    MOVEUP          reduce using rule 4 (statement -> call NEWLINE .)
    MOVEDOWN        reduce using rule 4 (statement -> call NEWLINE .)
    MOVERIGHT       reduce using rule 4 (statement -> call NEWLINE .)
    MOVELEFT        reduce using rule 4 (statement -> call NEWLINE .)
    PINGUP          reduce using rule 4 (statement -> call NEWLINE .)
    PINGDOWN        reduce using rule 4 (statement -> call NEWLINE .)
    PINGRIGHT       reduce using rule 4 (statement -> call NEWLINE .)
    PINGLEFT        reduce using rule 4 (statement -> call NEWLINE .)
    VISION          reduce using rule 4 (statement -> call NEWLINE .)
    VOICE           reduce using rule 4 (statement -> call NEWLINE .)
    PROC            reduce using rule 4 (statement -> call NEWLINE .)
    RECORD          reduce using rule 4 (statement -> call NEWLINE .)
    NUMERIC         reduce using rule 4 (statement -> call NEWLINE .)
    STRING          reduce using rule 4 (statement -> call NEWLINE .)
    LOGIC           reduce using rule 4 (statement -> call NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> call NEWLINE .)
    $end            reduce using rule 4 (statement -> call NEWLINE .)


state 34

    (5) statement -> declaration NEWLINE .

    error           reduce using rule 5 (statement -> declaration NEWLINE .)
    VARIABLE        reduce using rule 5 (statement -> declaration NEWLINE .)
    L_FBRACKET      reduce using rule 5 (statement -> declaration NEWLINE .)
    MOVEUP          reduce using rule 5 (statement -> declaration NEWLINE .)
    MOVEDOWN        reduce using rule 5 (statement -> declaration NEWLINE .)
    MOVERIGHT       reduce using rule 5 (statement -> declaration NEWLINE .)
    MOVELEFT        reduce using rule 5 (statement -> declaration NEWLINE .)
    PINGUP          reduce using rule 5 (statement -> declaration NEWLINE .)
    PINGDOWN        reduce using rule 5 (statement -> declaration NEWLINE .)
    PINGRIGHT       reduce using rule 5 (statement -> declaration NEWLINE .)
    PINGLEFT        reduce using rule 5 (statement -> declaration NEWLINE .)
    VISION          reduce using rule 5 (statement -> declaration NEWLINE .)
    VOICE           reduce using rule 5 (statement -> declaration NEWLINE .)
    PROC            reduce using rule 5 (statement -> declaration NEWLINE .)
    RECORD          reduce using rule 5 (statement -> declaration NEWLINE .)
    NUMERIC         reduce using rule 5 (statement -> declaration NEWLINE .)
    STRING          reduce using rule 5 (statement -> declaration NEWLINE .)
    LOGIC           reduce using rule 5 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> declaration NEWLINE .)
    $end            reduce using rule 5 (statement -> declaration NEWLINE .)


state 35

    (6) statement -> assignment NEWLINE .

    error           reduce using rule 6 (statement -> assignment NEWLINE .)
    VARIABLE        reduce using rule 6 (statement -> assignment NEWLINE .)
    L_FBRACKET      reduce using rule 6 (statement -> assignment NEWLINE .)
    MOVEUP          reduce using rule 6 (statement -> assignment NEWLINE .)
    MOVEDOWN        reduce using rule 6 (statement -> assignment NEWLINE .)
    MOVERIGHT       reduce using rule 6 (statement -> assignment NEWLINE .)
    MOVELEFT        reduce using rule 6 (statement -> assignment NEWLINE .)
    PINGUP          reduce using rule 6 (statement -> assignment NEWLINE .)
    PINGDOWN        reduce using rule 6 (statement -> assignment NEWLINE .)
    PINGRIGHT       reduce using rule 6 (statement -> assignment NEWLINE .)
    PINGLEFT        reduce using rule 6 (statement -> assignment NEWLINE .)
    VISION          reduce using rule 6 (statement -> assignment NEWLINE .)
    VOICE           reduce using rule 6 (statement -> assignment NEWLINE .)
    PROC            reduce using rule 6 (statement -> assignment NEWLINE .)
    RECORD          reduce using rule 6 (statement -> assignment NEWLINE .)
    NUMERIC         reduce using rule 6 (statement -> assignment NEWLINE .)
    STRING          reduce using rule 6 (statement -> assignment NEWLINE .)
    LOGIC           reduce using rule 6 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> assignment NEWLINE .)
    $end            reduce using rule 6 (statement -> assignment NEWLINE .)


state 36

    (7) statement -> cycle NEWLINE .

    error           reduce using rule 7 (statement -> cycle NEWLINE .)
    VARIABLE        reduce using rule 7 (statement -> cycle NEWLINE .)
    L_FBRACKET      reduce using rule 7 (statement -> cycle NEWLINE .)
    MOVEUP          reduce using rule 7 (statement -> cycle NEWLINE .)
    MOVEDOWN        reduce using rule 7 (statement -> cycle NEWLINE .)
    MOVERIGHT       reduce using rule 7 (statement -> cycle NEWLINE .)
    MOVELEFT        reduce using rule 7 (statement -> cycle NEWLINE .)
    PINGUP          reduce using rule 7 (statement -> cycle NEWLINE .)
    PINGDOWN        reduce using rule 7 (statement -> cycle NEWLINE .)
    PINGRIGHT       reduce using rule 7 (statement -> cycle NEWLINE .)
    PINGLEFT        reduce using rule 7 (statement -> cycle NEWLINE .)
    VISION          reduce using rule 7 (statement -> cycle NEWLINE .)
    VOICE           reduce using rule 7 (statement -> cycle NEWLINE .)
    PROC            reduce using rule 7 (statement -> cycle NEWLINE .)
    RECORD          reduce using rule 7 (statement -> cycle NEWLINE .)
    NUMERIC         reduce using rule 7 (statement -> cycle NEWLINE .)
    STRING          reduce using rule 7 (statement -> cycle NEWLINE .)
    LOGIC           reduce using rule 7 (statement -> cycle NEWLINE .)
    NEWLINE         reduce using rule 7 (statement -> cycle NEWLINE .)
    $end            reduce using rule 7 (statement -> cycle NEWLINE .)


state 37

    (8) statement -> command NEWLINE .

    error           reduce using rule 8 (statement -> command NEWLINE .)
    VARIABLE        reduce using rule 8 (statement -> command NEWLINE .)
    L_FBRACKET      reduce using rule 8 (statement -> command NEWLINE .)
    MOVEUP          reduce using rule 8 (statement -> command NEWLINE .)
    MOVEDOWN        reduce using rule 8 (statement -> command NEWLINE .)
    MOVERIGHT       reduce using rule 8 (statement -> command NEWLINE .)
    MOVELEFT        reduce using rule 8 (statement -> command NEWLINE .)
    PINGUP          reduce using rule 8 (statement -> command NEWLINE .)
    PINGDOWN        reduce using rule 8 (statement -> command NEWLINE .)
    PINGRIGHT       reduce using rule 8 (statement -> command NEWLINE .)
    PINGLEFT        reduce using rule 8 (statement -> command NEWLINE .)
    VISION          reduce using rule 8 (statement -> command NEWLINE .)
    VOICE           reduce using rule 8 (statement -> command NEWLINE .)
    PROC            reduce using rule 8 (statement -> command NEWLINE .)
    RECORD          reduce using rule 8 (statement -> command NEWLINE .)
    NUMERIC         reduce using rule 8 (statement -> command NEWLINE .)
    STRING          reduce using rule 8 (statement -> command NEWLINE .)
    LOGIC           reduce using rule 8 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 8 (statement -> command NEWLINE .)
    $end            reduce using rule 8 (statement -> command NEWLINE .)


state 38

    (9) statement -> procedure NEWLINE .

    error           reduce using rule 9 (statement -> procedure NEWLINE .)
    VARIABLE        reduce using rule 9 (statement -> procedure NEWLINE .)
    L_FBRACKET      reduce using rule 9 (statement -> procedure NEWLINE .)
    MOVEUP          reduce using rule 9 (statement -> procedure NEWLINE .)
    MOVEDOWN        reduce using rule 9 (statement -> procedure NEWLINE .)
    MOVERIGHT       reduce using rule 9 (statement -> procedure NEWLINE .)
    MOVELEFT        reduce using rule 9 (statement -> procedure NEWLINE .)
    PINGUP          reduce using rule 9 (statement -> procedure NEWLINE .)
    PINGDOWN        reduce using rule 9 (statement -> procedure NEWLINE .)
    PINGRIGHT       reduce using rule 9 (statement -> procedure NEWLINE .)
    PINGLEFT        reduce using rule 9 (statement -> procedure NEWLINE .)
    VISION          reduce using rule 9 (statement -> procedure NEWLINE .)
    VOICE           reduce using rule 9 (statement -> procedure NEWLINE .)
    PROC            reduce using rule 9 (statement -> procedure NEWLINE .)
    RECORD          reduce using rule 9 (statement -> procedure NEWLINE .)
    NUMERIC         reduce using rule 9 (statement -> procedure NEWLINE .)
    STRING          reduce using rule 9 (statement -> procedure NEWLINE .)
    LOGIC           reduce using rule 9 (statement -> procedure NEWLINE .)
    NEWLINE         reduce using rule 9 (statement -> procedure NEWLINE .)
    $end            reduce using rule 9 (statement -> procedure NEWLINE .)


state 39

    (10) statement -> record NEWLINE .

    error           reduce using rule 10 (statement -> record NEWLINE .)
    VARIABLE        reduce using rule 10 (statement -> record NEWLINE .)
    L_FBRACKET      reduce using rule 10 (statement -> record NEWLINE .)
    MOVEUP          reduce using rule 10 (statement -> record NEWLINE .)
    MOVEDOWN        reduce using rule 10 (statement -> record NEWLINE .)
    MOVERIGHT       reduce using rule 10 (statement -> record NEWLINE .)
    MOVELEFT        reduce using rule 10 (statement -> record NEWLINE .)
    PINGUP          reduce using rule 10 (statement -> record NEWLINE .)
    PINGDOWN        reduce using rule 10 (statement -> record NEWLINE .)
    PINGRIGHT       reduce using rule 10 (statement -> record NEWLINE .)
    PINGLEFT        reduce using rule 10 (statement -> record NEWLINE .)
    VISION          reduce using rule 10 (statement -> record NEWLINE .)
    VOICE           reduce using rule 10 (statement -> record NEWLINE .)
    PROC            reduce using rule 10 (statement -> record NEWLINE .)
    RECORD          reduce using rule 10 (statement -> record NEWLINE .)
    NUMERIC         reduce using rule 10 (statement -> record NEWLINE .)
    STRING          reduce using rule 10 (statement -> record NEWLINE .)
    LOGIC           reduce using rule 10 (statement -> record NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> record NEWLINE .)
    $end            reduce using rule 10 (statement -> record NEWLINE .)


state 40

    (11) statement -> empty NEWLINE .

    error           reduce using rule 11 (statement -> empty NEWLINE .)
    VARIABLE        reduce using rule 11 (statement -> empty NEWLINE .)
    L_FBRACKET      reduce using rule 11 (statement -> empty NEWLINE .)
    MOVEUP          reduce using rule 11 (statement -> empty NEWLINE .)
    MOVEDOWN        reduce using rule 11 (statement -> empty NEWLINE .)
    MOVERIGHT       reduce using rule 11 (statement -> empty NEWLINE .)
    MOVELEFT        reduce using rule 11 (statement -> empty NEWLINE .)
    PINGUP          reduce using rule 11 (statement -> empty NEWLINE .)
    PINGDOWN        reduce using rule 11 (statement -> empty NEWLINE .)
    PINGRIGHT       reduce using rule 11 (statement -> empty NEWLINE .)
    PINGLEFT        reduce using rule 11 (statement -> empty NEWLINE .)
    VISION          reduce using rule 11 (statement -> empty NEWLINE .)
    VOICE           reduce using rule 11 (statement -> empty NEWLINE .)
    PROC            reduce using rule 11 (statement -> empty NEWLINE .)
    RECORD          reduce using rule 11 (statement -> empty NEWLINE .)
    NUMERIC         reduce using rule 11 (statement -> empty NEWLINE .)
    STRING          reduce using rule 11 (statement -> empty NEWLINE .)
    LOGIC           reduce using rule 11 (statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 11 (statement -> empty NEWLINE .)
    $end            reduce using rule 11 (statement -> empty NEWLINE .)


state 41

    (13) call -> VARIABLE L_RBRACKET . variables R_RBRACKET
    (42) variables -> . expression
    (43) variables -> . expression COMMA variables
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58
    DOT             shift and go to state 59

    variables                      shift and go to state 72
    expression                     shift and go to state 73
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51
    part_expression                shift and go to state 57

state 42

    (44) variable -> VARIABLE indexing .

    ASSIGNMENT      reduce using rule 44 (variable -> VARIABLE indexing .)
    NEWLINE         reduce using rule 44 (variable -> VARIABLE indexing .)
    R_FBRACKET      reduce using rule 44 (variable -> VARIABLE indexing .)
    DOT             reduce using rule 44 (variable -> VARIABLE indexing .)
    PLUS            reduce using rule 44 (variable -> VARIABLE indexing .)
    MINUS           reduce using rule 44 (variable -> VARIABLE indexing .)
    STAR            reduce using rule 44 (variable -> VARIABLE indexing .)
    SLASH           reduce using rule 44 (variable -> VARIABLE indexing .)
    CARET           reduce using rule 44 (variable -> VARIABLE indexing .)
    GREATER         reduce using rule 44 (variable -> VARIABLE indexing .)
    LESS            reduce using rule 44 (variable -> VARIABLE indexing .)
    EQ              reduce using rule 44 (variable -> VARIABLE indexing .)
    NOTEQ           reduce using rule 44 (variable -> VARIABLE indexing .)
    COMMA           reduce using rule 44 (variable -> VARIABLE indexing .)
    R_RBRACKET      reduce using rule 44 (variable -> VARIABLE indexing .)


state 43

    (46) indexing -> L_QBRACKET . DECIMAL R_QBRACKET indexing
    (47) indexing -> L_QBRACKET . DECIMAL R_QBRACKET
    (48) indexing -> L_QBRACKET . VARIABLE R_QBRACKET indexing
    (49) indexing -> L_QBRACKET . VARIABLE R_QBRACKET

    DECIMAL         shift and go to state 74
    VARIABLE        shift and go to state 75


state 44

    (12) declaration -> type variable .

    NEWLINE         reduce using rule 12 (declaration -> type variable .)


state 45

    (83) declaration -> type error .

    NEWLINE         reduce using rule 83 (declaration -> type error .)


state 46

    (44) variable -> VARIABLE . indexing
    (45) variable -> VARIABLE .
    (46) indexing -> . L_QBRACKET DECIMAL R_QBRACKET indexing
    (47) indexing -> . L_QBRACKET DECIMAL R_QBRACKET
    (48) indexing -> . L_QBRACKET VARIABLE R_QBRACKET indexing
    (49) indexing -> . L_QBRACKET VARIABLE R_QBRACKET

    NEWLINE         reduce using rule 45 (variable -> VARIABLE .)
    R_FBRACKET      reduce using rule 45 (variable -> VARIABLE .)
    DOT             reduce using rule 45 (variable -> VARIABLE .)
    PLUS            reduce using rule 45 (variable -> VARIABLE .)
    MINUS           reduce using rule 45 (variable -> VARIABLE .)
    STAR            reduce using rule 45 (variable -> VARIABLE .)
    SLASH           reduce using rule 45 (variable -> VARIABLE .)
    CARET           reduce using rule 45 (variable -> VARIABLE .)
    GREATER         reduce using rule 45 (variable -> VARIABLE .)
    LESS            reduce using rule 45 (variable -> VARIABLE .)
    EQ              reduce using rule 45 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 45 (variable -> VARIABLE .)
    COMMA           reduce using rule 45 (variable -> VARIABLE .)
    R_RBRACKET      reduce using rule 45 (variable -> VARIABLE .)
    ASSIGNMENT      reduce using rule 45 (variable -> VARIABLE .)
    L_QBRACKET      shift and go to state 43

    indexing                       shift and go to state 42

state 47

    (14) assignment -> variable ASSIGNMENT . expression
    (15) assignment -> variable ASSIGNMENT . assignment
    (84) assignment -> variable ASSIGNMENT . error
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (14) assignment -> . variable ASSIGNMENT expression
    (15) assignment -> . variable ASSIGNMENT assignment
    (84) assignment -> . variable ASSIGNMENT error
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression

    error           shift and go to state 79
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58
    DOT             shift and go to state 59

    variable                       shift and go to state 76
    expression                     shift and go to state 77
    assignment                     shift and go to state 78
    const                          shift and go to state 50
    complex_expression             shift and go to state 51
    part_expression                shift and go to state 57

state 48

    (16) cycle -> L_FBRACKET expression . R_FBRACKET BLOCK inner_statements UNBLOCK
    (66) part_expression -> expression . DOT
    (67) part_expression -> expression .

    R_FBRACKET      shift and go to state 80
    DOT             shift and go to state 81
    PLUS            reduce using rule 67 (part_expression -> expression .)
    MINUS           reduce using rule 67 (part_expression -> expression .)
    STAR            reduce using rule 67 (part_expression -> expression .)
    SLASH           reduce using rule 67 (part_expression -> expression .)
    CARET           reduce using rule 67 (part_expression -> expression .)
    GREATER         reduce using rule 67 (part_expression -> expression .)
    LESS            reduce using rule 67 (part_expression -> expression .)
    EQ              reduce using rule 67 (part_expression -> expression .)
    NOTEQ           reduce using rule 67 (part_expression -> expression .)


state 49

    (39) expression -> variable .

    R_FBRACKET      reduce using rule 39 (expression -> variable .)
    DOT             reduce using rule 39 (expression -> variable .)
    PLUS            reduce using rule 39 (expression -> variable .)
    MINUS           reduce using rule 39 (expression -> variable .)
    STAR            reduce using rule 39 (expression -> variable .)
    SLASH           reduce using rule 39 (expression -> variable .)
    CARET           reduce using rule 39 (expression -> variable .)
    GREATER         reduce using rule 39 (expression -> variable .)
    LESS            reduce using rule 39 (expression -> variable .)
    EQ              reduce using rule 39 (expression -> variable .)
    NOTEQ           reduce using rule 39 (expression -> variable .)
    COMMA           reduce using rule 39 (expression -> variable .)
    R_RBRACKET      reduce using rule 39 (expression -> variable .)
    NEWLINE         reduce using rule 39 (expression -> variable .)


state 50

    (40) expression -> const .

    R_FBRACKET      reduce using rule 40 (expression -> const .)
    DOT             reduce using rule 40 (expression -> const .)
    PLUS            reduce using rule 40 (expression -> const .)
    MINUS           reduce using rule 40 (expression -> const .)
    STAR            reduce using rule 40 (expression -> const .)
    SLASH           reduce using rule 40 (expression -> const .)
    CARET           reduce using rule 40 (expression -> const .)
    GREATER         reduce using rule 40 (expression -> const .)
    LESS            reduce using rule 40 (expression -> const .)
    EQ              reduce using rule 40 (expression -> const .)
    NOTEQ           reduce using rule 40 (expression -> const .)
    COMMA           reduce using rule 40 (expression -> const .)
    R_RBRACKET      reduce using rule 40 (expression -> const .)
    NEWLINE         reduce using rule 40 (expression -> const .)


state 51

    (41) expression -> complex_expression .

    R_FBRACKET      reduce using rule 41 (expression -> complex_expression .)
    DOT             reduce using rule 41 (expression -> complex_expression .)
    PLUS            reduce using rule 41 (expression -> complex_expression .)
    MINUS           reduce using rule 41 (expression -> complex_expression .)
    STAR            reduce using rule 41 (expression -> complex_expression .)
    SLASH           reduce using rule 41 (expression -> complex_expression .)
    CARET           reduce using rule 41 (expression -> complex_expression .)
    GREATER         reduce using rule 41 (expression -> complex_expression .)
    LESS            reduce using rule 41 (expression -> complex_expression .)
    EQ              reduce using rule 41 (expression -> complex_expression .)
    NOTEQ           reduce using rule 41 (expression -> complex_expression .)
    COMMA           reduce using rule 41 (expression -> complex_expression .)
    R_RBRACKET      reduce using rule 41 (expression -> complex_expression .)
    NEWLINE         reduce using rule 41 (expression -> complex_expression .)


state 52

    (50) const -> TRUE .

    R_FBRACKET      reduce using rule 50 (const -> TRUE .)
    DOT             reduce using rule 50 (const -> TRUE .)
    PLUS            reduce using rule 50 (const -> TRUE .)
    MINUS           reduce using rule 50 (const -> TRUE .)
    STAR            reduce using rule 50 (const -> TRUE .)
    SLASH           reduce using rule 50 (const -> TRUE .)
    CARET           reduce using rule 50 (const -> TRUE .)
    GREATER         reduce using rule 50 (const -> TRUE .)
    LESS            reduce using rule 50 (const -> TRUE .)
    EQ              reduce using rule 50 (const -> TRUE .)
    NOTEQ           reduce using rule 50 (const -> TRUE .)
    COMMA           reduce using rule 50 (const -> TRUE .)
    R_RBRACKET      reduce using rule 50 (const -> TRUE .)
    NEWLINE         reduce using rule 50 (const -> TRUE .)


state 53

    (51) const -> FALSE .

    R_FBRACKET      reduce using rule 51 (const -> FALSE .)
    DOT             reduce using rule 51 (const -> FALSE .)
    PLUS            reduce using rule 51 (const -> FALSE .)
    MINUS           reduce using rule 51 (const -> FALSE .)
    STAR            reduce using rule 51 (const -> FALSE .)
    SLASH           reduce using rule 51 (const -> FALSE .)
    CARET           reduce using rule 51 (const -> FALSE .)
    GREATER         reduce using rule 51 (const -> FALSE .)
    LESS            reduce using rule 51 (const -> FALSE .)
    EQ              reduce using rule 51 (const -> FALSE .)
    NOTEQ           reduce using rule 51 (const -> FALSE .)
    COMMA           reduce using rule 51 (const -> FALSE .)
    R_RBRACKET      reduce using rule 51 (const -> FALSE .)
    NEWLINE         reduce using rule 51 (const -> FALSE .)


state 54

    (52) const -> UNDEF .

    R_FBRACKET      reduce using rule 52 (const -> UNDEF .)
    DOT             reduce using rule 52 (const -> UNDEF .)
    PLUS            reduce using rule 52 (const -> UNDEF .)
    MINUS           reduce using rule 52 (const -> UNDEF .)
    STAR            reduce using rule 52 (const -> UNDEF .)
    SLASH           reduce using rule 52 (const -> UNDEF .)
    CARET           reduce using rule 52 (const -> UNDEF .)
    GREATER         reduce using rule 52 (const -> UNDEF .)
    LESS            reduce using rule 52 (const -> UNDEF .)
    EQ              reduce using rule 52 (const -> UNDEF .)
    NOTEQ           reduce using rule 52 (const -> UNDEF .)
    COMMA           reduce using rule 52 (const -> UNDEF .)
    R_RBRACKET      reduce using rule 52 (const -> UNDEF .)
    NEWLINE         reduce using rule 52 (const -> UNDEF .)


state 55

    (53) const -> DECIMAL .

    R_FBRACKET      reduce using rule 53 (const -> DECIMAL .)
    DOT             reduce using rule 53 (const -> DECIMAL .)
    PLUS            reduce using rule 53 (const -> DECIMAL .)
    MINUS           reduce using rule 53 (const -> DECIMAL .)
    STAR            reduce using rule 53 (const -> DECIMAL .)
    SLASH           reduce using rule 53 (const -> DECIMAL .)
    CARET           reduce using rule 53 (const -> DECIMAL .)
    GREATER         reduce using rule 53 (const -> DECIMAL .)
    LESS            reduce using rule 53 (const -> DECIMAL .)
    EQ              reduce using rule 53 (const -> DECIMAL .)
    NOTEQ           reduce using rule 53 (const -> DECIMAL .)
    COMMA           reduce using rule 53 (const -> DECIMAL .)
    R_RBRACKET      reduce using rule 53 (const -> DECIMAL .)
    NEWLINE         reduce using rule 53 (const -> DECIMAL .)


state 56

    (54) const -> TEXT .

    R_FBRACKET      reduce using rule 54 (const -> TEXT .)
    DOT             reduce using rule 54 (const -> TEXT .)
    PLUS            reduce using rule 54 (const -> TEXT .)
    MINUS           reduce using rule 54 (const -> TEXT .)
    STAR            reduce using rule 54 (const -> TEXT .)
    SLASH           reduce using rule 54 (const -> TEXT .)
    CARET           reduce using rule 54 (const -> TEXT .)
    GREATER         reduce using rule 54 (const -> TEXT .)
    LESS            reduce using rule 54 (const -> TEXT .)
    EQ              reduce using rule 54 (const -> TEXT .)
    NOTEQ           reduce using rule 54 (const -> TEXT .)
    COMMA           reduce using rule 54 (const -> TEXT .)
    R_RBRACKET      reduce using rule 54 (const -> TEXT .)
    NEWLINE         reduce using rule 54 (const -> TEXT .)


state 57

    (55) complex_expression -> part_expression . PLUS part_expression
    (56) complex_expression -> part_expression . MINUS part_expression
    (57) complex_expression -> part_expression . STAR part_expression
    (58) complex_expression -> part_expression . SLASH part_expression
    (59) complex_expression -> part_expression . CARET part_expression
    (60) complex_expression -> part_expression . GREATER part_expression
    (61) complex_expression -> part_expression . LESS part_expression
    (62) complex_expression -> part_expression . EQ part_expression
    (63) complex_expression -> part_expression . NOTEQ part_expression

    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    STAR            shift and go to state 84
    SLASH           shift and go to state 85
    CARET           shift and go to state 86
    GREATER         shift and go to state 87
    LESS            shift and go to state 88
    EQ              shift and go to state 89
    NOTEQ           shift and go to state 90


state 58

    (64) complex_expression -> MINUS . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58
    DOT             shift and go to state 59

    expression                     shift and go to state 91
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51
    part_expression                shift and go to state 57

state 59

    (65) part_expression -> DOT . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58
    DOT             shift and go to state 59

    expression                     shift and go to state 92
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51
    part_expression                shift and go to state 57

state 60

    (17) command -> MOVEUP L_RBRACKET . variable R_RBRACKET
    (85) command -> MOVEUP L_RBRACKET . error R_RBRACKET
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    error           shift and go to state 94
    VARIABLE        shift and go to state 46

    variable                       shift and go to state 93

state 61

    (18) command -> MOVEDOWN L_RBRACKET . variable R_RBRACKET
    (86) command -> MOVEDOWN L_RBRACKET . error R_RBRACKET
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    error           shift and go to state 96
    VARIABLE        shift and go to state 46

    variable                       shift and go to state 95

state 62

    (19) command -> MOVERIGHT L_RBRACKET . variable R_RBRACKET
    (87) command -> MOVERIGHT L_RBRACKET . error R_RBRACKET
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    error           shift and go to state 98
    VARIABLE        shift and go to state 46

    variable                       shift and go to state 97

state 63

    (20) command -> MOVELEFT L_RBRACKET . variable R_RBRACKET
    (88) command -> MOVELEFT L_RBRACKET . error R_RBRACKET
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    error           shift and go to state 100
    VARIABLE        shift and go to state 46

    variable                       shift and go to state 99

state 64

    (21) command -> PINGUP L_RBRACKET . variable R_RBRACKET
    (89) command -> PINGUP L_RBRACKET . error R_RBRACKET
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    error           shift and go to state 102
    VARIABLE        shift and go to state 46

    variable                       shift and go to state 101

state 65

    (22) command -> PINGDOWN L_RBRACKET . variable R_RBRACKET
    (90) command -> PINGDOWN L_RBRACKET . error R_RBRACKET
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    error           shift and go to state 104
    VARIABLE        shift and go to state 46

    variable                       shift and go to state 103

state 66

    (23) command -> PINGRIGHT L_RBRACKET . variable R_RBRACKET
    (91) command -> PINGRIGHT L_RBRACKET . error R_RBRACKET
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    error           shift and go to state 106
    VARIABLE        shift and go to state 46

    variable                       shift and go to state 105

state 67

    (24) command -> PINGLEFT L_RBRACKET . variable R_RBRACKET
    (92) command -> PINGLEFT L_RBRACKET . error R_RBRACKET
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    error           shift and go to state 108
    VARIABLE        shift and go to state 46

    variable                       shift and go to state 107

state 68

    (25) command -> VISION L_RBRACKET . variable R_RBRACKET
    (93) command -> VISION L_RBRACKET . error R_RBRACKET
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    error           shift and go to state 110
    VARIABLE        shift and go to state 46

    variable                       shift and go to state 109

state 69

    (26) command -> VOICE L_RBRACKET . expression R_RBRACKET
    (94) command -> VOICE L_RBRACKET . error R_RBRACKET
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression

    error           shift and go to state 112
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58
    DOT             shift and go to state 59

    expression                     shift and go to state 111
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51
    part_expression                shift and go to state 57

state 70

    (27) procedure -> PROC VARIABLE . L_QBRACKET parameters R_QBRACKET statements_group

    L_QBRACKET      shift and go to state 113


state 71

    (28) record -> RECORD VARIABLE . DATA L_QBRACKET parameters R_QBRACKET
    (29) record -> RECORD VARIABLE . DATA L_QBRACKET parameters R_QBRACKET conversions

    DATA            shift and go to state 114


state 72

    (13) call -> VARIABLE L_RBRACKET variables . R_RBRACKET

    R_RBRACKET      shift and go to state 115


state 73

    (42) variables -> expression .
    (43) variables -> expression . COMMA variables
    (66) part_expression -> expression . DOT
    (67) part_expression -> expression .

    R_RBRACKET      reduce using rule 42 (variables -> expression .)
    COMMA           shift and go to state 116
    DOT             shift and go to state 81
    PLUS            reduce using rule 67 (part_expression -> expression .)
    MINUS           reduce using rule 67 (part_expression -> expression .)
    STAR            reduce using rule 67 (part_expression -> expression .)
    SLASH           reduce using rule 67 (part_expression -> expression .)
    CARET           reduce using rule 67 (part_expression -> expression .)
    GREATER         reduce using rule 67 (part_expression -> expression .)
    LESS            reduce using rule 67 (part_expression -> expression .)
    EQ              reduce using rule 67 (part_expression -> expression .)
    NOTEQ           reduce using rule 67 (part_expression -> expression .)


state 74

    (46) indexing -> L_QBRACKET DECIMAL . R_QBRACKET indexing
    (47) indexing -> L_QBRACKET DECIMAL . R_QBRACKET

    R_QBRACKET      shift and go to state 117


state 75

    (48) indexing -> L_QBRACKET VARIABLE . R_QBRACKET indexing
    (49) indexing -> L_QBRACKET VARIABLE . R_QBRACKET

    R_QBRACKET      shift and go to state 118


state 76

    (39) expression -> variable .
    (14) assignment -> variable . ASSIGNMENT expression
    (15) assignment -> variable . ASSIGNMENT assignment
    (84) assignment -> variable . ASSIGNMENT error

    DOT             reduce using rule 39 (expression -> variable .)
    NEWLINE         reduce using rule 39 (expression -> variable .)
    PLUS            reduce using rule 39 (expression -> variable .)
    MINUS           reduce using rule 39 (expression -> variable .)
    STAR            reduce using rule 39 (expression -> variable .)
    SLASH           reduce using rule 39 (expression -> variable .)
    CARET           reduce using rule 39 (expression -> variable .)
    GREATER         reduce using rule 39 (expression -> variable .)
    LESS            reduce using rule 39 (expression -> variable .)
    EQ              reduce using rule 39 (expression -> variable .)
    NOTEQ           reduce using rule 39 (expression -> variable .)
    ASSIGNMENT      shift and go to state 47


state 77

    (14) assignment -> variable ASSIGNMENT expression .
    (66) part_expression -> expression . DOT
    (67) part_expression -> expression .

    NEWLINE         reduce using rule 14 (assignment -> variable ASSIGNMENT expression .)
    DOT             shift and go to state 81
    PLUS            reduce using rule 67 (part_expression -> expression .)
    MINUS           reduce using rule 67 (part_expression -> expression .)
    STAR            reduce using rule 67 (part_expression -> expression .)
    SLASH           reduce using rule 67 (part_expression -> expression .)
    CARET           reduce using rule 67 (part_expression -> expression .)
    GREATER         reduce using rule 67 (part_expression -> expression .)
    LESS            reduce using rule 67 (part_expression -> expression .)
    EQ              reduce using rule 67 (part_expression -> expression .)
    NOTEQ           reduce using rule 67 (part_expression -> expression .)


state 78

    (15) assignment -> variable ASSIGNMENT assignment .

    NEWLINE         reduce using rule 15 (assignment -> variable ASSIGNMENT assignment .)


state 79

    (84) assignment -> variable ASSIGNMENT error .

    NEWLINE         reduce using rule 84 (assignment -> variable ASSIGNMENT error .)


state 80

    (16) cycle -> L_FBRACKET expression R_FBRACKET . BLOCK inner_statements UNBLOCK

    BLOCK           shift and go to state 119


state 81

    (66) part_expression -> expression DOT .

    PLUS            reduce using rule 66 (part_expression -> expression DOT .)
    MINUS           reduce using rule 66 (part_expression -> expression DOT .)
    STAR            reduce using rule 66 (part_expression -> expression DOT .)
    SLASH           reduce using rule 66 (part_expression -> expression DOT .)
    CARET           reduce using rule 66 (part_expression -> expression DOT .)
    GREATER         reduce using rule 66 (part_expression -> expression DOT .)
    LESS            reduce using rule 66 (part_expression -> expression DOT .)
    EQ              reduce using rule 66 (part_expression -> expression DOT .)
    NOTEQ           reduce using rule 66 (part_expression -> expression DOT .)
    DOT             reduce using rule 66 (part_expression -> expression DOT .)
    R_FBRACKET      reduce using rule 66 (part_expression -> expression DOT .)
    COMMA           reduce using rule 66 (part_expression -> expression DOT .)
    R_RBRACKET      reduce using rule 66 (part_expression -> expression DOT .)
    NEWLINE         reduce using rule 66 (part_expression -> expression DOT .)


state 82

    (55) complex_expression -> part_expression PLUS . part_expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression

    DOT             shift and go to state 59
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58

    part_expression                shift and go to state 120
    expression                     shift and go to state 121
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51

state 83

    (56) complex_expression -> part_expression MINUS . part_expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression

    DOT             shift and go to state 59
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58

    part_expression                shift and go to state 122
    expression                     shift and go to state 121
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51

state 84

    (57) complex_expression -> part_expression STAR . part_expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression

    DOT             shift and go to state 59
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58

    part_expression                shift and go to state 123
    expression                     shift and go to state 121
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51

state 85

    (58) complex_expression -> part_expression SLASH . part_expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression

    DOT             shift and go to state 59
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58

    part_expression                shift and go to state 124
    expression                     shift and go to state 121
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51

state 86

    (59) complex_expression -> part_expression CARET . part_expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression

    DOT             shift and go to state 59
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58

    part_expression                shift and go to state 125
    expression                     shift and go to state 121
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51

state 87

    (60) complex_expression -> part_expression GREATER . part_expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression

    DOT             shift and go to state 59
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58

    part_expression                shift and go to state 126
    expression                     shift and go to state 121
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51

state 88

    (61) complex_expression -> part_expression LESS . part_expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression

    DOT             shift and go to state 59
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58

    part_expression                shift and go to state 127
    expression                     shift and go to state 121
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51

state 89

    (62) complex_expression -> part_expression EQ . part_expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression

    DOT             shift and go to state 59
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58

    part_expression                shift and go to state 128
    expression                     shift and go to state 121
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51

state 90

    (63) complex_expression -> part_expression NOTEQ . part_expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression

    DOT             shift and go to state 59
    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58

    part_expression                shift and go to state 129
    expression                     shift and go to state 121
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51

state 91

    (64) complex_expression -> MINUS expression .
    (66) part_expression -> expression . DOT
    (67) part_expression -> expression .

  ! reduce/reduce conflict for PLUS resolved using rule 64 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 64 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for STAR resolved using rule 64 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for SLASH resolved using rule 64 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for CARET resolved using rule 64 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for GREATER resolved using rule 64 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for LESS resolved using rule 64 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for EQ resolved using rule 64 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 64 (complex_expression -> MINUS expression .)
    R_FBRACKET      reduce using rule 64 (complex_expression -> MINUS expression .)
    DOT             reduce using rule 64 (complex_expression -> MINUS expression .)
    PLUS            reduce using rule 64 (complex_expression -> MINUS expression .)
    MINUS           reduce using rule 64 (complex_expression -> MINUS expression .)
    STAR            reduce using rule 64 (complex_expression -> MINUS expression .)
    SLASH           reduce using rule 64 (complex_expression -> MINUS expression .)
    CARET           reduce using rule 64 (complex_expression -> MINUS expression .)
    GREATER         reduce using rule 64 (complex_expression -> MINUS expression .)
    LESS            reduce using rule 64 (complex_expression -> MINUS expression .)
    EQ              reduce using rule 64 (complex_expression -> MINUS expression .)
    NOTEQ           reduce using rule 64 (complex_expression -> MINUS expression .)
    COMMA           reduce using rule 64 (complex_expression -> MINUS expression .)
    R_RBRACKET      reduce using rule 64 (complex_expression -> MINUS expression .)
    NEWLINE         reduce using rule 64 (complex_expression -> MINUS expression .)

  ! DOT             [ shift and go to state 81 ]
  ! PLUS            [ reduce using rule 67 (part_expression -> expression .) ]
  ! MINUS           [ reduce using rule 67 (part_expression -> expression .) ]
  ! STAR            [ reduce using rule 67 (part_expression -> expression .) ]
  ! SLASH           [ reduce using rule 67 (part_expression -> expression .) ]
  ! CARET           [ reduce using rule 67 (part_expression -> expression .) ]
  ! GREATER         [ reduce using rule 67 (part_expression -> expression .) ]
  ! LESS            [ reduce using rule 67 (part_expression -> expression .) ]
  ! EQ              [ reduce using rule 67 (part_expression -> expression .) ]
  ! NOTEQ           [ reduce using rule 67 (part_expression -> expression .) ]


state 92

    (65) part_expression -> DOT expression .
    (66) part_expression -> expression . DOT
    (67) part_expression -> expression .

  ! shift/reduce conflict for DOT resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 65 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 65 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for STAR resolved using rule 65 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for SLASH resolved using rule 65 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for CARET resolved using rule 65 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for GREATER resolved using rule 65 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for LESS resolved using rule 65 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for EQ resolved using rule 65 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 65 (part_expression -> DOT expression .)
    PLUS            reduce using rule 65 (part_expression -> DOT expression .)
    MINUS           reduce using rule 65 (part_expression -> DOT expression .)
    STAR            reduce using rule 65 (part_expression -> DOT expression .)
    SLASH           reduce using rule 65 (part_expression -> DOT expression .)
    CARET           reduce using rule 65 (part_expression -> DOT expression .)
    GREATER         reduce using rule 65 (part_expression -> DOT expression .)
    LESS            reduce using rule 65 (part_expression -> DOT expression .)
    EQ              reduce using rule 65 (part_expression -> DOT expression .)
    NOTEQ           reduce using rule 65 (part_expression -> DOT expression .)
    R_FBRACKET      reduce using rule 65 (part_expression -> DOT expression .)
    COMMA           reduce using rule 65 (part_expression -> DOT expression .)
    R_RBRACKET      reduce using rule 65 (part_expression -> DOT expression .)
    NEWLINE         reduce using rule 65 (part_expression -> DOT expression .)
    DOT             shift and go to state 81

  ! DOT             [ reduce using rule 65 (part_expression -> DOT expression .) ]
  ! PLUS            [ reduce using rule 67 (part_expression -> expression .) ]
  ! MINUS           [ reduce using rule 67 (part_expression -> expression .) ]
  ! STAR            [ reduce using rule 67 (part_expression -> expression .) ]
  ! SLASH           [ reduce using rule 67 (part_expression -> expression .) ]
  ! CARET           [ reduce using rule 67 (part_expression -> expression .) ]
  ! GREATER         [ reduce using rule 67 (part_expression -> expression .) ]
  ! LESS            [ reduce using rule 67 (part_expression -> expression .) ]
  ! EQ              [ reduce using rule 67 (part_expression -> expression .) ]
  ! NOTEQ           [ reduce using rule 67 (part_expression -> expression .) ]


state 93

    (17) command -> MOVEUP L_RBRACKET variable . R_RBRACKET

    R_RBRACKET      shift and go to state 130


state 94

    (85) command -> MOVEUP L_RBRACKET error . R_RBRACKET

    R_RBRACKET      shift and go to state 131


state 95

    (18) command -> MOVEDOWN L_RBRACKET variable . R_RBRACKET

    R_RBRACKET      shift and go to state 132


state 96

    (86) command -> MOVEDOWN L_RBRACKET error . R_RBRACKET

    R_RBRACKET      shift and go to state 133


state 97

    (19) command -> MOVERIGHT L_RBRACKET variable . R_RBRACKET

    R_RBRACKET      shift and go to state 134


state 98

    (87) command -> MOVERIGHT L_RBRACKET error . R_RBRACKET

    R_RBRACKET      shift and go to state 135


state 99

    (20) command -> MOVELEFT L_RBRACKET variable . R_RBRACKET

    R_RBRACKET      shift and go to state 136


state 100

    (88) command -> MOVELEFT L_RBRACKET error . R_RBRACKET

    R_RBRACKET      shift and go to state 137


state 101

    (21) command -> PINGUP L_RBRACKET variable . R_RBRACKET

    R_RBRACKET      shift and go to state 138


state 102

    (89) command -> PINGUP L_RBRACKET error . R_RBRACKET

    R_RBRACKET      shift and go to state 139


state 103

    (22) command -> PINGDOWN L_RBRACKET variable . R_RBRACKET

    R_RBRACKET      shift and go to state 140


state 104

    (90) command -> PINGDOWN L_RBRACKET error . R_RBRACKET

    R_RBRACKET      shift and go to state 141


state 105

    (23) command -> PINGRIGHT L_RBRACKET variable . R_RBRACKET

    R_RBRACKET      shift and go to state 142


state 106

    (91) command -> PINGRIGHT L_RBRACKET error . R_RBRACKET

    R_RBRACKET      shift and go to state 143


state 107

    (24) command -> PINGLEFT L_RBRACKET variable . R_RBRACKET

    R_RBRACKET      shift and go to state 144


state 108

    (92) command -> PINGLEFT L_RBRACKET error . R_RBRACKET

    R_RBRACKET      shift and go to state 145


state 109

    (25) command -> VISION L_RBRACKET variable . R_RBRACKET

    R_RBRACKET      shift and go to state 146


state 110

    (93) command -> VISION L_RBRACKET error . R_RBRACKET

    R_RBRACKET      shift and go to state 147


state 111

    (26) command -> VOICE L_RBRACKET expression . R_RBRACKET
    (66) part_expression -> expression . DOT
    (67) part_expression -> expression .

    R_RBRACKET      shift and go to state 148
    DOT             shift and go to state 81
    PLUS            reduce using rule 67 (part_expression -> expression .)
    MINUS           reduce using rule 67 (part_expression -> expression .)
    STAR            reduce using rule 67 (part_expression -> expression .)
    SLASH           reduce using rule 67 (part_expression -> expression .)
    CARET           reduce using rule 67 (part_expression -> expression .)
    GREATER         reduce using rule 67 (part_expression -> expression .)
    LESS            reduce using rule 67 (part_expression -> expression .)
    EQ              reduce using rule 67 (part_expression -> expression .)
    NOTEQ           reduce using rule 67 (part_expression -> expression .)


state 112

    (94) command -> VOICE L_RBRACKET error . R_RBRACKET

    R_RBRACKET      shift and go to state 149


state 113

    (27) procedure -> PROC VARIABLE L_QBRACKET . parameters R_QBRACKET statements_group
    (68) parameters -> . parameter COMMA parameters
    (69) parameters -> . parameter
    (70) parameter -> . type VARIABLE AMPERSAND
    (71) parameter -> . type VARIABLE
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE

    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31
    VARIABLE        shift and go to state 150

    parameters                     shift and go to state 151
    parameter                      shift and go to state 152
    type                           shift and go to state 153

state 114

    (28) record -> RECORD VARIABLE DATA . L_QBRACKET parameters R_QBRACKET
    (29) record -> RECORD VARIABLE DATA . L_QBRACKET parameters R_QBRACKET conversions

    L_QBRACKET      shift and go to state 154


state 115

    (13) call -> VARIABLE L_RBRACKET variables R_RBRACKET .

    NEWLINE         reduce using rule 13 (call -> VARIABLE L_RBRACKET variables R_RBRACKET .)


state 116

    (43) variables -> expression COMMA . variables
    (42) variables -> . expression
    (43) variables -> . expression COMMA variables
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE
    (50) const -> . TRUE
    (51) const -> . FALSE
    (52) const -> . UNDEF
    (53) const -> . DECIMAL
    (54) const -> . TEXT
    (55) complex_expression -> . part_expression PLUS part_expression
    (56) complex_expression -> . part_expression MINUS part_expression
    (57) complex_expression -> . part_expression STAR part_expression
    (58) complex_expression -> . part_expression SLASH part_expression
    (59) complex_expression -> . part_expression CARET part_expression
    (60) complex_expression -> . part_expression GREATER part_expression
    (61) complex_expression -> . part_expression LESS part_expression
    (62) complex_expression -> . part_expression EQ part_expression
    (63) complex_expression -> . part_expression NOTEQ part_expression
    (64) complex_expression -> . MINUS expression
    (65) part_expression -> . DOT expression
    (66) part_expression -> . expression DOT
    (67) part_expression -> . expression

    VARIABLE        shift and go to state 46
    TRUE            shift and go to state 52
    FALSE           shift and go to state 53
    UNDEF           shift and go to state 54
    DECIMAL         shift and go to state 55
    TEXT            shift and go to state 56
    MINUS           shift and go to state 58
    DOT             shift and go to state 59

    expression                     shift and go to state 73
    variables                      shift and go to state 155
    variable                       shift and go to state 49
    const                          shift and go to state 50
    complex_expression             shift and go to state 51
    part_expression                shift and go to state 57

state 117

    (46) indexing -> L_QBRACKET DECIMAL R_QBRACKET . indexing
    (47) indexing -> L_QBRACKET DECIMAL R_QBRACKET .
    (46) indexing -> . L_QBRACKET DECIMAL R_QBRACKET indexing
    (47) indexing -> . L_QBRACKET DECIMAL R_QBRACKET
    (48) indexing -> . L_QBRACKET VARIABLE R_QBRACKET indexing
    (49) indexing -> . L_QBRACKET VARIABLE R_QBRACKET

    ASSIGNMENT      reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    NEWLINE         reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    R_FBRACKET      reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    DOT             reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    PLUS            reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    MINUS           reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    STAR            reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    SLASH           reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    CARET           reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    GREATER         reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    LESS            reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    EQ              reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    NOTEQ           reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    COMMA           reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    R_RBRACKET      reduce using rule 47 (indexing -> L_QBRACKET DECIMAL R_QBRACKET .)
    L_QBRACKET      shift and go to state 43

    indexing                       shift and go to state 156

state 118

    (48) indexing -> L_QBRACKET VARIABLE R_QBRACKET . indexing
    (49) indexing -> L_QBRACKET VARIABLE R_QBRACKET .
    (46) indexing -> . L_QBRACKET DECIMAL R_QBRACKET indexing
    (47) indexing -> . L_QBRACKET DECIMAL R_QBRACKET
    (48) indexing -> . L_QBRACKET VARIABLE R_QBRACKET indexing
    (49) indexing -> . L_QBRACKET VARIABLE R_QBRACKET

    ASSIGNMENT      reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    NEWLINE         reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    R_FBRACKET      reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    DOT             reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    PLUS            reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    MINUS           reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    STAR            reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    SLASH           reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    CARET           reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    GREATER         reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    LESS            reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    EQ              reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    NOTEQ           reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    COMMA           reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    R_RBRACKET      reduce using rule 49 (indexing -> L_QBRACKET VARIABLE R_QBRACKET .)
    L_QBRACKET      shift and go to state 43

    indexing                       shift and go to state 157

state 119

    (16) cycle -> L_FBRACKET expression R_FBRACKET BLOCK . inner_statements UNBLOCK
    (74) inner_statements -> . inner_statement inner_statements
    (75) inner_statements -> . inner_statement
    (76) inner_statement -> . declaration NEWLINE
    (77) inner_statement -> . assignment NEWLINE
    (78) inner_statement -> . cycle NEWLINE
    (79) inner_statement -> . command NEWLINE
    (80) inner_statement -> . call NEWLINE
    (81) inner_statement -> . empty NEWLINE
    (12) declaration -> . type variable
    (83) declaration -> . type error
    (14) assignment -> . variable ASSIGNMENT expression
    (15) assignment -> . variable ASSIGNMENT assignment
    (84) assignment -> . variable ASSIGNMENT error
    (16) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (17) command -> . MOVEUP L_RBRACKET variable R_RBRACKET
    (18) command -> . MOVEDOWN L_RBRACKET variable R_RBRACKET
    (19) command -> . MOVERIGHT L_RBRACKET variable R_RBRACKET
    (20) command -> . MOVELEFT L_RBRACKET variable R_RBRACKET
    (21) command -> . PINGUP L_RBRACKET variable R_RBRACKET
    (22) command -> . PINGDOWN L_RBRACKET variable R_RBRACKET
    (23) command -> . PINGRIGHT L_RBRACKET variable R_RBRACKET
    (24) command -> . PINGLEFT L_RBRACKET variable R_RBRACKET
    (25) command -> . VISION L_RBRACKET variable R_RBRACKET
    (26) command -> . VOICE L_RBRACKET expression R_RBRACKET
    (85) command -> . MOVEUP L_RBRACKET error R_RBRACKET
    (86) command -> . MOVEDOWN L_RBRACKET error R_RBRACKET
    (87) command -> . MOVERIGHT L_RBRACKET error R_RBRACKET
    (88) command -> . MOVELEFT L_RBRACKET error R_RBRACKET
    (89) command -> . PINGUP L_RBRACKET error R_RBRACKET
    (90) command -> . PINGDOWN L_RBRACKET error R_RBRACKET
    (91) command -> . PINGRIGHT L_RBRACKET error R_RBRACKET
    (92) command -> . PINGLEFT L_RBRACKET error R_RBRACKET
    (93) command -> . VISION L_RBRACKET error R_RBRACKET
    (94) command -> . VOICE L_RBRACKET error R_RBRACKET
    (13) call -> . VARIABLE L_RBRACKET variables R_RBRACKET
    (34) empty -> .
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    L_FBRACKET      shift and go to state 16
    MOVEUP          shift and go to state 17
    MOVEDOWN        shift and go to state 18
    MOVERIGHT       shift and go to state 19
    MOVELEFT        shift and go to state 20
    PINGUP          shift and go to state 21
    PINGDOWN        shift and go to state 22
    PINGRIGHT       shift and go to state 23
    PINGLEFT        shift and go to state 24
    VISION          shift and go to state 25
    VOICE           shift and go to state 26
    VARIABLE        shift and go to state 13
    NEWLINE         reduce using rule 34 (empty -> .)
    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31

    inner_statements               shift and go to state 158
    inner_statement                shift and go to state 159
    declaration                    shift and go to state 160
    assignment                     shift and go to state 161
    cycle                          shift and go to state 162
    command                        shift and go to state 163
    call                           shift and go to state 164
    empty                          shift and go to state 165
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 120

    (55) complex_expression -> part_expression PLUS part_expression .
    (55) complex_expression -> part_expression . PLUS part_expression
    (56) complex_expression -> part_expression . MINUS part_expression
    (57) complex_expression -> part_expression . STAR part_expression
    (58) complex_expression -> part_expression . SLASH part_expression
    (59) complex_expression -> part_expression . CARET part_expression
    (60) complex_expression -> part_expression . GREATER part_expression
    (61) complex_expression -> part_expression . LESS part_expression
    (62) complex_expression -> part_expression . EQ part_expression
    (63) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .)
    DOT             reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .)
    PLUS            reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .)
    MINUS           reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .)
    GREATER         reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .)
    LESS            reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .)
    EQ              reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .)
    NOTEQ           reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .)
    COMMA           reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .)
    R_RBRACKET      reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .)
    NEWLINE         reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .)
    STAR            shift and go to state 84
    SLASH           shift and go to state 85
    CARET           shift and go to state 86

  ! STAR            [ reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .) ]
  ! SLASH           [ reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .) ]
  ! CARET           [ reduce using rule 55 (complex_expression -> part_expression PLUS part_expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! GREATER         [ shift and go to state 87 ]
  ! LESS            [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 89 ]
  ! NOTEQ           [ shift and go to state 90 ]


state 121

    (66) part_expression -> expression . DOT
    (67) part_expression -> expression .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 81
    R_FBRACKET      reduce using rule 67 (part_expression -> expression .)
    PLUS            reduce using rule 67 (part_expression -> expression .)
    MINUS           reduce using rule 67 (part_expression -> expression .)
    STAR            reduce using rule 67 (part_expression -> expression .)
    SLASH           reduce using rule 67 (part_expression -> expression .)
    CARET           reduce using rule 67 (part_expression -> expression .)
    GREATER         reduce using rule 67 (part_expression -> expression .)
    LESS            reduce using rule 67 (part_expression -> expression .)
    EQ              reduce using rule 67 (part_expression -> expression .)
    NOTEQ           reduce using rule 67 (part_expression -> expression .)
    COMMA           reduce using rule 67 (part_expression -> expression .)
    R_RBRACKET      reduce using rule 67 (part_expression -> expression .)
    NEWLINE         reduce using rule 67 (part_expression -> expression .)

  ! DOT             [ reduce using rule 67 (part_expression -> expression .) ]


state 122

    (56) complex_expression -> part_expression MINUS part_expression .
    (55) complex_expression -> part_expression . PLUS part_expression
    (56) complex_expression -> part_expression . MINUS part_expression
    (57) complex_expression -> part_expression . STAR part_expression
    (58) complex_expression -> part_expression . SLASH part_expression
    (59) complex_expression -> part_expression . CARET part_expression
    (60) complex_expression -> part_expression . GREATER part_expression
    (61) complex_expression -> part_expression . LESS part_expression
    (62) complex_expression -> part_expression . EQ part_expression
    (63) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .)
    DOT             reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .)
    PLUS            reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .)
    MINUS           reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .)
    GREATER         reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .)
    LESS            reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .)
    EQ              reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .)
    NOTEQ           reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .)
    COMMA           reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .)
    R_RBRACKET      reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .)
    NEWLINE         reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .)
    STAR            shift and go to state 84
    SLASH           shift and go to state 85
    CARET           shift and go to state 86

  ! STAR            [ reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .) ]
  ! SLASH           [ reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .) ]
  ! CARET           [ reduce using rule 56 (complex_expression -> part_expression MINUS part_expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! GREATER         [ shift and go to state 87 ]
  ! LESS            [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 89 ]
  ! NOTEQ           [ shift and go to state 90 ]


state 123

    (57) complex_expression -> part_expression STAR part_expression .
    (55) complex_expression -> part_expression . PLUS part_expression
    (56) complex_expression -> part_expression . MINUS part_expression
    (57) complex_expression -> part_expression . STAR part_expression
    (58) complex_expression -> part_expression . SLASH part_expression
    (59) complex_expression -> part_expression . CARET part_expression
    (60) complex_expression -> part_expression . GREATER part_expression
    (61) complex_expression -> part_expression . LESS part_expression
    (62) complex_expression -> part_expression . EQ part_expression
    (63) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 57 (complex_expression -> part_expression STAR part_expression .)
    DOT             reduce using rule 57 (complex_expression -> part_expression STAR part_expression .)
    PLUS            reduce using rule 57 (complex_expression -> part_expression STAR part_expression .)
    MINUS           reduce using rule 57 (complex_expression -> part_expression STAR part_expression .)
    STAR            reduce using rule 57 (complex_expression -> part_expression STAR part_expression .)
    SLASH           reduce using rule 57 (complex_expression -> part_expression STAR part_expression .)
    GREATER         reduce using rule 57 (complex_expression -> part_expression STAR part_expression .)
    LESS            reduce using rule 57 (complex_expression -> part_expression STAR part_expression .)
    EQ              reduce using rule 57 (complex_expression -> part_expression STAR part_expression .)
    NOTEQ           reduce using rule 57 (complex_expression -> part_expression STAR part_expression .)
    COMMA           reduce using rule 57 (complex_expression -> part_expression STAR part_expression .)
    R_RBRACKET      reduce using rule 57 (complex_expression -> part_expression STAR part_expression .)
    NEWLINE         reduce using rule 57 (complex_expression -> part_expression STAR part_expression .)
    CARET           shift and go to state 86

  ! CARET           [ reduce using rule 57 (complex_expression -> part_expression STAR part_expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! STAR            [ shift and go to state 84 ]
  ! SLASH           [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 87 ]
  ! LESS            [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 89 ]
  ! NOTEQ           [ shift and go to state 90 ]


state 124

    (58) complex_expression -> part_expression SLASH part_expression .
    (55) complex_expression -> part_expression . PLUS part_expression
    (56) complex_expression -> part_expression . MINUS part_expression
    (57) complex_expression -> part_expression . STAR part_expression
    (58) complex_expression -> part_expression . SLASH part_expression
    (59) complex_expression -> part_expression . CARET part_expression
    (60) complex_expression -> part_expression . GREATER part_expression
    (61) complex_expression -> part_expression . LESS part_expression
    (62) complex_expression -> part_expression . EQ part_expression
    (63) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .)
    DOT             reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .)
    PLUS            reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .)
    MINUS           reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .)
    STAR            reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .)
    SLASH           reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .)
    GREATER         reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .)
    LESS            reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .)
    EQ              reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .)
    NOTEQ           reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .)
    COMMA           reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .)
    R_RBRACKET      reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .)
    NEWLINE         reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .)
    CARET           shift and go to state 86

  ! CARET           [ reduce using rule 58 (complex_expression -> part_expression SLASH part_expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! STAR            [ shift and go to state 84 ]
  ! SLASH           [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 87 ]
  ! LESS            [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 89 ]
  ! NOTEQ           [ shift and go to state 90 ]


state 125

    (59) complex_expression -> part_expression CARET part_expression .
    (55) complex_expression -> part_expression . PLUS part_expression
    (56) complex_expression -> part_expression . MINUS part_expression
    (57) complex_expression -> part_expression . STAR part_expression
    (58) complex_expression -> part_expression . SLASH part_expression
    (59) complex_expression -> part_expression . CARET part_expression
    (60) complex_expression -> part_expression . GREATER part_expression
    (61) complex_expression -> part_expression . LESS part_expression
    (62) complex_expression -> part_expression . EQ part_expression
    (63) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 59 (complex_expression -> part_expression CARET part_expression .)
    DOT             reduce using rule 59 (complex_expression -> part_expression CARET part_expression .)
    PLUS            reduce using rule 59 (complex_expression -> part_expression CARET part_expression .)
    MINUS           reduce using rule 59 (complex_expression -> part_expression CARET part_expression .)
    STAR            reduce using rule 59 (complex_expression -> part_expression CARET part_expression .)
    SLASH           reduce using rule 59 (complex_expression -> part_expression CARET part_expression .)
    GREATER         reduce using rule 59 (complex_expression -> part_expression CARET part_expression .)
    LESS            reduce using rule 59 (complex_expression -> part_expression CARET part_expression .)
    EQ              reduce using rule 59 (complex_expression -> part_expression CARET part_expression .)
    NOTEQ           reduce using rule 59 (complex_expression -> part_expression CARET part_expression .)
    COMMA           reduce using rule 59 (complex_expression -> part_expression CARET part_expression .)
    R_RBRACKET      reduce using rule 59 (complex_expression -> part_expression CARET part_expression .)
    NEWLINE         reduce using rule 59 (complex_expression -> part_expression CARET part_expression .)
    CARET           shift and go to state 86

  ! CARET           [ reduce using rule 59 (complex_expression -> part_expression CARET part_expression .) ]
  ! PLUS            [ shift and go to state 82 ]
  ! MINUS           [ shift and go to state 83 ]
  ! STAR            [ shift and go to state 84 ]
  ! SLASH           [ shift and go to state 85 ]
  ! GREATER         [ shift and go to state 87 ]
  ! LESS            [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 89 ]
  ! NOTEQ           [ shift and go to state 90 ]


state 126

    (60) complex_expression -> part_expression GREATER part_expression .
    (55) complex_expression -> part_expression . PLUS part_expression
    (56) complex_expression -> part_expression . MINUS part_expression
    (57) complex_expression -> part_expression . STAR part_expression
    (58) complex_expression -> part_expression . SLASH part_expression
    (59) complex_expression -> part_expression . CARET part_expression
    (60) complex_expression -> part_expression . GREATER part_expression
    (61) complex_expression -> part_expression . LESS part_expression
    (62) complex_expression -> part_expression . EQ part_expression
    (63) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .)
    DOT             reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .)
    GREATER         reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .)
    LESS            reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .)
    EQ              reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .)
    NOTEQ           reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .)
    COMMA           reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .)
    R_RBRACKET      reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .)
    NEWLINE         reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    STAR            shift and go to state 84
    SLASH           shift and go to state 85
    CARET           shift and go to state 86

  ! PLUS            [ reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .) ]
  ! MINUS           [ reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .) ]
  ! STAR            [ reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .) ]
  ! SLASH           [ reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .) ]
  ! CARET           [ reduce using rule 60 (complex_expression -> part_expression GREATER part_expression .) ]
  ! GREATER         [ shift and go to state 87 ]
  ! LESS            [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 89 ]
  ! NOTEQ           [ shift and go to state 90 ]


state 127

    (61) complex_expression -> part_expression LESS part_expression .
    (55) complex_expression -> part_expression . PLUS part_expression
    (56) complex_expression -> part_expression . MINUS part_expression
    (57) complex_expression -> part_expression . STAR part_expression
    (58) complex_expression -> part_expression . SLASH part_expression
    (59) complex_expression -> part_expression . CARET part_expression
    (60) complex_expression -> part_expression . GREATER part_expression
    (61) complex_expression -> part_expression . LESS part_expression
    (62) complex_expression -> part_expression . EQ part_expression
    (63) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 61 (complex_expression -> part_expression LESS part_expression .)
    DOT             reduce using rule 61 (complex_expression -> part_expression LESS part_expression .)
    GREATER         reduce using rule 61 (complex_expression -> part_expression LESS part_expression .)
    LESS            reduce using rule 61 (complex_expression -> part_expression LESS part_expression .)
    EQ              reduce using rule 61 (complex_expression -> part_expression LESS part_expression .)
    NOTEQ           reduce using rule 61 (complex_expression -> part_expression LESS part_expression .)
    COMMA           reduce using rule 61 (complex_expression -> part_expression LESS part_expression .)
    R_RBRACKET      reduce using rule 61 (complex_expression -> part_expression LESS part_expression .)
    NEWLINE         reduce using rule 61 (complex_expression -> part_expression LESS part_expression .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    STAR            shift and go to state 84
    SLASH           shift and go to state 85
    CARET           shift and go to state 86

  ! PLUS            [ reduce using rule 61 (complex_expression -> part_expression LESS part_expression .) ]
  ! MINUS           [ reduce using rule 61 (complex_expression -> part_expression LESS part_expression .) ]
  ! STAR            [ reduce using rule 61 (complex_expression -> part_expression LESS part_expression .) ]
  ! SLASH           [ reduce using rule 61 (complex_expression -> part_expression LESS part_expression .) ]
  ! CARET           [ reduce using rule 61 (complex_expression -> part_expression LESS part_expression .) ]
  ! GREATER         [ shift and go to state 87 ]
  ! LESS            [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 89 ]
  ! NOTEQ           [ shift and go to state 90 ]


state 128

    (62) complex_expression -> part_expression EQ part_expression .
    (55) complex_expression -> part_expression . PLUS part_expression
    (56) complex_expression -> part_expression . MINUS part_expression
    (57) complex_expression -> part_expression . STAR part_expression
    (58) complex_expression -> part_expression . SLASH part_expression
    (59) complex_expression -> part_expression . CARET part_expression
    (60) complex_expression -> part_expression . GREATER part_expression
    (61) complex_expression -> part_expression . LESS part_expression
    (62) complex_expression -> part_expression . EQ part_expression
    (63) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 62 (complex_expression -> part_expression EQ part_expression .)
    DOT             reduce using rule 62 (complex_expression -> part_expression EQ part_expression .)
    GREATER         reduce using rule 62 (complex_expression -> part_expression EQ part_expression .)
    LESS            reduce using rule 62 (complex_expression -> part_expression EQ part_expression .)
    EQ              reduce using rule 62 (complex_expression -> part_expression EQ part_expression .)
    NOTEQ           reduce using rule 62 (complex_expression -> part_expression EQ part_expression .)
    COMMA           reduce using rule 62 (complex_expression -> part_expression EQ part_expression .)
    R_RBRACKET      reduce using rule 62 (complex_expression -> part_expression EQ part_expression .)
    NEWLINE         reduce using rule 62 (complex_expression -> part_expression EQ part_expression .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    STAR            shift and go to state 84
    SLASH           shift and go to state 85
    CARET           shift and go to state 86

  ! PLUS            [ reduce using rule 62 (complex_expression -> part_expression EQ part_expression .) ]
  ! MINUS           [ reduce using rule 62 (complex_expression -> part_expression EQ part_expression .) ]
  ! STAR            [ reduce using rule 62 (complex_expression -> part_expression EQ part_expression .) ]
  ! SLASH           [ reduce using rule 62 (complex_expression -> part_expression EQ part_expression .) ]
  ! CARET           [ reduce using rule 62 (complex_expression -> part_expression EQ part_expression .) ]
  ! GREATER         [ shift and go to state 87 ]
  ! LESS            [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 89 ]
  ! NOTEQ           [ shift and go to state 90 ]


state 129

    (63) complex_expression -> part_expression NOTEQ part_expression .
    (55) complex_expression -> part_expression . PLUS part_expression
    (56) complex_expression -> part_expression . MINUS part_expression
    (57) complex_expression -> part_expression . STAR part_expression
    (58) complex_expression -> part_expression . SLASH part_expression
    (59) complex_expression -> part_expression . CARET part_expression
    (60) complex_expression -> part_expression . GREATER part_expression
    (61) complex_expression -> part_expression . LESS part_expression
    (62) complex_expression -> part_expression . EQ part_expression
    (63) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .)
    DOT             reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .)
    GREATER         reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .)
    LESS            reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .)
    EQ              reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .)
    NOTEQ           reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .)
    COMMA           reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .)
    R_RBRACKET      reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .)
    NEWLINE         reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .)
    PLUS            shift and go to state 82
    MINUS           shift and go to state 83
    STAR            shift and go to state 84
    SLASH           shift and go to state 85
    CARET           shift and go to state 86

  ! PLUS            [ reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .) ]
  ! MINUS           [ reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .) ]
  ! STAR            [ reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .) ]
  ! SLASH           [ reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .) ]
  ! CARET           [ reduce using rule 63 (complex_expression -> part_expression NOTEQ part_expression .) ]
  ! GREATER         [ shift and go to state 87 ]
  ! LESS            [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 89 ]
  ! NOTEQ           [ shift and go to state 90 ]


state 130

    (17) command -> MOVEUP L_RBRACKET variable R_RBRACKET .

    NEWLINE         reduce using rule 17 (command -> MOVEUP L_RBRACKET variable R_RBRACKET .)


state 131

    (85) command -> MOVEUP L_RBRACKET error R_RBRACKET .

    NEWLINE         reduce using rule 85 (command -> MOVEUP L_RBRACKET error R_RBRACKET .)


state 132

    (18) command -> MOVEDOWN L_RBRACKET variable R_RBRACKET .

    NEWLINE         reduce using rule 18 (command -> MOVEDOWN L_RBRACKET variable R_RBRACKET .)


state 133

    (86) command -> MOVEDOWN L_RBRACKET error R_RBRACKET .

    NEWLINE         reduce using rule 86 (command -> MOVEDOWN L_RBRACKET error R_RBRACKET .)


state 134

    (19) command -> MOVERIGHT L_RBRACKET variable R_RBRACKET .

    NEWLINE         reduce using rule 19 (command -> MOVERIGHT L_RBRACKET variable R_RBRACKET .)


state 135

    (87) command -> MOVERIGHT L_RBRACKET error R_RBRACKET .

    NEWLINE         reduce using rule 87 (command -> MOVERIGHT L_RBRACKET error R_RBRACKET .)


state 136

    (20) command -> MOVELEFT L_RBRACKET variable R_RBRACKET .

    NEWLINE         reduce using rule 20 (command -> MOVELEFT L_RBRACKET variable R_RBRACKET .)


state 137

    (88) command -> MOVELEFT L_RBRACKET error R_RBRACKET .

    NEWLINE         reduce using rule 88 (command -> MOVELEFT L_RBRACKET error R_RBRACKET .)


state 138

    (21) command -> PINGUP L_RBRACKET variable R_RBRACKET .

    NEWLINE         reduce using rule 21 (command -> PINGUP L_RBRACKET variable R_RBRACKET .)


state 139

    (89) command -> PINGUP L_RBRACKET error R_RBRACKET .

    NEWLINE         reduce using rule 89 (command -> PINGUP L_RBRACKET error R_RBRACKET .)


state 140

    (22) command -> PINGDOWN L_RBRACKET variable R_RBRACKET .

    NEWLINE         reduce using rule 22 (command -> PINGDOWN L_RBRACKET variable R_RBRACKET .)


state 141

    (90) command -> PINGDOWN L_RBRACKET error R_RBRACKET .

    NEWLINE         reduce using rule 90 (command -> PINGDOWN L_RBRACKET error R_RBRACKET .)


state 142

    (23) command -> PINGRIGHT L_RBRACKET variable R_RBRACKET .

    NEWLINE         reduce using rule 23 (command -> PINGRIGHT L_RBRACKET variable R_RBRACKET .)


state 143

    (91) command -> PINGRIGHT L_RBRACKET error R_RBRACKET .

    NEWLINE         reduce using rule 91 (command -> PINGRIGHT L_RBRACKET error R_RBRACKET .)


state 144

    (24) command -> PINGLEFT L_RBRACKET variable R_RBRACKET .

    NEWLINE         reduce using rule 24 (command -> PINGLEFT L_RBRACKET variable R_RBRACKET .)


state 145

    (92) command -> PINGLEFT L_RBRACKET error R_RBRACKET .

    NEWLINE         reduce using rule 92 (command -> PINGLEFT L_RBRACKET error R_RBRACKET .)


state 146

    (25) command -> VISION L_RBRACKET variable R_RBRACKET .

    NEWLINE         reduce using rule 25 (command -> VISION L_RBRACKET variable R_RBRACKET .)


state 147

    (93) command -> VISION L_RBRACKET error R_RBRACKET .

    NEWLINE         reduce using rule 93 (command -> VISION L_RBRACKET error R_RBRACKET .)


state 148

    (26) command -> VOICE L_RBRACKET expression R_RBRACKET .

    NEWLINE         reduce using rule 26 (command -> VOICE L_RBRACKET expression R_RBRACKET .)


state 149

    (94) command -> VOICE L_RBRACKET error R_RBRACKET .

    NEWLINE         reduce using rule 94 (command -> VOICE L_RBRACKET error R_RBRACKET .)


state 150

    (38) type -> VARIABLE .

    VARIABLE        reduce using rule 38 (type -> VARIABLE .)


state 151

    (27) procedure -> PROC VARIABLE L_QBRACKET parameters . R_QBRACKET statements_group

    R_QBRACKET      shift and go to state 166


state 152

    (68) parameters -> parameter . COMMA parameters
    (69) parameters -> parameter .

    COMMA           shift and go to state 167
    R_QBRACKET      reduce using rule 69 (parameters -> parameter .)


state 153

    (70) parameter -> type . VARIABLE AMPERSAND
    (71) parameter -> type . VARIABLE

    VARIABLE        shift and go to state 168


state 154

    (28) record -> RECORD VARIABLE DATA L_QBRACKET . parameters R_QBRACKET
    (29) record -> RECORD VARIABLE DATA L_QBRACKET . parameters R_QBRACKET conversions
    (68) parameters -> . parameter COMMA parameters
    (69) parameters -> . parameter
    (70) parameter -> . type VARIABLE AMPERSAND
    (71) parameter -> . type VARIABLE
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE

    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31
    VARIABLE        shift and go to state 150

    parameters                     shift and go to state 169
    parameter                      shift and go to state 152
    type                           shift and go to state 153

state 155

    (43) variables -> expression COMMA variables .

    R_RBRACKET      reduce using rule 43 (variables -> expression COMMA variables .)


state 156

    (46) indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .

    ASSIGNMENT      reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    NEWLINE         reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    R_FBRACKET      reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    DOT             reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    PLUS            reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    MINUS           reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    STAR            reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    SLASH           reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    CARET           reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    GREATER         reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    LESS            reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    EQ              reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    NOTEQ           reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    COMMA           reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)
    R_RBRACKET      reduce using rule 46 (indexing -> L_QBRACKET DECIMAL R_QBRACKET indexing .)


state 157

    (48) indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .

    ASSIGNMENT      reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    NEWLINE         reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    R_FBRACKET      reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    DOT             reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    PLUS            reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    MINUS           reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    STAR            reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    SLASH           reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    CARET           reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    GREATER         reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    LESS            reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    EQ              reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    NOTEQ           reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    COMMA           reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)
    R_RBRACKET      reduce using rule 48 (indexing -> L_QBRACKET VARIABLE R_QBRACKET indexing .)


state 158

    (16) cycle -> L_FBRACKET expression R_FBRACKET BLOCK inner_statements . UNBLOCK

    UNBLOCK         shift and go to state 170


state 159

    (74) inner_statements -> inner_statement . inner_statements
    (75) inner_statements -> inner_statement .
    (74) inner_statements -> . inner_statement inner_statements
    (75) inner_statements -> . inner_statement
    (76) inner_statement -> . declaration NEWLINE
    (77) inner_statement -> . assignment NEWLINE
    (78) inner_statement -> . cycle NEWLINE
    (79) inner_statement -> . command NEWLINE
    (80) inner_statement -> . call NEWLINE
    (81) inner_statement -> . empty NEWLINE
    (12) declaration -> . type variable
    (83) declaration -> . type error
    (14) assignment -> . variable ASSIGNMENT expression
    (15) assignment -> . variable ASSIGNMENT assignment
    (84) assignment -> . variable ASSIGNMENT error
    (16) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (17) command -> . MOVEUP L_RBRACKET variable R_RBRACKET
    (18) command -> . MOVEDOWN L_RBRACKET variable R_RBRACKET
    (19) command -> . MOVERIGHT L_RBRACKET variable R_RBRACKET
    (20) command -> . MOVELEFT L_RBRACKET variable R_RBRACKET
    (21) command -> . PINGUP L_RBRACKET variable R_RBRACKET
    (22) command -> . PINGDOWN L_RBRACKET variable R_RBRACKET
    (23) command -> . PINGRIGHT L_RBRACKET variable R_RBRACKET
    (24) command -> . PINGLEFT L_RBRACKET variable R_RBRACKET
    (25) command -> . VISION L_RBRACKET variable R_RBRACKET
    (26) command -> . VOICE L_RBRACKET expression R_RBRACKET
    (85) command -> . MOVEUP L_RBRACKET error R_RBRACKET
    (86) command -> . MOVEDOWN L_RBRACKET error R_RBRACKET
    (87) command -> . MOVERIGHT L_RBRACKET error R_RBRACKET
    (88) command -> . MOVELEFT L_RBRACKET error R_RBRACKET
    (89) command -> . PINGUP L_RBRACKET error R_RBRACKET
    (90) command -> . PINGDOWN L_RBRACKET error R_RBRACKET
    (91) command -> . PINGRIGHT L_RBRACKET error R_RBRACKET
    (92) command -> . PINGLEFT L_RBRACKET error R_RBRACKET
    (93) command -> . VISION L_RBRACKET error R_RBRACKET
    (94) command -> . VOICE L_RBRACKET error R_RBRACKET
    (13) call -> . VARIABLE L_RBRACKET variables R_RBRACKET
    (34) empty -> .
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    UNBLOCK         reduce using rule 75 (inner_statements -> inner_statement .)
    L_FBRACKET      shift and go to state 16
    MOVEUP          shift and go to state 17
    MOVEDOWN        shift and go to state 18
    MOVERIGHT       shift and go to state 19
    MOVELEFT        shift and go to state 20
    PINGUP          shift and go to state 21
    PINGDOWN        shift and go to state 22
    PINGRIGHT       shift and go to state 23
    PINGLEFT        shift and go to state 24
    VISION          shift and go to state 25
    VOICE           shift and go to state 26
    VARIABLE        shift and go to state 13
    NEWLINE         reduce using rule 34 (empty -> .)
    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31

    inner_statement                shift and go to state 159
    inner_statements               shift and go to state 171
    declaration                    shift and go to state 160
    assignment                     shift and go to state 161
    cycle                          shift and go to state 162
    command                        shift and go to state 163
    call                           shift and go to state 164
    empty                          shift and go to state 165
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 160

    (76) inner_statement -> declaration . NEWLINE

    NEWLINE         shift and go to state 172


state 161

    (77) inner_statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 173


state 162

    (78) inner_statement -> cycle . NEWLINE

    NEWLINE         shift and go to state 174


state 163

    (79) inner_statement -> command . NEWLINE

    NEWLINE         shift and go to state 175


state 164

    (80) inner_statement -> call . NEWLINE

    NEWLINE         shift and go to state 176


state 165

    (81) inner_statement -> empty . NEWLINE

    NEWLINE         shift and go to state 177


state 166

    (27) procedure -> PROC VARIABLE L_QBRACKET parameters R_QBRACKET . statements_group
    (72) statements_group -> . BLOCK inner_statements UNBLOCK
    (73) statements_group -> . inner_statement
    (76) inner_statement -> . declaration NEWLINE
    (77) inner_statement -> . assignment NEWLINE
    (78) inner_statement -> . cycle NEWLINE
    (79) inner_statement -> . command NEWLINE
    (80) inner_statement -> . call NEWLINE
    (81) inner_statement -> . empty NEWLINE
    (12) declaration -> . type variable
    (83) declaration -> . type error
    (14) assignment -> . variable ASSIGNMENT expression
    (15) assignment -> . variable ASSIGNMENT assignment
    (84) assignment -> . variable ASSIGNMENT error
    (16) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (17) command -> . MOVEUP L_RBRACKET variable R_RBRACKET
    (18) command -> . MOVEDOWN L_RBRACKET variable R_RBRACKET
    (19) command -> . MOVERIGHT L_RBRACKET variable R_RBRACKET
    (20) command -> . MOVELEFT L_RBRACKET variable R_RBRACKET
    (21) command -> . PINGUP L_RBRACKET variable R_RBRACKET
    (22) command -> . PINGDOWN L_RBRACKET variable R_RBRACKET
    (23) command -> . PINGRIGHT L_RBRACKET variable R_RBRACKET
    (24) command -> . PINGLEFT L_RBRACKET variable R_RBRACKET
    (25) command -> . VISION L_RBRACKET variable R_RBRACKET
    (26) command -> . VOICE L_RBRACKET expression R_RBRACKET
    (85) command -> . MOVEUP L_RBRACKET error R_RBRACKET
    (86) command -> . MOVEDOWN L_RBRACKET error R_RBRACKET
    (87) command -> . MOVERIGHT L_RBRACKET error R_RBRACKET
    (88) command -> . MOVELEFT L_RBRACKET error R_RBRACKET
    (89) command -> . PINGUP L_RBRACKET error R_RBRACKET
    (90) command -> . PINGDOWN L_RBRACKET error R_RBRACKET
    (91) command -> . PINGRIGHT L_RBRACKET error R_RBRACKET
    (92) command -> . PINGLEFT L_RBRACKET error R_RBRACKET
    (93) command -> . VISION L_RBRACKET error R_RBRACKET
    (94) command -> . VOICE L_RBRACKET error R_RBRACKET
    (13) call -> . VARIABLE L_RBRACKET variables R_RBRACKET
    (34) empty -> .
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    BLOCK           shift and go to state 179
    L_FBRACKET      shift and go to state 16
    MOVEUP          shift and go to state 17
    MOVEDOWN        shift and go to state 18
    MOVERIGHT       shift and go to state 19
    MOVELEFT        shift and go to state 20
    PINGUP          shift and go to state 21
    PINGDOWN        shift and go to state 22
    PINGRIGHT       shift and go to state 23
    PINGLEFT        shift and go to state 24
    VISION          shift and go to state 25
    VOICE           shift and go to state 26
    VARIABLE        shift and go to state 13
    NEWLINE         reduce using rule 34 (empty -> .)
    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31

    statements_group               shift and go to state 178
    inner_statement                shift and go to state 180
    declaration                    shift and go to state 160
    assignment                     shift and go to state 161
    cycle                          shift and go to state 162
    command                        shift and go to state 163
    call                           shift and go to state 164
    empty                          shift and go to state 165
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 167

    (68) parameters -> parameter COMMA . parameters
    (68) parameters -> . parameter COMMA parameters
    (69) parameters -> . parameter
    (70) parameter -> . type VARIABLE AMPERSAND
    (71) parameter -> . type VARIABLE
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE

    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31
    VARIABLE        shift and go to state 150

    parameter                      shift and go to state 152
    parameters                     shift and go to state 181
    type                           shift and go to state 153

state 168

    (70) parameter -> type VARIABLE . AMPERSAND
    (71) parameter -> type VARIABLE .

    AMPERSAND       shift and go to state 182
    COMMA           reduce using rule 71 (parameter -> type VARIABLE .)
    R_QBRACKET      reduce using rule 71 (parameter -> type VARIABLE .)


state 169

    (28) record -> RECORD VARIABLE DATA L_QBRACKET parameters . R_QBRACKET
    (29) record -> RECORD VARIABLE DATA L_QBRACKET parameters . R_QBRACKET conversions

    R_QBRACKET      shift and go to state 183


state 170

    (16) cycle -> L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK .

    NEWLINE         reduce using rule 16 (cycle -> L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK .)


state 171

    (74) inner_statements -> inner_statement inner_statements .

    UNBLOCK         reduce using rule 74 (inner_statements -> inner_statement inner_statements .)


state 172

    (76) inner_statement -> declaration NEWLINE .

    L_FBRACKET      reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    MOVEUP          reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    MOVEDOWN        reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    MOVERIGHT       reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    MOVELEFT        reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    PINGUP          reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    PINGDOWN        reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    PINGRIGHT       reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    PINGLEFT        reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    VISION          reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    VOICE           reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    VARIABLE        reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    NUMERIC         reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    STRING          reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    LOGIC           reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    UNBLOCK         reduce using rule 76 (inner_statement -> declaration NEWLINE .)


state 173

    (77) inner_statement -> assignment NEWLINE .

    L_FBRACKET      reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    MOVEUP          reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    MOVEDOWN        reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    MOVERIGHT       reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    MOVELEFT        reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    PINGUP          reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    PINGDOWN        reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    PINGRIGHT       reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    PINGLEFT        reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    VISION          reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    VOICE           reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    VARIABLE        reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    NUMERIC         reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    STRING          reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    LOGIC           reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    UNBLOCK         reduce using rule 77 (inner_statement -> assignment NEWLINE .)


state 174

    (78) inner_statement -> cycle NEWLINE .

    L_FBRACKET      reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    MOVEUP          reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    MOVEDOWN        reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    MOVERIGHT       reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    MOVELEFT        reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    PINGUP          reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    PINGDOWN        reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    PINGRIGHT       reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    PINGLEFT        reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    VISION          reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    VOICE           reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    VARIABLE        reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    NUMERIC         reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    STRING          reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    LOGIC           reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    NEWLINE         reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    UNBLOCK         reduce using rule 78 (inner_statement -> cycle NEWLINE .)


state 175

    (79) inner_statement -> command NEWLINE .

    L_FBRACKET      reduce using rule 79 (inner_statement -> command NEWLINE .)
    MOVEUP          reduce using rule 79 (inner_statement -> command NEWLINE .)
    MOVEDOWN        reduce using rule 79 (inner_statement -> command NEWLINE .)
    MOVERIGHT       reduce using rule 79 (inner_statement -> command NEWLINE .)
    MOVELEFT        reduce using rule 79 (inner_statement -> command NEWLINE .)
    PINGUP          reduce using rule 79 (inner_statement -> command NEWLINE .)
    PINGDOWN        reduce using rule 79 (inner_statement -> command NEWLINE .)
    PINGRIGHT       reduce using rule 79 (inner_statement -> command NEWLINE .)
    PINGLEFT        reduce using rule 79 (inner_statement -> command NEWLINE .)
    VISION          reduce using rule 79 (inner_statement -> command NEWLINE .)
    VOICE           reduce using rule 79 (inner_statement -> command NEWLINE .)
    VARIABLE        reduce using rule 79 (inner_statement -> command NEWLINE .)
    NUMERIC         reduce using rule 79 (inner_statement -> command NEWLINE .)
    STRING          reduce using rule 79 (inner_statement -> command NEWLINE .)
    LOGIC           reduce using rule 79 (inner_statement -> command NEWLINE .)
    NEWLINE         reduce using rule 79 (inner_statement -> command NEWLINE .)
    UNBLOCK         reduce using rule 79 (inner_statement -> command NEWLINE .)


state 176

    (80) inner_statement -> call NEWLINE .

    L_FBRACKET      reduce using rule 80 (inner_statement -> call NEWLINE .)
    MOVEUP          reduce using rule 80 (inner_statement -> call NEWLINE .)
    MOVEDOWN        reduce using rule 80 (inner_statement -> call NEWLINE .)
    MOVERIGHT       reduce using rule 80 (inner_statement -> call NEWLINE .)
    MOVELEFT        reduce using rule 80 (inner_statement -> call NEWLINE .)
    PINGUP          reduce using rule 80 (inner_statement -> call NEWLINE .)
    PINGDOWN        reduce using rule 80 (inner_statement -> call NEWLINE .)
    PINGRIGHT       reduce using rule 80 (inner_statement -> call NEWLINE .)
    PINGLEFT        reduce using rule 80 (inner_statement -> call NEWLINE .)
    VISION          reduce using rule 80 (inner_statement -> call NEWLINE .)
    VOICE           reduce using rule 80 (inner_statement -> call NEWLINE .)
    VARIABLE        reduce using rule 80 (inner_statement -> call NEWLINE .)
    NUMERIC         reduce using rule 80 (inner_statement -> call NEWLINE .)
    STRING          reduce using rule 80 (inner_statement -> call NEWLINE .)
    LOGIC           reduce using rule 80 (inner_statement -> call NEWLINE .)
    NEWLINE         reduce using rule 80 (inner_statement -> call NEWLINE .)
    UNBLOCK         reduce using rule 80 (inner_statement -> call NEWLINE .)


state 177

    (81) inner_statement -> empty NEWLINE .

    L_FBRACKET      reduce using rule 81 (inner_statement -> empty NEWLINE .)
    MOVEUP          reduce using rule 81 (inner_statement -> empty NEWLINE .)
    MOVEDOWN        reduce using rule 81 (inner_statement -> empty NEWLINE .)
    MOVERIGHT       reduce using rule 81 (inner_statement -> empty NEWLINE .)
    MOVELEFT        reduce using rule 81 (inner_statement -> empty NEWLINE .)
    PINGUP          reduce using rule 81 (inner_statement -> empty NEWLINE .)
    PINGDOWN        reduce using rule 81 (inner_statement -> empty NEWLINE .)
    PINGRIGHT       reduce using rule 81 (inner_statement -> empty NEWLINE .)
    PINGLEFT        reduce using rule 81 (inner_statement -> empty NEWLINE .)
    VISION          reduce using rule 81 (inner_statement -> empty NEWLINE .)
    VOICE           reduce using rule 81 (inner_statement -> empty NEWLINE .)
    VARIABLE        reduce using rule 81 (inner_statement -> empty NEWLINE .)
    NUMERIC         reduce using rule 81 (inner_statement -> empty NEWLINE .)
    STRING          reduce using rule 81 (inner_statement -> empty NEWLINE .)
    LOGIC           reduce using rule 81 (inner_statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 81 (inner_statement -> empty NEWLINE .)
    UNBLOCK         reduce using rule 81 (inner_statement -> empty NEWLINE .)


state 178

    (27) procedure -> PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group .

    NEWLINE         reduce using rule 27 (procedure -> PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group .)


state 179

    (72) statements_group -> BLOCK . inner_statements UNBLOCK
    (74) inner_statements -> . inner_statement inner_statements
    (75) inner_statements -> . inner_statement
    (76) inner_statement -> . declaration NEWLINE
    (77) inner_statement -> . assignment NEWLINE
    (78) inner_statement -> . cycle NEWLINE
    (79) inner_statement -> . command NEWLINE
    (80) inner_statement -> . call NEWLINE
    (81) inner_statement -> . empty NEWLINE
    (12) declaration -> . type variable
    (83) declaration -> . type error
    (14) assignment -> . variable ASSIGNMENT expression
    (15) assignment -> . variable ASSIGNMENT assignment
    (84) assignment -> . variable ASSIGNMENT error
    (16) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (17) command -> . MOVEUP L_RBRACKET variable R_RBRACKET
    (18) command -> . MOVEDOWN L_RBRACKET variable R_RBRACKET
    (19) command -> . MOVERIGHT L_RBRACKET variable R_RBRACKET
    (20) command -> . MOVELEFT L_RBRACKET variable R_RBRACKET
    (21) command -> . PINGUP L_RBRACKET variable R_RBRACKET
    (22) command -> . PINGDOWN L_RBRACKET variable R_RBRACKET
    (23) command -> . PINGRIGHT L_RBRACKET variable R_RBRACKET
    (24) command -> . PINGLEFT L_RBRACKET variable R_RBRACKET
    (25) command -> . VISION L_RBRACKET variable R_RBRACKET
    (26) command -> . VOICE L_RBRACKET expression R_RBRACKET
    (85) command -> . MOVEUP L_RBRACKET error R_RBRACKET
    (86) command -> . MOVEDOWN L_RBRACKET error R_RBRACKET
    (87) command -> . MOVERIGHT L_RBRACKET error R_RBRACKET
    (88) command -> . MOVELEFT L_RBRACKET error R_RBRACKET
    (89) command -> . PINGUP L_RBRACKET error R_RBRACKET
    (90) command -> . PINGDOWN L_RBRACKET error R_RBRACKET
    (91) command -> . PINGRIGHT L_RBRACKET error R_RBRACKET
    (92) command -> . PINGLEFT L_RBRACKET error R_RBRACKET
    (93) command -> . VISION L_RBRACKET error R_RBRACKET
    (94) command -> . VOICE L_RBRACKET error R_RBRACKET
    (13) call -> . VARIABLE L_RBRACKET variables R_RBRACKET
    (34) empty -> .
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE
    (44) variable -> . VARIABLE indexing
    (45) variable -> . VARIABLE

    L_FBRACKET      shift and go to state 16
    MOVEUP          shift and go to state 17
    MOVEDOWN        shift and go to state 18
    MOVERIGHT       shift and go to state 19
    MOVELEFT        shift and go to state 20
    PINGUP          shift and go to state 21
    PINGDOWN        shift and go to state 22
    PINGRIGHT       shift and go to state 23
    PINGLEFT        shift and go to state 24
    VISION          shift and go to state 25
    VOICE           shift and go to state 26
    VARIABLE        shift and go to state 13
    NEWLINE         reduce using rule 34 (empty -> .)
    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31

    inner_statements               shift and go to state 184
    inner_statement                shift and go to state 159
    declaration                    shift and go to state 160
    assignment                     shift and go to state 161
    cycle                          shift and go to state 162
    command                        shift and go to state 163
    call                           shift and go to state 164
    empty                          shift and go to state 165
    type                           shift and go to state 14
    variable                       shift and go to state 15

state 180

    (73) statements_group -> inner_statement .

    NEWLINE         reduce using rule 73 (statements_group -> inner_statement .)


state 181

    (68) parameters -> parameter COMMA parameters .

    R_QBRACKET      reduce using rule 68 (parameters -> parameter COMMA parameters .)


state 182

    (70) parameter -> type VARIABLE AMPERSAND .

    COMMA           reduce using rule 70 (parameter -> type VARIABLE AMPERSAND .)
    R_QBRACKET      reduce using rule 70 (parameter -> type VARIABLE AMPERSAND .)


state 183

    (28) record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET .
    (29) record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET . conversions
    (30) conversions -> . conversions conversion
    (31) conversions -> . conversion
    (32) conversion -> . CONVERSION TO type VARIABLE
    (33) conversion -> . CONVERSION FROM type VARIABLE

    NEWLINE         reduce using rule 28 (record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET .)
    CONVERSION      shift and go to state 187

    conversions                    shift and go to state 185
    conversion                     shift and go to state 186

state 184

    (72) statements_group -> BLOCK inner_statements . UNBLOCK

    UNBLOCK         shift and go to state 188


state 185

    (29) record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions .
    (30) conversions -> conversions . conversion
    (32) conversion -> . CONVERSION TO type VARIABLE
    (33) conversion -> . CONVERSION FROM type VARIABLE

    NEWLINE         reduce using rule 29 (record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions .)
    CONVERSION      shift and go to state 187

    conversion                     shift and go to state 189

state 186

    (31) conversions -> conversion .

    CONVERSION      reduce using rule 31 (conversions -> conversion .)
    NEWLINE         reduce using rule 31 (conversions -> conversion .)


state 187

    (32) conversion -> CONVERSION . TO type VARIABLE
    (33) conversion -> CONVERSION . FROM type VARIABLE

    TO              shift and go to state 190
    FROM            shift and go to state 191


state 188

    (72) statements_group -> BLOCK inner_statements UNBLOCK .

    NEWLINE         reduce using rule 72 (statements_group -> BLOCK inner_statements UNBLOCK .)


state 189

    (30) conversions -> conversions conversion .

    CONVERSION      reduce using rule 30 (conversions -> conversions conversion .)
    NEWLINE         reduce using rule 30 (conversions -> conversions conversion .)


state 190

    (32) conversion -> CONVERSION TO . type VARIABLE
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE

    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31
    VARIABLE        shift and go to state 150

    type                           shift and go to state 192

state 191

    (33) conversion -> CONVERSION FROM . type VARIABLE
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE

    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31
    VARIABLE        shift and go to state 150

    type                           shift and go to state 193

state 192

    (32) conversion -> CONVERSION TO type . VARIABLE

    VARIABLE        shift and go to state 194


state 193

    (33) conversion -> CONVERSION FROM type . VARIABLE

    VARIABLE        shift and go to state 195


state 194

    (32) conversion -> CONVERSION TO type VARIABLE .

    CONVERSION      reduce using rule 32 (conversion -> CONVERSION TO type VARIABLE .)
    NEWLINE         reduce using rule 32 (conversion -> CONVERSION TO type VARIABLE .)


state 195

    (33) conversion -> CONVERSION FROM type VARIABLE .

    CONVERSION      reduce using rule 33 (conversion -> CONVERSION FROM type VARIABLE .)
    NEWLINE         reduce using rule 33 (conversion -> CONVERSION FROM type VARIABLE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 92 resolved as shift
WARNING: shift/reduce conflict for DOT in state 121 resolved as shift
WARNING: reduce/reduce conflict in state 91 resolved using rule (complex_expression -> MINUS expression)
WARNING: rejected rule (part_expression -> expression) in state 91
WARNING: reduce/reduce conflict in state 92 resolved using rule (part_expression -> DOT expression)
WARNING: rejected rule (part_expression -> expression) in state 92
