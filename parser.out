Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> declaration NEWLINE
Rule 5     statement -> assignment NEWLINE
Rule 6     statement -> cycle NEWLINE
Rule 7     statement -> command NEWLINE
Rule 8     statement -> procedure NEWLINE
Rule 9     statement -> call NEWLINE
Rule 10    statement -> record NEWLINE
Rule 11    statement -> empty NEWLINE
Rule 12    declaration -> type variable
Rule 13    assignment -> variable ASSIGNMENT expression
Rule 14    assignment -> variable ASSIGNMENT assignment
Rule 15    cycle -> L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
Rule 16    command -> MOVEUP L_QBRACKET variable R_QBRACKET
Rule 17    command -> MOVEDOWN L_QBRACKET variable R_QBRACKET
Rule 18    command -> MOVERIGHT L_QBRACKET variable R_QBRACKET
Rule 19    command -> MOVELEFT L_QBRACKET variable R_QBRACKET
Rule 20    command -> PINGUP L_QBRACKET variable R_QBRACKET
Rule 21    command -> PINGDOWN L_QBRACKET variable R_QBRACKET
Rule 22    command -> PINGRIGHT L_QBRACKET variable R_QBRACKET
Rule 23    command -> PINGLEFT L_QBRACKET variable R_QBRACKET
Rule 24    command -> VISION L_QBRACKET variable R_QBRACKET
Rule 25    command -> VOICE L_QBRACKET expression R_QBRACKET
Rule 26    procedure -> PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group
Rule 27    call -> VARIABLE L_QBRACKET variables R_QBRACKET
Rule 28    record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET
Rule 29    record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions
Rule 30    conversions -> conversions conversion
Rule 31    conversions -> conversion
Rule 32    conversion -> CONVERSION TO type VARIABLE
Rule 33    conversion -> CONVERSION FROM type VARIABLE
Rule 34    empty -> <empty>
Rule 35    type -> NUMERIC
Rule 36    type -> STRING
Rule 37    type -> LOGIC
Rule 38    type -> VARIABLE
Rule 39    expression -> variable
Rule 40    expression -> const
Rule 41    expression -> complex_expression
Rule 42    variables -> expression
Rule 43    variables -> expression COMMA variables
Rule 44    variable -> VARIABLE L_QBRACKET expression R_QBRACKET
Rule 45    variable -> VARIABLE
Rule 46    const -> TRUE
Rule 47    const -> FALSE
Rule 48    const -> UNDEF
Rule 49    const -> DECIMAL
Rule 50    const -> TEXT
Rule 51    complex_expression -> part_expression PLUS part_expression
Rule 52    complex_expression -> part_expression MINUS part_expression
Rule 53    complex_expression -> part_expression STAR part_expression
Rule 54    complex_expression -> part_expression SLASH part_expression
Rule 55    complex_expression -> part_expression CARET part_expression
Rule 56    complex_expression -> part_expression GREATER part_expression
Rule 57    complex_expression -> part_expression LESS part_expression
Rule 58    complex_expression -> part_expression EQ part_expression
Rule 59    complex_expression -> part_expression NOTEQ part_expression
Rule 60    complex_expression -> MINUS expression
Rule 61    part_expression -> DOT expression
Rule 62    part_expression -> expression DOT
Rule 63    part_expression -> expression
Rule 64    parameters -> parameter COMMA parameters
Rule 65    parameters -> parameter
Rule 66    parameter -> type VARIABLE AMPERSAND
Rule 67    parameter -> type VARIABLE
Rule 68    statements_group -> BLOCK inner_statements UNBLOCK
Rule 69    statements_group -> inner_statement
Rule 70    inner_statements -> inner_statement inner_statements
Rule 71    inner_statements -> inner_statement
Rule 72    inner_statement -> declaration NEWLINE
Rule 73    inner_statement -> assignment NEWLINE
Rule 74    inner_statement -> cycle NEWLINE
Rule 75    inner_statement -> command NEWLINE
Rule 76    inner_statement -> call NEWLINE
Rule 77    inner_statement -> empty NEWLINE
Rule 78    statement -> error
Rule 79    assignment -> variable ASSIGNMENT error
Rule 80    command -> MOVEUP L_QBRACKET error R_QBRACKET
Rule 81    command -> MOVEDOWN L_QBRACKET error R_QBRACKET
Rule 82    command -> MOVERIGHT L_QBRACKET error R_QBRACKET
Rule 83    command -> MOVELEFT L_QBRACKET error R_QBRACKET
Rule 84    command -> PINGUP L_QBRACKET error R_QBRACKET
Rule 85    command -> PINGDOWN L_QBRACKET error R_QBRACKET
Rule 86    command -> PINGRIGHT L_QBRACKET error R_QBRACKET
Rule 87    command -> PINGLEFT L_QBRACKET error R_QBRACKET
Rule 88    command -> VISION L_QBRACKET error R_QBRACKET
Rule 89    command -> VOICE L_QBRACKET error R_QBRACKET

Terminals, with rules where they appear

AMPERSAND            : 66
ASSIGNMENT           : 13 14 79
BLOCK                : 15 68
CARET                : 55
COMMA                : 43 64
CONVERSION           : 32 33
DATA                 : 28 29
DECIMAL              : 49
DOT                  : 61 62
EQ                   : 58
FALSE                : 47
FROM                 : 33
GREATER              : 56
LESS                 : 57
LOGIC                : 37
L_FBRACKET           : 15
L_QBRACKET           : 16 17 18 19 20 21 22 23 24 25 26 27 28 29 44 80 81 82 83 84 85 86 87 88 89
MINUS                : 52 60
MOVEDOWN             : 17 81
MOVELEFT             : 19 83
MOVERIGHT            : 18 82
MOVEUP               : 16 80
NEWLINE              : 4 5 6 7 8 9 10 11 72 73 74 75 76 77
NOTEQ                : 59
NUMERIC              : 35
PINGDOWN             : 21 85
PINGLEFT             : 23 87
PINGRIGHT            : 22 86
PINGUP               : 20 84
PLUS                 : 51
PROC                 : 26
RECORD               : 28 29
R_FBRACKET           : 15
R_QBRACKET           : 16 17 18 19 20 21 22 23 24 25 26 27 28 29 44 80 81 82 83 84 85 86 87 88 89
SLASH                : 54
STAR                 : 53
STRING               : 36
TEXT                 : 50
TO                   : 32
TRUE                 : 46
UNBLOCK              : 15 68
UNDEF                : 48
VARIABLE             : 26 27 28 29 32 33 38 44 45 66 67
VISION               : 24 88
VOICE                : 25 89
error                : 78 79 80 81 82 83 84 85 86 87 88 89

Nonterminals, with rules where they appear

assignment           : 5 14 73
call                 : 9 76
command              : 7 75
complex_expression   : 41
const                : 40
conversion           : 30 31
conversions          : 29 30
cycle                : 6 74
declaration          : 4 72
empty                : 11 77
expression           : 13 15 25 42 43 44 60 61 62 63
inner_statement      : 69 70 71
inner_statements     : 15 68 70
parameter            : 64 65
parameters           : 26 28 29 64
part_expression      : 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59
procedure            : 8
program              : 0
record               : 10
statement            : 2 3
statements           : 1 2
statements_group     : 26
type                 : 12 32 33 66 67
variable             : 12 13 14 16 17 18 19 20 21 22 23 24 39 79
variables            : 27 43

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration NEWLINE
    (5) statement -> . assignment NEWLINE
    (6) statement -> . cycle NEWLINE
    (7) statement -> . command NEWLINE
    (8) statement -> . procedure NEWLINE
    (9) statement -> . call NEWLINE
    (10) statement -> . record NEWLINE
    (11) statement -> . empty NEWLINE
    (78) statement -> . error
    (12) declaration -> . type variable
    (13) assignment -> . variable ASSIGNMENT expression
    (14) assignment -> . variable ASSIGNMENT assignment
    (79) assignment -> . variable ASSIGNMENT error
    (15) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (16) command -> . MOVEUP L_QBRACKET variable R_QBRACKET
    (17) command -> . MOVEDOWN L_QBRACKET variable R_QBRACKET
    (18) command -> . MOVERIGHT L_QBRACKET variable R_QBRACKET
    (19) command -> . MOVELEFT L_QBRACKET variable R_QBRACKET
    (20) command -> . PINGUP L_QBRACKET variable R_QBRACKET
    (21) command -> . PINGDOWN L_QBRACKET variable R_QBRACKET
    (22) command -> . PINGRIGHT L_QBRACKET variable R_QBRACKET
    (23) command -> . PINGLEFT L_QBRACKET variable R_QBRACKET
    (24) command -> . VISION L_QBRACKET variable R_QBRACKET
    (25) command -> . VOICE L_QBRACKET expression R_QBRACKET
    (80) command -> . MOVEUP L_QBRACKET error R_QBRACKET
    (81) command -> . MOVEDOWN L_QBRACKET error R_QBRACKET
    (82) command -> . MOVERIGHT L_QBRACKET error R_QBRACKET
    (83) command -> . MOVELEFT L_QBRACKET error R_QBRACKET
    (84) command -> . PINGUP L_QBRACKET error R_QBRACKET
    (85) command -> . PINGDOWN L_QBRACKET error R_QBRACKET
    (86) command -> . PINGRIGHT L_QBRACKET error R_QBRACKET
    (87) command -> . PINGLEFT L_QBRACKET error R_QBRACKET
    (88) command -> . VISION L_QBRACKET error R_QBRACKET
    (89) command -> . VOICE L_QBRACKET error R_QBRACKET
    (26) procedure -> . PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group
    (27) call -> . VARIABLE L_QBRACKET variables R_QBRACKET
    (28) record -> . RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET
    (29) record -> . RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions
    (34) empty -> .
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    error           shift and go to state 12
    L_FBRACKET      shift and go to state 15
    MOVEUP          shift and go to state 16
    MOVEDOWN        shift and go to state 17
    MOVERIGHT       shift and go to state 18
    MOVELEFT        shift and go to state 19
    PINGUP          shift and go to state 20
    PINGDOWN        shift and go to state 21
    PINGRIGHT       shift and go to state 22
    PINGLEFT        shift and go to state 23
    VISION          shift and go to state 24
    VOICE           shift and go to state 25
    PROC            shift and go to state 26
    VARIABLE        shift and go to state 27
    RECORD          shift and go to state 28
    NEWLINE         reduce using rule 34 (empty -> .)
    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    cycle                          shift and go to state 6
    command                        shift and go to state 7
    procedure                      shift and go to state 8
    call                           shift and go to state 9
    record                         shift and go to state 10
    empty                          shift and go to state 11
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . declaration NEWLINE
    (5) statement -> . assignment NEWLINE
    (6) statement -> . cycle NEWLINE
    (7) statement -> . command NEWLINE
    (8) statement -> . procedure NEWLINE
    (9) statement -> . call NEWLINE
    (10) statement -> . record NEWLINE
    (11) statement -> . empty NEWLINE
    (78) statement -> . error
    (12) declaration -> . type variable
    (13) assignment -> . variable ASSIGNMENT expression
    (14) assignment -> . variable ASSIGNMENT assignment
    (79) assignment -> . variable ASSIGNMENT error
    (15) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (16) command -> . MOVEUP L_QBRACKET variable R_QBRACKET
    (17) command -> . MOVEDOWN L_QBRACKET variable R_QBRACKET
    (18) command -> . MOVERIGHT L_QBRACKET variable R_QBRACKET
    (19) command -> . MOVELEFT L_QBRACKET variable R_QBRACKET
    (20) command -> . PINGUP L_QBRACKET variable R_QBRACKET
    (21) command -> . PINGDOWN L_QBRACKET variable R_QBRACKET
    (22) command -> . PINGRIGHT L_QBRACKET variable R_QBRACKET
    (23) command -> . PINGLEFT L_QBRACKET variable R_QBRACKET
    (24) command -> . VISION L_QBRACKET variable R_QBRACKET
    (25) command -> . VOICE L_QBRACKET expression R_QBRACKET
    (80) command -> . MOVEUP L_QBRACKET error R_QBRACKET
    (81) command -> . MOVEDOWN L_QBRACKET error R_QBRACKET
    (82) command -> . MOVERIGHT L_QBRACKET error R_QBRACKET
    (83) command -> . MOVELEFT L_QBRACKET error R_QBRACKET
    (84) command -> . PINGUP L_QBRACKET error R_QBRACKET
    (85) command -> . PINGDOWN L_QBRACKET error R_QBRACKET
    (86) command -> . PINGRIGHT L_QBRACKET error R_QBRACKET
    (87) command -> . PINGLEFT L_QBRACKET error R_QBRACKET
    (88) command -> . VISION L_QBRACKET error R_QBRACKET
    (89) command -> . VOICE L_QBRACKET error R_QBRACKET
    (26) procedure -> . PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group
    (27) call -> . VARIABLE L_QBRACKET variables R_QBRACKET
    (28) record -> . RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET
    (29) record -> . RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions
    (34) empty -> .
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    $end            reduce using rule 1 (program -> statements .)
    error           shift and go to state 12
    L_FBRACKET      shift and go to state 15
    MOVEUP          shift and go to state 16
    MOVEDOWN        shift and go to state 17
    MOVERIGHT       shift and go to state 18
    MOVELEFT        shift and go to state 19
    PINGUP          shift and go to state 20
    PINGDOWN        shift and go to state 21
    PINGRIGHT       shift and go to state 22
    PINGLEFT        shift and go to state 23
    VISION          shift and go to state 24
    VOICE           shift and go to state 25
    PROC            shift and go to state 26
    VARIABLE        shift and go to state 27
    RECORD          shift and go to state 28
    NEWLINE         reduce using rule 34 (empty -> .)
    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31

    statement                      shift and go to state 32
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    cycle                          shift and go to state 6
    command                        shift and go to state 7
    procedure                      shift and go to state 8
    call                           shift and go to state 9
    record                         shift and go to state 10
    empty                          shift and go to state 11
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 3

    (3) statements -> statement .

    error           reduce using rule 3 (statements -> statement .)
    L_FBRACKET      reduce using rule 3 (statements -> statement .)
    MOVEUP          reduce using rule 3 (statements -> statement .)
    MOVEDOWN        reduce using rule 3 (statements -> statement .)
    MOVERIGHT       reduce using rule 3 (statements -> statement .)
    MOVELEFT        reduce using rule 3 (statements -> statement .)
    PINGUP          reduce using rule 3 (statements -> statement .)
    PINGDOWN        reduce using rule 3 (statements -> statement .)
    PINGRIGHT       reduce using rule 3 (statements -> statement .)
    PINGLEFT        reduce using rule 3 (statements -> statement .)
    VISION          reduce using rule 3 (statements -> statement .)
    VOICE           reduce using rule 3 (statements -> statement .)
    PROC            reduce using rule 3 (statements -> statement .)
    VARIABLE        reduce using rule 3 (statements -> statement .)
    RECORD          reduce using rule 3 (statements -> statement .)
    NUMERIC         reduce using rule 3 (statements -> statement .)
    STRING          reduce using rule 3 (statements -> statement .)
    LOGIC           reduce using rule 3 (statements -> statement .)
    NEWLINE         reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> declaration . NEWLINE

    NEWLINE         shift and go to state 33


state 5

    (5) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 34


state 6

    (6) statement -> cycle . NEWLINE

    NEWLINE         shift and go to state 35


state 7

    (7) statement -> command . NEWLINE

    NEWLINE         shift and go to state 36


state 8

    (8) statement -> procedure . NEWLINE

    NEWLINE         shift and go to state 37


state 9

    (9) statement -> call . NEWLINE

    NEWLINE         shift and go to state 38


state 10

    (10) statement -> record . NEWLINE

    NEWLINE         shift and go to state 39


state 11

    (11) statement -> empty . NEWLINE

    NEWLINE         shift and go to state 40


state 12

    (78) statement -> error .

    error           reduce using rule 78 (statement -> error .)
    L_FBRACKET      reduce using rule 78 (statement -> error .)
    MOVEUP          reduce using rule 78 (statement -> error .)
    MOVEDOWN        reduce using rule 78 (statement -> error .)
    MOVERIGHT       reduce using rule 78 (statement -> error .)
    MOVELEFT        reduce using rule 78 (statement -> error .)
    PINGUP          reduce using rule 78 (statement -> error .)
    PINGDOWN        reduce using rule 78 (statement -> error .)
    PINGRIGHT       reduce using rule 78 (statement -> error .)
    PINGLEFT        reduce using rule 78 (statement -> error .)
    VISION          reduce using rule 78 (statement -> error .)
    VOICE           reduce using rule 78 (statement -> error .)
    PROC            reduce using rule 78 (statement -> error .)
    VARIABLE        reduce using rule 78 (statement -> error .)
    RECORD          reduce using rule 78 (statement -> error .)
    NUMERIC         reduce using rule 78 (statement -> error .)
    STRING          reduce using rule 78 (statement -> error .)
    LOGIC           reduce using rule 78 (statement -> error .)
    NEWLINE         reduce using rule 78 (statement -> error .)
    $end            reduce using rule 78 (statement -> error .)


state 13

    (12) declaration -> type . variable
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    VARIABLE        shift and go to state 42

    variable                       shift and go to state 41

state 14

    (13) assignment -> variable . ASSIGNMENT expression
    (14) assignment -> variable . ASSIGNMENT assignment
    (79) assignment -> variable . ASSIGNMENT error

    ASSIGNMENT      shift and go to state 43


state 15

    (15) cycle -> L_FBRACKET . expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression

    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54
    DOT             shift and go to state 55

    expression                     shift and go to state 44
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47
    part_expression                shift and go to state 53

state 16

    (16) command -> MOVEUP . L_QBRACKET variable R_QBRACKET
    (80) command -> MOVEUP . L_QBRACKET error R_QBRACKET

    L_QBRACKET      shift and go to state 56


state 17

    (17) command -> MOVEDOWN . L_QBRACKET variable R_QBRACKET
    (81) command -> MOVEDOWN . L_QBRACKET error R_QBRACKET

    L_QBRACKET      shift and go to state 57


state 18

    (18) command -> MOVERIGHT . L_QBRACKET variable R_QBRACKET
    (82) command -> MOVERIGHT . L_QBRACKET error R_QBRACKET

    L_QBRACKET      shift and go to state 58


state 19

    (19) command -> MOVELEFT . L_QBRACKET variable R_QBRACKET
    (83) command -> MOVELEFT . L_QBRACKET error R_QBRACKET

    L_QBRACKET      shift and go to state 59


state 20

    (20) command -> PINGUP . L_QBRACKET variable R_QBRACKET
    (84) command -> PINGUP . L_QBRACKET error R_QBRACKET

    L_QBRACKET      shift and go to state 60


state 21

    (21) command -> PINGDOWN . L_QBRACKET variable R_QBRACKET
    (85) command -> PINGDOWN . L_QBRACKET error R_QBRACKET

    L_QBRACKET      shift and go to state 61


state 22

    (22) command -> PINGRIGHT . L_QBRACKET variable R_QBRACKET
    (86) command -> PINGRIGHT . L_QBRACKET error R_QBRACKET

    L_QBRACKET      shift and go to state 62


state 23

    (23) command -> PINGLEFT . L_QBRACKET variable R_QBRACKET
    (87) command -> PINGLEFT . L_QBRACKET error R_QBRACKET

    L_QBRACKET      shift and go to state 63


state 24

    (24) command -> VISION . L_QBRACKET variable R_QBRACKET
    (88) command -> VISION . L_QBRACKET error R_QBRACKET

    L_QBRACKET      shift and go to state 64


state 25

    (25) command -> VOICE . L_QBRACKET expression R_QBRACKET
    (89) command -> VOICE . L_QBRACKET error R_QBRACKET

    L_QBRACKET      shift and go to state 65


state 26

    (26) procedure -> PROC . VARIABLE L_QBRACKET parameters R_QBRACKET statements_group

    VARIABLE        shift and go to state 66


state 27

    (27) call -> VARIABLE . L_QBRACKET variables R_QBRACKET
    (38) type -> VARIABLE .
    (44) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (45) variable -> VARIABLE .

    L_QBRACKET      shift and go to state 67
    VARIABLE        reduce using rule 38 (type -> VARIABLE .)
    ASSIGNMENT      reduce using rule 45 (variable -> VARIABLE .)


state 28

    (28) record -> RECORD . VARIABLE DATA L_QBRACKET parameters R_QBRACKET
    (29) record -> RECORD . VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions

    VARIABLE        shift and go to state 68


state 29

    (35) type -> NUMERIC .

    VARIABLE        reduce using rule 35 (type -> NUMERIC .)


state 30

    (36) type -> STRING .

    VARIABLE        reduce using rule 36 (type -> STRING .)


state 31

    (37) type -> LOGIC .

    VARIABLE        reduce using rule 37 (type -> LOGIC .)


state 32

    (2) statements -> statements statement .

    error           reduce using rule 2 (statements -> statements statement .)
    L_FBRACKET      reduce using rule 2 (statements -> statements statement .)
    MOVEUP          reduce using rule 2 (statements -> statements statement .)
    MOVEDOWN        reduce using rule 2 (statements -> statements statement .)
    MOVERIGHT       reduce using rule 2 (statements -> statements statement .)
    MOVELEFT        reduce using rule 2 (statements -> statements statement .)
    PINGUP          reduce using rule 2 (statements -> statements statement .)
    PINGDOWN        reduce using rule 2 (statements -> statements statement .)
    PINGRIGHT       reduce using rule 2 (statements -> statements statement .)
    PINGLEFT        reduce using rule 2 (statements -> statements statement .)
    VISION          reduce using rule 2 (statements -> statements statement .)
    VOICE           reduce using rule 2 (statements -> statements statement .)
    PROC            reduce using rule 2 (statements -> statements statement .)
    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    RECORD          reduce using rule 2 (statements -> statements statement .)
    NUMERIC         reduce using rule 2 (statements -> statements statement .)
    STRING          reduce using rule 2 (statements -> statements statement .)
    LOGIC           reduce using rule 2 (statements -> statements statement .)
    NEWLINE         reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 33

    (4) statement -> declaration NEWLINE .

    error           reduce using rule 4 (statement -> declaration NEWLINE .)
    L_FBRACKET      reduce using rule 4 (statement -> declaration NEWLINE .)
    MOVEUP          reduce using rule 4 (statement -> declaration NEWLINE .)
    MOVEDOWN        reduce using rule 4 (statement -> declaration NEWLINE .)
    MOVERIGHT       reduce using rule 4 (statement -> declaration NEWLINE .)
    MOVELEFT        reduce using rule 4 (statement -> declaration NEWLINE .)
    PINGUP          reduce using rule 4 (statement -> declaration NEWLINE .)
    PINGDOWN        reduce using rule 4 (statement -> declaration NEWLINE .)
    PINGRIGHT       reduce using rule 4 (statement -> declaration NEWLINE .)
    PINGLEFT        reduce using rule 4 (statement -> declaration NEWLINE .)
    VISION          reduce using rule 4 (statement -> declaration NEWLINE .)
    VOICE           reduce using rule 4 (statement -> declaration NEWLINE .)
    PROC            reduce using rule 4 (statement -> declaration NEWLINE .)
    VARIABLE        reduce using rule 4 (statement -> declaration NEWLINE .)
    RECORD          reduce using rule 4 (statement -> declaration NEWLINE .)
    NUMERIC         reduce using rule 4 (statement -> declaration NEWLINE .)
    STRING          reduce using rule 4 (statement -> declaration NEWLINE .)
    LOGIC           reduce using rule 4 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> declaration NEWLINE .)
    $end            reduce using rule 4 (statement -> declaration NEWLINE .)


state 34

    (5) statement -> assignment NEWLINE .

    error           reduce using rule 5 (statement -> assignment NEWLINE .)
    L_FBRACKET      reduce using rule 5 (statement -> assignment NEWLINE .)
    MOVEUP          reduce using rule 5 (statement -> assignment NEWLINE .)
    MOVEDOWN        reduce using rule 5 (statement -> assignment NEWLINE .)
    MOVERIGHT       reduce using rule 5 (statement -> assignment NEWLINE .)
    MOVELEFT        reduce using rule 5 (statement -> assignment NEWLINE .)
    PINGUP          reduce using rule 5 (statement -> assignment NEWLINE .)
    PINGDOWN        reduce using rule 5 (statement -> assignment NEWLINE .)
    PINGRIGHT       reduce using rule 5 (statement -> assignment NEWLINE .)
    PINGLEFT        reduce using rule 5 (statement -> assignment NEWLINE .)
    VISION          reduce using rule 5 (statement -> assignment NEWLINE .)
    VOICE           reduce using rule 5 (statement -> assignment NEWLINE .)
    PROC            reduce using rule 5 (statement -> assignment NEWLINE .)
    VARIABLE        reduce using rule 5 (statement -> assignment NEWLINE .)
    RECORD          reduce using rule 5 (statement -> assignment NEWLINE .)
    NUMERIC         reduce using rule 5 (statement -> assignment NEWLINE .)
    STRING          reduce using rule 5 (statement -> assignment NEWLINE .)
    LOGIC           reduce using rule 5 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> assignment NEWLINE .)
    $end            reduce using rule 5 (statement -> assignment NEWLINE .)


state 35

    (6) statement -> cycle NEWLINE .

    error           reduce using rule 6 (statement -> cycle NEWLINE .)
    L_FBRACKET      reduce using rule 6 (statement -> cycle NEWLINE .)
    MOVEUP          reduce using rule 6 (statement -> cycle NEWLINE .)
    MOVEDOWN        reduce using rule 6 (statement -> cycle NEWLINE .)
    MOVERIGHT       reduce using rule 6 (statement -> cycle NEWLINE .)
    MOVELEFT        reduce using rule 6 (statement -> cycle NEWLINE .)
    PINGUP          reduce using rule 6 (statement -> cycle NEWLINE .)
    PINGDOWN        reduce using rule 6 (statement -> cycle NEWLINE .)
    PINGRIGHT       reduce using rule 6 (statement -> cycle NEWLINE .)
    PINGLEFT        reduce using rule 6 (statement -> cycle NEWLINE .)
    VISION          reduce using rule 6 (statement -> cycle NEWLINE .)
    VOICE           reduce using rule 6 (statement -> cycle NEWLINE .)
    PROC            reduce using rule 6 (statement -> cycle NEWLINE .)
    VARIABLE        reduce using rule 6 (statement -> cycle NEWLINE .)
    RECORD          reduce using rule 6 (statement -> cycle NEWLINE .)
    NUMERIC         reduce using rule 6 (statement -> cycle NEWLINE .)
    STRING          reduce using rule 6 (statement -> cycle NEWLINE .)
    LOGIC           reduce using rule 6 (statement -> cycle NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> cycle NEWLINE .)
    $end            reduce using rule 6 (statement -> cycle NEWLINE .)


state 36

    (7) statement -> command NEWLINE .

    error           reduce using rule 7 (statement -> command NEWLINE .)
    L_FBRACKET      reduce using rule 7 (statement -> command NEWLINE .)
    MOVEUP          reduce using rule 7 (statement -> command NEWLINE .)
    MOVEDOWN        reduce using rule 7 (statement -> command NEWLINE .)
    MOVERIGHT       reduce using rule 7 (statement -> command NEWLINE .)
    MOVELEFT        reduce using rule 7 (statement -> command NEWLINE .)
    PINGUP          reduce using rule 7 (statement -> command NEWLINE .)
    PINGDOWN        reduce using rule 7 (statement -> command NEWLINE .)
    PINGRIGHT       reduce using rule 7 (statement -> command NEWLINE .)
    PINGLEFT        reduce using rule 7 (statement -> command NEWLINE .)
    VISION          reduce using rule 7 (statement -> command NEWLINE .)
    VOICE           reduce using rule 7 (statement -> command NEWLINE .)
    PROC            reduce using rule 7 (statement -> command NEWLINE .)
    VARIABLE        reduce using rule 7 (statement -> command NEWLINE .)
    RECORD          reduce using rule 7 (statement -> command NEWLINE .)
    NUMERIC         reduce using rule 7 (statement -> command NEWLINE .)
    STRING          reduce using rule 7 (statement -> command NEWLINE .)
    LOGIC           reduce using rule 7 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 7 (statement -> command NEWLINE .)
    $end            reduce using rule 7 (statement -> command NEWLINE .)


state 37

    (8) statement -> procedure NEWLINE .

    error           reduce using rule 8 (statement -> procedure NEWLINE .)
    L_FBRACKET      reduce using rule 8 (statement -> procedure NEWLINE .)
    MOVEUP          reduce using rule 8 (statement -> procedure NEWLINE .)
    MOVEDOWN        reduce using rule 8 (statement -> procedure NEWLINE .)
    MOVERIGHT       reduce using rule 8 (statement -> procedure NEWLINE .)
    MOVELEFT        reduce using rule 8 (statement -> procedure NEWLINE .)
    PINGUP          reduce using rule 8 (statement -> procedure NEWLINE .)
    PINGDOWN        reduce using rule 8 (statement -> procedure NEWLINE .)
    PINGRIGHT       reduce using rule 8 (statement -> procedure NEWLINE .)
    PINGLEFT        reduce using rule 8 (statement -> procedure NEWLINE .)
    VISION          reduce using rule 8 (statement -> procedure NEWLINE .)
    VOICE           reduce using rule 8 (statement -> procedure NEWLINE .)
    PROC            reduce using rule 8 (statement -> procedure NEWLINE .)
    VARIABLE        reduce using rule 8 (statement -> procedure NEWLINE .)
    RECORD          reduce using rule 8 (statement -> procedure NEWLINE .)
    NUMERIC         reduce using rule 8 (statement -> procedure NEWLINE .)
    STRING          reduce using rule 8 (statement -> procedure NEWLINE .)
    LOGIC           reduce using rule 8 (statement -> procedure NEWLINE .)
    NEWLINE         reduce using rule 8 (statement -> procedure NEWLINE .)
    $end            reduce using rule 8 (statement -> procedure NEWLINE .)


state 38

    (9) statement -> call NEWLINE .

    error           reduce using rule 9 (statement -> call NEWLINE .)
    L_FBRACKET      reduce using rule 9 (statement -> call NEWLINE .)
    MOVEUP          reduce using rule 9 (statement -> call NEWLINE .)
    MOVEDOWN        reduce using rule 9 (statement -> call NEWLINE .)
    MOVERIGHT       reduce using rule 9 (statement -> call NEWLINE .)
    MOVELEFT        reduce using rule 9 (statement -> call NEWLINE .)
    PINGUP          reduce using rule 9 (statement -> call NEWLINE .)
    PINGDOWN        reduce using rule 9 (statement -> call NEWLINE .)
    PINGRIGHT       reduce using rule 9 (statement -> call NEWLINE .)
    PINGLEFT        reduce using rule 9 (statement -> call NEWLINE .)
    VISION          reduce using rule 9 (statement -> call NEWLINE .)
    VOICE           reduce using rule 9 (statement -> call NEWLINE .)
    PROC            reduce using rule 9 (statement -> call NEWLINE .)
    VARIABLE        reduce using rule 9 (statement -> call NEWLINE .)
    RECORD          reduce using rule 9 (statement -> call NEWLINE .)
    NUMERIC         reduce using rule 9 (statement -> call NEWLINE .)
    STRING          reduce using rule 9 (statement -> call NEWLINE .)
    LOGIC           reduce using rule 9 (statement -> call NEWLINE .)
    NEWLINE         reduce using rule 9 (statement -> call NEWLINE .)
    $end            reduce using rule 9 (statement -> call NEWLINE .)


state 39

    (10) statement -> record NEWLINE .

    error           reduce using rule 10 (statement -> record NEWLINE .)
    L_FBRACKET      reduce using rule 10 (statement -> record NEWLINE .)
    MOVEUP          reduce using rule 10 (statement -> record NEWLINE .)
    MOVEDOWN        reduce using rule 10 (statement -> record NEWLINE .)
    MOVERIGHT       reduce using rule 10 (statement -> record NEWLINE .)
    MOVELEFT        reduce using rule 10 (statement -> record NEWLINE .)
    PINGUP          reduce using rule 10 (statement -> record NEWLINE .)
    PINGDOWN        reduce using rule 10 (statement -> record NEWLINE .)
    PINGRIGHT       reduce using rule 10 (statement -> record NEWLINE .)
    PINGLEFT        reduce using rule 10 (statement -> record NEWLINE .)
    VISION          reduce using rule 10 (statement -> record NEWLINE .)
    VOICE           reduce using rule 10 (statement -> record NEWLINE .)
    PROC            reduce using rule 10 (statement -> record NEWLINE .)
    VARIABLE        reduce using rule 10 (statement -> record NEWLINE .)
    RECORD          reduce using rule 10 (statement -> record NEWLINE .)
    NUMERIC         reduce using rule 10 (statement -> record NEWLINE .)
    STRING          reduce using rule 10 (statement -> record NEWLINE .)
    LOGIC           reduce using rule 10 (statement -> record NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> record NEWLINE .)
    $end            reduce using rule 10 (statement -> record NEWLINE .)


state 40

    (11) statement -> empty NEWLINE .

    error           reduce using rule 11 (statement -> empty NEWLINE .)
    L_FBRACKET      reduce using rule 11 (statement -> empty NEWLINE .)
    MOVEUP          reduce using rule 11 (statement -> empty NEWLINE .)
    MOVEDOWN        reduce using rule 11 (statement -> empty NEWLINE .)
    MOVERIGHT       reduce using rule 11 (statement -> empty NEWLINE .)
    MOVELEFT        reduce using rule 11 (statement -> empty NEWLINE .)
    PINGUP          reduce using rule 11 (statement -> empty NEWLINE .)
    PINGDOWN        reduce using rule 11 (statement -> empty NEWLINE .)
    PINGRIGHT       reduce using rule 11 (statement -> empty NEWLINE .)
    PINGLEFT        reduce using rule 11 (statement -> empty NEWLINE .)
    VISION          reduce using rule 11 (statement -> empty NEWLINE .)
    VOICE           reduce using rule 11 (statement -> empty NEWLINE .)
    PROC            reduce using rule 11 (statement -> empty NEWLINE .)
    VARIABLE        reduce using rule 11 (statement -> empty NEWLINE .)
    RECORD          reduce using rule 11 (statement -> empty NEWLINE .)
    NUMERIC         reduce using rule 11 (statement -> empty NEWLINE .)
    STRING          reduce using rule 11 (statement -> empty NEWLINE .)
    LOGIC           reduce using rule 11 (statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 11 (statement -> empty NEWLINE .)
    $end            reduce using rule 11 (statement -> empty NEWLINE .)


state 41

    (12) declaration -> type variable .

    NEWLINE         reduce using rule 12 (declaration -> type variable .)


state 42

    (44) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (45) variable -> VARIABLE .

    L_QBRACKET      shift and go to state 69
    NEWLINE         reduce using rule 45 (variable -> VARIABLE .)
    R_FBRACKET      reduce using rule 45 (variable -> VARIABLE .)
    DOT             reduce using rule 45 (variable -> VARIABLE .)
    PLUS            reduce using rule 45 (variable -> VARIABLE .)
    MINUS           reduce using rule 45 (variable -> VARIABLE .)
    STAR            reduce using rule 45 (variable -> VARIABLE .)
    SLASH           reduce using rule 45 (variable -> VARIABLE .)
    CARET           reduce using rule 45 (variable -> VARIABLE .)
    GREATER         reduce using rule 45 (variable -> VARIABLE .)
    LESS            reduce using rule 45 (variable -> VARIABLE .)
    EQ              reduce using rule 45 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 45 (variable -> VARIABLE .)
    ASSIGNMENT      reduce using rule 45 (variable -> VARIABLE .)
    R_QBRACKET      reduce using rule 45 (variable -> VARIABLE .)
    COMMA           reduce using rule 45 (variable -> VARIABLE .)


state 43

    (13) assignment -> variable ASSIGNMENT . expression
    (14) assignment -> variable ASSIGNMENT . assignment
    (79) assignment -> variable ASSIGNMENT . error
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (13) assignment -> . variable ASSIGNMENT expression
    (14) assignment -> . variable ASSIGNMENT assignment
    (79) assignment -> . variable ASSIGNMENT error
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression

    error           shift and go to state 73
    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54
    DOT             shift and go to state 55

    variable                       shift and go to state 70
    expression                     shift and go to state 71
    assignment                     shift and go to state 72
    const                          shift and go to state 46
    complex_expression             shift and go to state 47
    part_expression                shift and go to state 53

state 44

    (15) cycle -> L_FBRACKET expression . R_FBRACKET BLOCK inner_statements UNBLOCK
    (62) part_expression -> expression . DOT
    (63) part_expression -> expression .

    R_FBRACKET      shift and go to state 74
    DOT             shift and go to state 75
    PLUS            reduce using rule 63 (part_expression -> expression .)
    MINUS           reduce using rule 63 (part_expression -> expression .)
    STAR            reduce using rule 63 (part_expression -> expression .)
    SLASH           reduce using rule 63 (part_expression -> expression .)
    CARET           reduce using rule 63 (part_expression -> expression .)
    GREATER         reduce using rule 63 (part_expression -> expression .)
    LESS            reduce using rule 63 (part_expression -> expression .)
    EQ              reduce using rule 63 (part_expression -> expression .)
    NOTEQ           reduce using rule 63 (part_expression -> expression .)


state 45

    (39) expression -> variable .

    R_FBRACKET      reduce using rule 39 (expression -> variable .)
    DOT             reduce using rule 39 (expression -> variable .)
    PLUS            reduce using rule 39 (expression -> variable .)
    MINUS           reduce using rule 39 (expression -> variable .)
    STAR            reduce using rule 39 (expression -> variable .)
    SLASH           reduce using rule 39 (expression -> variable .)
    CARET           reduce using rule 39 (expression -> variable .)
    GREATER         reduce using rule 39 (expression -> variable .)
    LESS            reduce using rule 39 (expression -> variable .)
    EQ              reduce using rule 39 (expression -> variable .)
    NOTEQ           reduce using rule 39 (expression -> variable .)
    NEWLINE         reduce using rule 39 (expression -> variable .)
    R_QBRACKET      reduce using rule 39 (expression -> variable .)
    COMMA           reduce using rule 39 (expression -> variable .)


state 46

    (40) expression -> const .

    R_FBRACKET      reduce using rule 40 (expression -> const .)
    DOT             reduce using rule 40 (expression -> const .)
    PLUS            reduce using rule 40 (expression -> const .)
    MINUS           reduce using rule 40 (expression -> const .)
    STAR            reduce using rule 40 (expression -> const .)
    SLASH           reduce using rule 40 (expression -> const .)
    CARET           reduce using rule 40 (expression -> const .)
    GREATER         reduce using rule 40 (expression -> const .)
    LESS            reduce using rule 40 (expression -> const .)
    EQ              reduce using rule 40 (expression -> const .)
    NOTEQ           reduce using rule 40 (expression -> const .)
    NEWLINE         reduce using rule 40 (expression -> const .)
    R_QBRACKET      reduce using rule 40 (expression -> const .)
    COMMA           reduce using rule 40 (expression -> const .)


state 47

    (41) expression -> complex_expression .

    R_FBRACKET      reduce using rule 41 (expression -> complex_expression .)
    DOT             reduce using rule 41 (expression -> complex_expression .)
    PLUS            reduce using rule 41 (expression -> complex_expression .)
    MINUS           reduce using rule 41 (expression -> complex_expression .)
    STAR            reduce using rule 41 (expression -> complex_expression .)
    SLASH           reduce using rule 41 (expression -> complex_expression .)
    CARET           reduce using rule 41 (expression -> complex_expression .)
    GREATER         reduce using rule 41 (expression -> complex_expression .)
    LESS            reduce using rule 41 (expression -> complex_expression .)
    EQ              reduce using rule 41 (expression -> complex_expression .)
    NOTEQ           reduce using rule 41 (expression -> complex_expression .)
    NEWLINE         reduce using rule 41 (expression -> complex_expression .)
    R_QBRACKET      reduce using rule 41 (expression -> complex_expression .)
    COMMA           reduce using rule 41 (expression -> complex_expression .)


state 48

    (46) const -> TRUE .

    R_FBRACKET      reduce using rule 46 (const -> TRUE .)
    DOT             reduce using rule 46 (const -> TRUE .)
    PLUS            reduce using rule 46 (const -> TRUE .)
    MINUS           reduce using rule 46 (const -> TRUE .)
    STAR            reduce using rule 46 (const -> TRUE .)
    SLASH           reduce using rule 46 (const -> TRUE .)
    CARET           reduce using rule 46 (const -> TRUE .)
    GREATER         reduce using rule 46 (const -> TRUE .)
    LESS            reduce using rule 46 (const -> TRUE .)
    EQ              reduce using rule 46 (const -> TRUE .)
    NOTEQ           reduce using rule 46 (const -> TRUE .)
    NEWLINE         reduce using rule 46 (const -> TRUE .)
    R_QBRACKET      reduce using rule 46 (const -> TRUE .)
    COMMA           reduce using rule 46 (const -> TRUE .)


state 49

    (47) const -> FALSE .

    R_FBRACKET      reduce using rule 47 (const -> FALSE .)
    DOT             reduce using rule 47 (const -> FALSE .)
    PLUS            reduce using rule 47 (const -> FALSE .)
    MINUS           reduce using rule 47 (const -> FALSE .)
    STAR            reduce using rule 47 (const -> FALSE .)
    SLASH           reduce using rule 47 (const -> FALSE .)
    CARET           reduce using rule 47 (const -> FALSE .)
    GREATER         reduce using rule 47 (const -> FALSE .)
    LESS            reduce using rule 47 (const -> FALSE .)
    EQ              reduce using rule 47 (const -> FALSE .)
    NOTEQ           reduce using rule 47 (const -> FALSE .)
    NEWLINE         reduce using rule 47 (const -> FALSE .)
    R_QBRACKET      reduce using rule 47 (const -> FALSE .)
    COMMA           reduce using rule 47 (const -> FALSE .)


state 50

    (48) const -> UNDEF .

    R_FBRACKET      reduce using rule 48 (const -> UNDEF .)
    DOT             reduce using rule 48 (const -> UNDEF .)
    PLUS            reduce using rule 48 (const -> UNDEF .)
    MINUS           reduce using rule 48 (const -> UNDEF .)
    STAR            reduce using rule 48 (const -> UNDEF .)
    SLASH           reduce using rule 48 (const -> UNDEF .)
    CARET           reduce using rule 48 (const -> UNDEF .)
    GREATER         reduce using rule 48 (const -> UNDEF .)
    LESS            reduce using rule 48 (const -> UNDEF .)
    EQ              reduce using rule 48 (const -> UNDEF .)
    NOTEQ           reduce using rule 48 (const -> UNDEF .)
    NEWLINE         reduce using rule 48 (const -> UNDEF .)
    R_QBRACKET      reduce using rule 48 (const -> UNDEF .)
    COMMA           reduce using rule 48 (const -> UNDEF .)


state 51

    (49) const -> DECIMAL .

    R_FBRACKET      reduce using rule 49 (const -> DECIMAL .)
    DOT             reduce using rule 49 (const -> DECIMAL .)
    PLUS            reduce using rule 49 (const -> DECIMAL .)
    MINUS           reduce using rule 49 (const -> DECIMAL .)
    STAR            reduce using rule 49 (const -> DECIMAL .)
    SLASH           reduce using rule 49 (const -> DECIMAL .)
    CARET           reduce using rule 49 (const -> DECIMAL .)
    GREATER         reduce using rule 49 (const -> DECIMAL .)
    LESS            reduce using rule 49 (const -> DECIMAL .)
    EQ              reduce using rule 49 (const -> DECIMAL .)
    NOTEQ           reduce using rule 49 (const -> DECIMAL .)
    NEWLINE         reduce using rule 49 (const -> DECIMAL .)
    R_QBRACKET      reduce using rule 49 (const -> DECIMAL .)
    COMMA           reduce using rule 49 (const -> DECIMAL .)


state 52

    (50) const -> TEXT .

    R_FBRACKET      reduce using rule 50 (const -> TEXT .)
    DOT             reduce using rule 50 (const -> TEXT .)
    PLUS            reduce using rule 50 (const -> TEXT .)
    MINUS           reduce using rule 50 (const -> TEXT .)
    STAR            reduce using rule 50 (const -> TEXT .)
    SLASH           reduce using rule 50 (const -> TEXT .)
    CARET           reduce using rule 50 (const -> TEXT .)
    GREATER         reduce using rule 50 (const -> TEXT .)
    LESS            reduce using rule 50 (const -> TEXT .)
    EQ              reduce using rule 50 (const -> TEXT .)
    NOTEQ           reduce using rule 50 (const -> TEXT .)
    NEWLINE         reduce using rule 50 (const -> TEXT .)
    R_QBRACKET      reduce using rule 50 (const -> TEXT .)
    COMMA           reduce using rule 50 (const -> TEXT .)


state 53

    (51) complex_expression -> part_expression . PLUS part_expression
    (52) complex_expression -> part_expression . MINUS part_expression
    (53) complex_expression -> part_expression . STAR part_expression
    (54) complex_expression -> part_expression . SLASH part_expression
    (55) complex_expression -> part_expression . CARET part_expression
    (56) complex_expression -> part_expression . GREATER part_expression
    (57) complex_expression -> part_expression . LESS part_expression
    (58) complex_expression -> part_expression . EQ part_expression
    (59) complex_expression -> part_expression . NOTEQ part_expression

    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    STAR            shift and go to state 78
    SLASH           shift and go to state 79
    CARET           shift and go to state 80
    GREATER         shift and go to state 81
    LESS            shift and go to state 82
    EQ              shift and go to state 83
    NOTEQ           shift and go to state 84


state 54

    (60) complex_expression -> MINUS . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression

    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54
    DOT             shift and go to state 55

    expression                     shift and go to state 85
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47
    part_expression                shift and go to state 53

state 55

    (61) part_expression -> DOT . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression

    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54
    DOT             shift and go to state 55

    expression                     shift and go to state 86
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47
    part_expression                shift and go to state 53

state 56

    (16) command -> MOVEUP L_QBRACKET . variable R_QBRACKET
    (80) command -> MOVEUP L_QBRACKET . error R_QBRACKET
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    error           shift and go to state 88
    VARIABLE        shift and go to state 42

    variable                       shift and go to state 87

state 57

    (17) command -> MOVEDOWN L_QBRACKET . variable R_QBRACKET
    (81) command -> MOVEDOWN L_QBRACKET . error R_QBRACKET
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    error           shift and go to state 90
    VARIABLE        shift and go to state 42

    variable                       shift and go to state 89

state 58

    (18) command -> MOVERIGHT L_QBRACKET . variable R_QBRACKET
    (82) command -> MOVERIGHT L_QBRACKET . error R_QBRACKET
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    error           shift and go to state 92
    VARIABLE        shift and go to state 42

    variable                       shift and go to state 91

state 59

    (19) command -> MOVELEFT L_QBRACKET . variable R_QBRACKET
    (83) command -> MOVELEFT L_QBRACKET . error R_QBRACKET
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    error           shift and go to state 94
    VARIABLE        shift and go to state 42

    variable                       shift and go to state 93

state 60

    (20) command -> PINGUP L_QBRACKET . variable R_QBRACKET
    (84) command -> PINGUP L_QBRACKET . error R_QBRACKET
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    error           shift and go to state 96
    VARIABLE        shift and go to state 42

    variable                       shift and go to state 95

state 61

    (21) command -> PINGDOWN L_QBRACKET . variable R_QBRACKET
    (85) command -> PINGDOWN L_QBRACKET . error R_QBRACKET
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    error           shift and go to state 98
    VARIABLE        shift and go to state 42

    variable                       shift and go to state 97

state 62

    (22) command -> PINGRIGHT L_QBRACKET . variable R_QBRACKET
    (86) command -> PINGRIGHT L_QBRACKET . error R_QBRACKET
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    error           shift and go to state 100
    VARIABLE        shift and go to state 42

    variable                       shift and go to state 99

state 63

    (23) command -> PINGLEFT L_QBRACKET . variable R_QBRACKET
    (87) command -> PINGLEFT L_QBRACKET . error R_QBRACKET
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    error           shift and go to state 102
    VARIABLE        shift and go to state 42

    variable                       shift and go to state 101

state 64

    (24) command -> VISION L_QBRACKET . variable R_QBRACKET
    (88) command -> VISION L_QBRACKET . error R_QBRACKET
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    error           shift and go to state 104
    VARIABLE        shift and go to state 42

    variable                       shift and go to state 103

state 65

    (25) command -> VOICE L_QBRACKET . expression R_QBRACKET
    (89) command -> VOICE L_QBRACKET . error R_QBRACKET
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression

    error           shift and go to state 106
    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54
    DOT             shift and go to state 55

    expression                     shift and go to state 105
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47
    part_expression                shift and go to state 53

state 66

    (26) procedure -> PROC VARIABLE . L_QBRACKET parameters R_QBRACKET statements_group

    L_QBRACKET      shift and go to state 107


state 67

    (27) call -> VARIABLE L_QBRACKET . variables R_QBRACKET
    (44) variable -> VARIABLE L_QBRACKET . expression R_QBRACKET
    (42) variables -> . expression
    (43) variables -> . expression COMMA variables
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression

    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54
    DOT             shift and go to state 55

    variables                      shift and go to state 108
    expression                     shift and go to state 109
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47
    part_expression                shift and go to state 53

state 68

    (28) record -> RECORD VARIABLE . DATA L_QBRACKET parameters R_QBRACKET
    (29) record -> RECORD VARIABLE . DATA L_QBRACKET parameters R_QBRACKET conversions

    DATA            shift and go to state 110


state 69

    (44) variable -> VARIABLE L_QBRACKET . expression R_QBRACKET
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression

    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54
    DOT             shift and go to state 55

    expression                     shift and go to state 111
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47
    part_expression                shift and go to state 53

state 70

    (39) expression -> variable .
    (13) assignment -> variable . ASSIGNMENT expression
    (14) assignment -> variable . ASSIGNMENT assignment
    (79) assignment -> variable . ASSIGNMENT error

    DOT             reduce using rule 39 (expression -> variable .)
    NEWLINE         reduce using rule 39 (expression -> variable .)
    PLUS            reduce using rule 39 (expression -> variable .)
    MINUS           reduce using rule 39 (expression -> variable .)
    STAR            reduce using rule 39 (expression -> variable .)
    SLASH           reduce using rule 39 (expression -> variable .)
    CARET           reduce using rule 39 (expression -> variable .)
    GREATER         reduce using rule 39 (expression -> variable .)
    LESS            reduce using rule 39 (expression -> variable .)
    EQ              reduce using rule 39 (expression -> variable .)
    NOTEQ           reduce using rule 39 (expression -> variable .)
    ASSIGNMENT      shift and go to state 43


state 71

    (13) assignment -> variable ASSIGNMENT expression .
    (62) part_expression -> expression . DOT
    (63) part_expression -> expression .

    NEWLINE         reduce using rule 13 (assignment -> variable ASSIGNMENT expression .)
    DOT             shift and go to state 75
    PLUS            reduce using rule 63 (part_expression -> expression .)
    MINUS           reduce using rule 63 (part_expression -> expression .)
    STAR            reduce using rule 63 (part_expression -> expression .)
    SLASH           reduce using rule 63 (part_expression -> expression .)
    CARET           reduce using rule 63 (part_expression -> expression .)
    GREATER         reduce using rule 63 (part_expression -> expression .)
    LESS            reduce using rule 63 (part_expression -> expression .)
    EQ              reduce using rule 63 (part_expression -> expression .)
    NOTEQ           reduce using rule 63 (part_expression -> expression .)


state 72

    (14) assignment -> variable ASSIGNMENT assignment .

    NEWLINE         reduce using rule 14 (assignment -> variable ASSIGNMENT assignment .)


state 73

    (79) assignment -> variable ASSIGNMENT error .

    NEWLINE         reduce using rule 79 (assignment -> variable ASSIGNMENT error .)


state 74

    (15) cycle -> L_FBRACKET expression R_FBRACKET . BLOCK inner_statements UNBLOCK

    BLOCK           shift and go to state 112


state 75

    (62) part_expression -> expression DOT .

    PLUS            reduce using rule 62 (part_expression -> expression DOT .)
    MINUS           reduce using rule 62 (part_expression -> expression DOT .)
    STAR            reduce using rule 62 (part_expression -> expression DOT .)
    SLASH           reduce using rule 62 (part_expression -> expression DOT .)
    CARET           reduce using rule 62 (part_expression -> expression DOT .)
    GREATER         reduce using rule 62 (part_expression -> expression DOT .)
    LESS            reduce using rule 62 (part_expression -> expression DOT .)
    EQ              reduce using rule 62 (part_expression -> expression DOT .)
    NOTEQ           reduce using rule 62 (part_expression -> expression DOT .)
    DOT             reduce using rule 62 (part_expression -> expression DOT .)
    R_FBRACKET      reduce using rule 62 (part_expression -> expression DOT .)
    NEWLINE         reduce using rule 62 (part_expression -> expression DOT .)
    R_QBRACKET      reduce using rule 62 (part_expression -> expression DOT .)
    COMMA           reduce using rule 62 (part_expression -> expression DOT .)


state 76

    (51) complex_expression -> part_expression PLUS . part_expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression

    DOT             shift and go to state 55
    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54

    part_expression                shift and go to state 113
    expression                     shift and go to state 114
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47

state 77

    (52) complex_expression -> part_expression MINUS . part_expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression

    DOT             shift and go to state 55
    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54

    part_expression                shift and go to state 115
    expression                     shift and go to state 114
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47

state 78

    (53) complex_expression -> part_expression STAR . part_expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression

    DOT             shift and go to state 55
    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54

    part_expression                shift and go to state 116
    expression                     shift and go to state 114
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47

state 79

    (54) complex_expression -> part_expression SLASH . part_expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression

    DOT             shift and go to state 55
    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54

    part_expression                shift and go to state 117
    expression                     shift and go to state 114
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47

state 80

    (55) complex_expression -> part_expression CARET . part_expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression

    DOT             shift and go to state 55
    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54

    part_expression                shift and go to state 118
    expression                     shift and go to state 114
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47

state 81

    (56) complex_expression -> part_expression GREATER . part_expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression

    DOT             shift and go to state 55
    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54

    part_expression                shift and go to state 119
    expression                     shift and go to state 114
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47

state 82

    (57) complex_expression -> part_expression LESS . part_expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression

    DOT             shift and go to state 55
    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54

    part_expression                shift and go to state 120
    expression                     shift and go to state 114
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47

state 83

    (58) complex_expression -> part_expression EQ . part_expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression

    DOT             shift and go to state 55
    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54

    part_expression                shift and go to state 121
    expression                     shift and go to state 114
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47

state 84

    (59) complex_expression -> part_expression NOTEQ . part_expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression

    DOT             shift and go to state 55
    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54

    part_expression                shift and go to state 122
    expression                     shift and go to state 114
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47

state 85

    (60) complex_expression -> MINUS expression .
    (62) part_expression -> expression . DOT
    (63) part_expression -> expression .

  ! reduce/reduce conflict for PLUS resolved using rule 60 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 60 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for STAR resolved using rule 60 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for SLASH resolved using rule 60 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for CARET resolved using rule 60 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for GREATER resolved using rule 60 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for LESS resolved using rule 60 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for EQ resolved using rule 60 (complex_expression -> MINUS expression .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 60 (complex_expression -> MINUS expression .)
    R_FBRACKET      reduce using rule 60 (complex_expression -> MINUS expression .)
    DOT             reduce using rule 60 (complex_expression -> MINUS expression .)
    PLUS            reduce using rule 60 (complex_expression -> MINUS expression .)
    MINUS           reduce using rule 60 (complex_expression -> MINUS expression .)
    STAR            reduce using rule 60 (complex_expression -> MINUS expression .)
    SLASH           reduce using rule 60 (complex_expression -> MINUS expression .)
    CARET           reduce using rule 60 (complex_expression -> MINUS expression .)
    GREATER         reduce using rule 60 (complex_expression -> MINUS expression .)
    LESS            reduce using rule 60 (complex_expression -> MINUS expression .)
    EQ              reduce using rule 60 (complex_expression -> MINUS expression .)
    NOTEQ           reduce using rule 60 (complex_expression -> MINUS expression .)
    NEWLINE         reduce using rule 60 (complex_expression -> MINUS expression .)
    R_QBRACKET      reduce using rule 60 (complex_expression -> MINUS expression .)
    COMMA           reduce using rule 60 (complex_expression -> MINUS expression .)

  ! DOT             [ shift and go to state 75 ]
  ! PLUS            [ reduce using rule 63 (part_expression -> expression .) ]
  ! MINUS           [ reduce using rule 63 (part_expression -> expression .) ]
  ! STAR            [ reduce using rule 63 (part_expression -> expression .) ]
  ! SLASH           [ reduce using rule 63 (part_expression -> expression .) ]
  ! CARET           [ reduce using rule 63 (part_expression -> expression .) ]
  ! GREATER         [ reduce using rule 63 (part_expression -> expression .) ]
  ! LESS            [ reduce using rule 63 (part_expression -> expression .) ]
  ! EQ              [ reduce using rule 63 (part_expression -> expression .) ]
  ! NOTEQ           [ reduce using rule 63 (part_expression -> expression .) ]


state 86

    (61) part_expression -> DOT expression .
    (62) part_expression -> expression . DOT
    (63) part_expression -> expression .

  ! shift/reduce conflict for DOT resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 61 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for MINUS resolved using rule 61 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for STAR resolved using rule 61 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for SLASH resolved using rule 61 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for CARET resolved using rule 61 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for GREATER resolved using rule 61 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for LESS resolved using rule 61 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for EQ resolved using rule 61 (part_expression -> DOT expression .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 61 (part_expression -> DOT expression .)
    PLUS            reduce using rule 61 (part_expression -> DOT expression .)
    MINUS           reduce using rule 61 (part_expression -> DOT expression .)
    STAR            reduce using rule 61 (part_expression -> DOT expression .)
    SLASH           reduce using rule 61 (part_expression -> DOT expression .)
    CARET           reduce using rule 61 (part_expression -> DOT expression .)
    GREATER         reduce using rule 61 (part_expression -> DOT expression .)
    LESS            reduce using rule 61 (part_expression -> DOT expression .)
    EQ              reduce using rule 61 (part_expression -> DOT expression .)
    NOTEQ           reduce using rule 61 (part_expression -> DOT expression .)
    R_FBRACKET      reduce using rule 61 (part_expression -> DOT expression .)
    NEWLINE         reduce using rule 61 (part_expression -> DOT expression .)
    R_QBRACKET      reduce using rule 61 (part_expression -> DOT expression .)
    COMMA           reduce using rule 61 (part_expression -> DOT expression .)
    DOT             shift and go to state 75

  ! DOT             [ reduce using rule 61 (part_expression -> DOT expression .) ]
  ! PLUS            [ reduce using rule 63 (part_expression -> expression .) ]
  ! MINUS           [ reduce using rule 63 (part_expression -> expression .) ]
  ! STAR            [ reduce using rule 63 (part_expression -> expression .) ]
  ! SLASH           [ reduce using rule 63 (part_expression -> expression .) ]
  ! CARET           [ reduce using rule 63 (part_expression -> expression .) ]
  ! GREATER         [ reduce using rule 63 (part_expression -> expression .) ]
  ! LESS            [ reduce using rule 63 (part_expression -> expression .) ]
  ! EQ              [ reduce using rule 63 (part_expression -> expression .) ]
  ! NOTEQ           [ reduce using rule 63 (part_expression -> expression .) ]


state 87

    (16) command -> MOVEUP L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 123


state 88

    (80) command -> MOVEUP L_QBRACKET error . R_QBRACKET

    R_QBRACKET      shift and go to state 124


state 89

    (17) command -> MOVEDOWN L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 125


state 90

    (81) command -> MOVEDOWN L_QBRACKET error . R_QBRACKET

    R_QBRACKET      shift and go to state 126


state 91

    (18) command -> MOVERIGHT L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 127


state 92

    (82) command -> MOVERIGHT L_QBRACKET error . R_QBRACKET

    R_QBRACKET      shift and go to state 128


state 93

    (19) command -> MOVELEFT L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 129


state 94

    (83) command -> MOVELEFT L_QBRACKET error . R_QBRACKET

    R_QBRACKET      shift and go to state 130


state 95

    (20) command -> PINGUP L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 131


state 96

    (84) command -> PINGUP L_QBRACKET error . R_QBRACKET

    R_QBRACKET      shift and go to state 132


state 97

    (21) command -> PINGDOWN L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 133


state 98

    (85) command -> PINGDOWN L_QBRACKET error . R_QBRACKET

    R_QBRACKET      shift and go to state 134


state 99

    (22) command -> PINGRIGHT L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 135


state 100

    (86) command -> PINGRIGHT L_QBRACKET error . R_QBRACKET

    R_QBRACKET      shift and go to state 136


state 101

    (23) command -> PINGLEFT L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 137


state 102

    (87) command -> PINGLEFT L_QBRACKET error . R_QBRACKET

    R_QBRACKET      shift and go to state 138


state 103

    (24) command -> VISION L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 139


state 104

    (88) command -> VISION L_QBRACKET error . R_QBRACKET

    R_QBRACKET      shift and go to state 140


state 105

    (25) command -> VOICE L_QBRACKET expression . R_QBRACKET
    (62) part_expression -> expression . DOT
    (63) part_expression -> expression .

    R_QBRACKET      shift and go to state 141
    DOT             shift and go to state 75
    PLUS            reduce using rule 63 (part_expression -> expression .)
    MINUS           reduce using rule 63 (part_expression -> expression .)
    STAR            reduce using rule 63 (part_expression -> expression .)
    SLASH           reduce using rule 63 (part_expression -> expression .)
    CARET           reduce using rule 63 (part_expression -> expression .)
    GREATER         reduce using rule 63 (part_expression -> expression .)
    LESS            reduce using rule 63 (part_expression -> expression .)
    EQ              reduce using rule 63 (part_expression -> expression .)
    NOTEQ           reduce using rule 63 (part_expression -> expression .)


state 106

    (89) command -> VOICE L_QBRACKET error . R_QBRACKET

    R_QBRACKET      shift and go to state 142


state 107

    (26) procedure -> PROC VARIABLE L_QBRACKET . parameters R_QBRACKET statements_group
    (64) parameters -> . parameter COMMA parameters
    (65) parameters -> . parameter
    (66) parameter -> . type VARIABLE AMPERSAND
    (67) parameter -> . type VARIABLE
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE

    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31
    VARIABLE        shift and go to state 143

    parameters                     shift and go to state 144
    parameter                      shift and go to state 145
    type                           shift and go to state 146

state 108

    (27) call -> VARIABLE L_QBRACKET variables . R_QBRACKET

    R_QBRACKET      shift and go to state 147


state 109

    (44) variable -> VARIABLE L_QBRACKET expression . R_QBRACKET
    (42) variables -> expression .
    (43) variables -> expression . COMMA variables
    (62) part_expression -> expression . DOT
    (63) part_expression -> expression .

  ! shift/reduce conflict for R_QBRACKET resolved as shift
    R_QBRACKET      shift and go to state 148
    COMMA           shift and go to state 149
    DOT             shift and go to state 75
    PLUS            reduce using rule 63 (part_expression -> expression .)
    MINUS           reduce using rule 63 (part_expression -> expression .)
    STAR            reduce using rule 63 (part_expression -> expression .)
    SLASH           reduce using rule 63 (part_expression -> expression .)
    CARET           reduce using rule 63 (part_expression -> expression .)
    GREATER         reduce using rule 63 (part_expression -> expression .)
    LESS            reduce using rule 63 (part_expression -> expression .)
    EQ              reduce using rule 63 (part_expression -> expression .)
    NOTEQ           reduce using rule 63 (part_expression -> expression .)

  ! R_QBRACKET      [ reduce using rule 42 (variables -> expression .) ]


state 110

    (28) record -> RECORD VARIABLE DATA . L_QBRACKET parameters R_QBRACKET
    (29) record -> RECORD VARIABLE DATA . L_QBRACKET parameters R_QBRACKET conversions

    L_QBRACKET      shift and go to state 150


state 111

    (44) variable -> VARIABLE L_QBRACKET expression . R_QBRACKET
    (62) part_expression -> expression . DOT
    (63) part_expression -> expression .

    R_QBRACKET      shift and go to state 148
    DOT             shift and go to state 75
    PLUS            reduce using rule 63 (part_expression -> expression .)
    MINUS           reduce using rule 63 (part_expression -> expression .)
    STAR            reduce using rule 63 (part_expression -> expression .)
    SLASH           reduce using rule 63 (part_expression -> expression .)
    CARET           reduce using rule 63 (part_expression -> expression .)
    GREATER         reduce using rule 63 (part_expression -> expression .)
    LESS            reduce using rule 63 (part_expression -> expression .)
    EQ              reduce using rule 63 (part_expression -> expression .)
    NOTEQ           reduce using rule 63 (part_expression -> expression .)


state 112

    (15) cycle -> L_FBRACKET expression R_FBRACKET BLOCK . inner_statements UNBLOCK
    (70) inner_statements -> . inner_statement inner_statements
    (71) inner_statements -> . inner_statement
    (72) inner_statement -> . declaration NEWLINE
    (73) inner_statement -> . assignment NEWLINE
    (74) inner_statement -> . cycle NEWLINE
    (75) inner_statement -> . command NEWLINE
    (76) inner_statement -> . call NEWLINE
    (77) inner_statement -> . empty NEWLINE
    (12) declaration -> . type variable
    (13) assignment -> . variable ASSIGNMENT expression
    (14) assignment -> . variable ASSIGNMENT assignment
    (79) assignment -> . variable ASSIGNMENT error
    (15) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (16) command -> . MOVEUP L_QBRACKET variable R_QBRACKET
    (17) command -> . MOVEDOWN L_QBRACKET variable R_QBRACKET
    (18) command -> . MOVERIGHT L_QBRACKET variable R_QBRACKET
    (19) command -> . MOVELEFT L_QBRACKET variable R_QBRACKET
    (20) command -> . PINGUP L_QBRACKET variable R_QBRACKET
    (21) command -> . PINGDOWN L_QBRACKET variable R_QBRACKET
    (22) command -> . PINGRIGHT L_QBRACKET variable R_QBRACKET
    (23) command -> . PINGLEFT L_QBRACKET variable R_QBRACKET
    (24) command -> . VISION L_QBRACKET variable R_QBRACKET
    (25) command -> . VOICE L_QBRACKET expression R_QBRACKET
    (80) command -> . MOVEUP L_QBRACKET error R_QBRACKET
    (81) command -> . MOVEDOWN L_QBRACKET error R_QBRACKET
    (82) command -> . MOVERIGHT L_QBRACKET error R_QBRACKET
    (83) command -> . MOVELEFT L_QBRACKET error R_QBRACKET
    (84) command -> . PINGUP L_QBRACKET error R_QBRACKET
    (85) command -> . PINGDOWN L_QBRACKET error R_QBRACKET
    (86) command -> . PINGRIGHT L_QBRACKET error R_QBRACKET
    (87) command -> . PINGLEFT L_QBRACKET error R_QBRACKET
    (88) command -> . VISION L_QBRACKET error R_QBRACKET
    (89) command -> . VOICE L_QBRACKET error R_QBRACKET
    (27) call -> . VARIABLE L_QBRACKET variables R_QBRACKET
    (34) empty -> .
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    L_FBRACKET      shift and go to state 15
    MOVEUP          shift and go to state 16
    MOVEDOWN        shift and go to state 17
    MOVERIGHT       shift and go to state 18
    MOVELEFT        shift and go to state 19
    PINGUP          shift and go to state 20
    PINGDOWN        shift and go to state 21
    PINGRIGHT       shift and go to state 22
    PINGLEFT        shift and go to state 23
    VISION          shift and go to state 24
    VOICE           shift and go to state 25
    VARIABLE        shift and go to state 27
    NEWLINE         reduce using rule 34 (empty -> .)
    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31

    inner_statements               shift and go to state 151
    inner_statement                shift and go to state 152
    declaration                    shift and go to state 153
    assignment                     shift and go to state 154
    cycle                          shift and go to state 155
    command                        shift and go to state 156
    call                           shift and go to state 157
    empty                          shift and go to state 158
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 113

    (51) complex_expression -> part_expression PLUS part_expression .
    (51) complex_expression -> part_expression . PLUS part_expression
    (52) complex_expression -> part_expression . MINUS part_expression
    (53) complex_expression -> part_expression . STAR part_expression
    (54) complex_expression -> part_expression . SLASH part_expression
    (55) complex_expression -> part_expression . CARET part_expression
    (56) complex_expression -> part_expression . GREATER part_expression
    (57) complex_expression -> part_expression . LESS part_expression
    (58) complex_expression -> part_expression . EQ part_expression
    (59) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .)
    DOT             reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .)
    PLUS            reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .)
    MINUS           reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .)
    GREATER         reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .)
    LESS            reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .)
    EQ              reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .)
    NOTEQ           reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .)
    NEWLINE         reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .)
    R_QBRACKET      reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .)
    COMMA           reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .)
    STAR            shift and go to state 78
    SLASH           shift and go to state 79
    CARET           shift and go to state 80

  ! STAR            [ reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .) ]
  ! SLASH           [ reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .) ]
  ! CARET           [ reduce using rule 51 (complex_expression -> part_expression PLUS part_expression .) ]
  ! PLUS            [ shift and go to state 76 ]
  ! MINUS           [ shift and go to state 77 ]
  ! GREATER         [ shift and go to state 81 ]
  ! LESS            [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NOTEQ           [ shift and go to state 84 ]


state 114

    (62) part_expression -> expression . DOT
    (63) part_expression -> expression .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 75
    R_FBRACKET      reduce using rule 63 (part_expression -> expression .)
    PLUS            reduce using rule 63 (part_expression -> expression .)
    MINUS           reduce using rule 63 (part_expression -> expression .)
    STAR            reduce using rule 63 (part_expression -> expression .)
    SLASH           reduce using rule 63 (part_expression -> expression .)
    CARET           reduce using rule 63 (part_expression -> expression .)
    GREATER         reduce using rule 63 (part_expression -> expression .)
    LESS            reduce using rule 63 (part_expression -> expression .)
    EQ              reduce using rule 63 (part_expression -> expression .)
    NOTEQ           reduce using rule 63 (part_expression -> expression .)
    NEWLINE         reduce using rule 63 (part_expression -> expression .)
    R_QBRACKET      reduce using rule 63 (part_expression -> expression .)
    COMMA           reduce using rule 63 (part_expression -> expression .)

  ! DOT             [ reduce using rule 63 (part_expression -> expression .) ]


state 115

    (52) complex_expression -> part_expression MINUS part_expression .
    (51) complex_expression -> part_expression . PLUS part_expression
    (52) complex_expression -> part_expression . MINUS part_expression
    (53) complex_expression -> part_expression . STAR part_expression
    (54) complex_expression -> part_expression . SLASH part_expression
    (55) complex_expression -> part_expression . CARET part_expression
    (56) complex_expression -> part_expression . GREATER part_expression
    (57) complex_expression -> part_expression . LESS part_expression
    (58) complex_expression -> part_expression . EQ part_expression
    (59) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .)
    DOT             reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .)
    PLUS            reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .)
    MINUS           reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .)
    GREATER         reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .)
    LESS            reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .)
    EQ              reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .)
    NOTEQ           reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .)
    NEWLINE         reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .)
    R_QBRACKET      reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .)
    COMMA           reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .)
    STAR            shift and go to state 78
    SLASH           shift and go to state 79
    CARET           shift and go to state 80

  ! STAR            [ reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .) ]
  ! SLASH           [ reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .) ]
  ! CARET           [ reduce using rule 52 (complex_expression -> part_expression MINUS part_expression .) ]
  ! PLUS            [ shift and go to state 76 ]
  ! MINUS           [ shift and go to state 77 ]
  ! GREATER         [ shift and go to state 81 ]
  ! LESS            [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NOTEQ           [ shift and go to state 84 ]


state 116

    (53) complex_expression -> part_expression STAR part_expression .
    (51) complex_expression -> part_expression . PLUS part_expression
    (52) complex_expression -> part_expression . MINUS part_expression
    (53) complex_expression -> part_expression . STAR part_expression
    (54) complex_expression -> part_expression . SLASH part_expression
    (55) complex_expression -> part_expression . CARET part_expression
    (56) complex_expression -> part_expression . GREATER part_expression
    (57) complex_expression -> part_expression . LESS part_expression
    (58) complex_expression -> part_expression . EQ part_expression
    (59) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 53 (complex_expression -> part_expression STAR part_expression .)
    DOT             reduce using rule 53 (complex_expression -> part_expression STAR part_expression .)
    PLUS            reduce using rule 53 (complex_expression -> part_expression STAR part_expression .)
    MINUS           reduce using rule 53 (complex_expression -> part_expression STAR part_expression .)
    STAR            reduce using rule 53 (complex_expression -> part_expression STAR part_expression .)
    SLASH           reduce using rule 53 (complex_expression -> part_expression STAR part_expression .)
    GREATER         reduce using rule 53 (complex_expression -> part_expression STAR part_expression .)
    LESS            reduce using rule 53 (complex_expression -> part_expression STAR part_expression .)
    EQ              reduce using rule 53 (complex_expression -> part_expression STAR part_expression .)
    NOTEQ           reduce using rule 53 (complex_expression -> part_expression STAR part_expression .)
    NEWLINE         reduce using rule 53 (complex_expression -> part_expression STAR part_expression .)
    R_QBRACKET      reduce using rule 53 (complex_expression -> part_expression STAR part_expression .)
    COMMA           reduce using rule 53 (complex_expression -> part_expression STAR part_expression .)
    CARET           shift and go to state 80

  ! CARET           [ reduce using rule 53 (complex_expression -> part_expression STAR part_expression .) ]
  ! PLUS            [ shift and go to state 76 ]
  ! MINUS           [ shift and go to state 77 ]
  ! STAR            [ shift and go to state 78 ]
  ! SLASH           [ shift and go to state 79 ]
  ! GREATER         [ shift and go to state 81 ]
  ! LESS            [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NOTEQ           [ shift and go to state 84 ]


state 117

    (54) complex_expression -> part_expression SLASH part_expression .
    (51) complex_expression -> part_expression . PLUS part_expression
    (52) complex_expression -> part_expression . MINUS part_expression
    (53) complex_expression -> part_expression . STAR part_expression
    (54) complex_expression -> part_expression . SLASH part_expression
    (55) complex_expression -> part_expression . CARET part_expression
    (56) complex_expression -> part_expression . GREATER part_expression
    (57) complex_expression -> part_expression . LESS part_expression
    (58) complex_expression -> part_expression . EQ part_expression
    (59) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .)
    DOT             reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .)
    PLUS            reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .)
    MINUS           reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .)
    STAR            reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .)
    SLASH           reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .)
    GREATER         reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .)
    LESS            reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .)
    EQ              reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .)
    NOTEQ           reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .)
    NEWLINE         reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .)
    R_QBRACKET      reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .)
    COMMA           reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .)
    CARET           shift and go to state 80

  ! CARET           [ reduce using rule 54 (complex_expression -> part_expression SLASH part_expression .) ]
  ! PLUS            [ shift and go to state 76 ]
  ! MINUS           [ shift and go to state 77 ]
  ! STAR            [ shift and go to state 78 ]
  ! SLASH           [ shift and go to state 79 ]
  ! GREATER         [ shift and go to state 81 ]
  ! LESS            [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NOTEQ           [ shift and go to state 84 ]


state 118

    (55) complex_expression -> part_expression CARET part_expression .
    (51) complex_expression -> part_expression . PLUS part_expression
    (52) complex_expression -> part_expression . MINUS part_expression
    (53) complex_expression -> part_expression . STAR part_expression
    (54) complex_expression -> part_expression . SLASH part_expression
    (55) complex_expression -> part_expression . CARET part_expression
    (56) complex_expression -> part_expression . GREATER part_expression
    (57) complex_expression -> part_expression . LESS part_expression
    (58) complex_expression -> part_expression . EQ part_expression
    (59) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 55 (complex_expression -> part_expression CARET part_expression .)
    DOT             reduce using rule 55 (complex_expression -> part_expression CARET part_expression .)
    PLUS            reduce using rule 55 (complex_expression -> part_expression CARET part_expression .)
    MINUS           reduce using rule 55 (complex_expression -> part_expression CARET part_expression .)
    STAR            reduce using rule 55 (complex_expression -> part_expression CARET part_expression .)
    SLASH           reduce using rule 55 (complex_expression -> part_expression CARET part_expression .)
    GREATER         reduce using rule 55 (complex_expression -> part_expression CARET part_expression .)
    LESS            reduce using rule 55 (complex_expression -> part_expression CARET part_expression .)
    EQ              reduce using rule 55 (complex_expression -> part_expression CARET part_expression .)
    NOTEQ           reduce using rule 55 (complex_expression -> part_expression CARET part_expression .)
    NEWLINE         reduce using rule 55 (complex_expression -> part_expression CARET part_expression .)
    R_QBRACKET      reduce using rule 55 (complex_expression -> part_expression CARET part_expression .)
    COMMA           reduce using rule 55 (complex_expression -> part_expression CARET part_expression .)
    CARET           shift and go to state 80

  ! CARET           [ reduce using rule 55 (complex_expression -> part_expression CARET part_expression .) ]
  ! PLUS            [ shift and go to state 76 ]
  ! MINUS           [ shift and go to state 77 ]
  ! STAR            [ shift and go to state 78 ]
  ! SLASH           [ shift and go to state 79 ]
  ! GREATER         [ shift and go to state 81 ]
  ! LESS            [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NOTEQ           [ shift and go to state 84 ]


state 119

    (56) complex_expression -> part_expression GREATER part_expression .
    (51) complex_expression -> part_expression . PLUS part_expression
    (52) complex_expression -> part_expression . MINUS part_expression
    (53) complex_expression -> part_expression . STAR part_expression
    (54) complex_expression -> part_expression . SLASH part_expression
    (55) complex_expression -> part_expression . CARET part_expression
    (56) complex_expression -> part_expression . GREATER part_expression
    (57) complex_expression -> part_expression . LESS part_expression
    (58) complex_expression -> part_expression . EQ part_expression
    (59) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .)
    DOT             reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .)
    GREATER         reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .)
    LESS            reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .)
    EQ              reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .)
    NOTEQ           reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .)
    NEWLINE         reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .)
    R_QBRACKET      reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .)
    COMMA           reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    STAR            shift and go to state 78
    SLASH           shift and go to state 79
    CARET           shift and go to state 80

  ! PLUS            [ reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .) ]
  ! MINUS           [ reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .) ]
  ! STAR            [ reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .) ]
  ! SLASH           [ reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .) ]
  ! CARET           [ reduce using rule 56 (complex_expression -> part_expression GREATER part_expression .) ]
  ! GREATER         [ shift and go to state 81 ]
  ! LESS            [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NOTEQ           [ shift and go to state 84 ]


state 120

    (57) complex_expression -> part_expression LESS part_expression .
    (51) complex_expression -> part_expression . PLUS part_expression
    (52) complex_expression -> part_expression . MINUS part_expression
    (53) complex_expression -> part_expression . STAR part_expression
    (54) complex_expression -> part_expression . SLASH part_expression
    (55) complex_expression -> part_expression . CARET part_expression
    (56) complex_expression -> part_expression . GREATER part_expression
    (57) complex_expression -> part_expression . LESS part_expression
    (58) complex_expression -> part_expression . EQ part_expression
    (59) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 57 (complex_expression -> part_expression LESS part_expression .)
    DOT             reduce using rule 57 (complex_expression -> part_expression LESS part_expression .)
    GREATER         reduce using rule 57 (complex_expression -> part_expression LESS part_expression .)
    LESS            reduce using rule 57 (complex_expression -> part_expression LESS part_expression .)
    EQ              reduce using rule 57 (complex_expression -> part_expression LESS part_expression .)
    NOTEQ           reduce using rule 57 (complex_expression -> part_expression LESS part_expression .)
    NEWLINE         reduce using rule 57 (complex_expression -> part_expression LESS part_expression .)
    R_QBRACKET      reduce using rule 57 (complex_expression -> part_expression LESS part_expression .)
    COMMA           reduce using rule 57 (complex_expression -> part_expression LESS part_expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    STAR            shift and go to state 78
    SLASH           shift and go to state 79
    CARET           shift and go to state 80

  ! PLUS            [ reduce using rule 57 (complex_expression -> part_expression LESS part_expression .) ]
  ! MINUS           [ reduce using rule 57 (complex_expression -> part_expression LESS part_expression .) ]
  ! STAR            [ reduce using rule 57 (complex_expression -> part_expression LESS part_expression .) ]
  ! SLASH           [ reduce using rule 57 (complex_expression -> part_expression LESS part_expression .) ]
  ! CARET           [ reduce using rule 57 (complex_expression -> part_expression LESS part_expression .) ]
  ! GREATER         [ shift and go to state 81 ]
  ! LESS            [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NOTEQ           [ shift and go to state 84 ]


state 121

    (58) complex_expression -> part_expression EQ part_expression .
    (51) complex_expression -> part_expression . PLUS part_expression
    (52) complex_expression -> part_expression . MINUS part_expression
    (53) complex_expression -> part_expression . STAR part_expression
    (54) complex_expression -> part_expression . SLASH part_expression
    (55) complex_expression -> part_expression . CARET part_expression
    (56) complex_expression -> part_expression . GREATER part_expression
    (57) complex_expression -> part_expression . LESS part_expression
    (58) complex_expression -> part_expression . EQ part_expression
    (59) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 58 (complex_expression -> part_expression EQ part_expression .)
    DOT             reduce using rule 58 (complex_expression -> part_expression EQ part_expression .)
    GREATER         reduce using rule 58 (complex_expression -> part_expression EQ part_expression .)
    LESS            reduce using rule 58 (complex_expression -> part_expression EQ part_expression .)
    EQ              reduce using rule 58 (complex_expression -> part_expression EQ part_expression .)
    NOTEQ           reduce using rule 58 (complex_expression -> part_expression EQ part_expression .)
    NEWLINE         reduce using rule 58 (complex_expression -> part_expression EQ part_expression .)
    R_QBRACKET      reduce using rule 58 (complex_expression -> part_expression EQ part_expression .)
    COMMA           reduce using rule 58 (complex_expression -> part_expression EQ part_expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    STAR            shift and go to state 78
    SLASH           shift and go to state 79
    CARET           shift and go to state 80

  ! PLUS            [ reduce using rule 58 (complex_expression -> part_expression EQ part_expression .) ]
  ! MINUS           [ reduce using rule 58 (complex_expression -> part_expression EQ part_expression .) ]
  ! STAR            [ reduce using rule 58 (complex_expression -> part_expression EQ part_expression .) ]
  ! SLASH           [ reduce using rule 58 (complex_expression -> part_expression EQ part_expression .) ]
  ! CARET           [ reduce using rule 58 (complex_expression -> part_expression EQ part_expression .) ]
  ! GREATER         [ shift and go to state 81 ]
  ! LESS            [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NOTEQ           [ shift and go to state 84 ]


state 122

    (59) complex_expression -> part_expression NOTEQ part_expression .
    (51) complex_expression -> part_expression . PLUS part_expression
    (52) complex_expression -> part_expression . MINUS part_expression
    (53) complex_expression -> part_expression . STAR part_expression
    (54) complex_expression -> part_expression . SLASH part_expression
    (55) complex_expression -> part_expression . CARET part_expression
    (56) complex_expression -> part_expression . GREATER part_expression
    (57) complex_expression -> part_expression . LESS part_expression
    (58) complex_expression -> part_expression . EQ part_expression
    (59) complex_expression -> part_expression . NOTEQ part_expression

    R_FBRACKET      reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .)
    DOT             reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .)
    GREATER         reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .)
    LESS            reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .)
    EQ              reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .)
    NOTEQ           reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .)
    NEWLINE         reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .)
    R_QBRACKET      reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .)
    COMMA           reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    STAR            shift and go to state 78
    SLASH           shift and go to state 79
    CARET           shift and go to state 80

  ! PLUS            [ reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .) ]
  ! MINUS           [ reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .) ]
  ! STAR            [ reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .) ]
  ! SLASH           [ reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .) ]
  ! CARET           [ reduce using rule 59 (complex_expression -> part_expression NOTEQ part_expression .) ]
  ! GREATER         [ shift and go to state 81 ]
  ! LESS            [ shift and go to state 82 ]
  ! EQ              [ shift and go to state 83 ]
  ! NOTEQ           [ shift and go to state 84 ]


state 123

    (16) command -> MOVEUP L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 16 (command -> MOVEUP L_QBRACKET variable R_QBRACKET .)


state 124

    (80) command -> MOVEUP L_QBRACKET error R_QBRACKET .

    NEWLINE         reduce using rule 80 (command -> MOVEUP L_QBRACKET error R_QBRACKET .)


state 125

    (17) command -> MOVEDOWN L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 17 (command -> MOVEDOWN L_QBRACKET variable R_QBRACKET .)


state 126

    (81) command -> MOVEDOWN L_QBRACKET error R_QBRACKET .

    NEWLINE         reduce using rule 81 (command -> MOVEDOWN L_QBRACKET error R_QBRACKET .)


state 127

    (18) command -> MOVERIGHT L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 18 (command -> MOVERIGHT L_QBRACKET variable R_QBRACKET .)


state 128

    (82) command -> MOVERIGHT L_QBRACKET error R_QBRACKET .

    NEWLINE         reduce using rule 82 (command -> MOVERIGHT L_QBRACKET error R_QBRACKET .)


state 129

    (19) command -> MOVELEFT L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 19 (command -> MOVELEFT L_QBRACKET variable R_QBRACKET .)


state 130

    (83) command -> MOVELEFT L_QBRACKET error R_QBRACKET .

    NEWLINE         reduce using rule 83 (command -> MOVELEFT L_QBRACKET error R_QBRACKET .)


state 131

    (20) command -> PINGUP L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 20 (command -> PINGUP L_QBRACKET variable R_QBRACKET .)


state 132

    (84) command -> PINGUP L_QBRACKET error R_QBRACKET .

    NEWLINE         reduce using rule 84 (command -> PINGUP L_QBRACKET error R_QBRACKET .)


state 133

    (21) command -> PINGDOWN L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 21 (command -> PINGDOWN L_QBRACKET variable R_QBRACKET .)


state 134

    (85) command -> PINGDOWN L_QBRACKET error R_QBRACKET .

    NEWLINE         reduce using rule 85 (command -> PINGDOWN L_QBRACKET error R_QBRACKET .)


state 135

    (22) command -> PINGRIGHT L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 22 (command -> PINGRIGHT L_QBRACKET variable R_QBRACKET .)


state 136

    (86) command -> PINGRIGHT L_QBRACKET error R_QBRACKET .

    NEWLINE         reduce using rule 86 (command -> PINGRIGHT L_QBRACKET error R_QBRACKET .)


state 137

    (23) command -> PINGLEFT L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 23 (command -> PINGLEFT L_QBRACKET variable R_QBRACKET .)


state 138

    (87) command -> PINGLEFT L_QBRACKET error R_QBRACKET .

    NEWLINE         reduce using rule 87 (command -> PINGLEFT L_QBRACKET error R_QBRACKET .)


state 139

    (24) command -> VISION L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 24 (command -> VISION L_QBRACKET variable R_QBRACKET .)


state 140

    (88) command -> VISION L_QBRACKET error R_QBRACKET .

    NEWLINE         reduce using rule 88 (command -> VISION L_QBRACKET error R_QBRACKET .)


state 141

    (25) command -> VOICE L_QBRACKET expression R_QBRACKET .

    NEWLINE         reduce using rule 25 (command -> VOICE L_QBRACKET expression R_QBRACKET .)


state 142

    (89) command -> VOICE L_QBRACKET error R_QBRACKET .

    NEWLINE         reduce using rule 89 (command -> VOICE L_QBRACKET error R_QBRACKET .)


state 143

    (38) type -> VARIABLE .

    VARIABLE        reduce using rule 38 (type -> VARIABLE .)


state 144

    (26) procedure -> PROC VARIABLE L_QBRACKET parameters . R_QBRACKET statements_group

    R_QBRACKET      shift and go to state 159


state 145

    (64) parameters -> parameter . COMMA parameters
    (65) parameters -> parameter .

    COMMA           shift and go to state 160
    R_QBRACKET      reduce using rule 65 (parameters -> parameter .)


state 146

    (66) parameter -> type . VARIABLE AMPERSAND
    (67) parameter -> type . VARIABLE

    VARIABLE        shift and go to state 161


state 147

    (27) call -> VARIABLE L_QBRACKET variables R_QBRACKET .

    NEWLINE         reduce using rule 27 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)


state 148

    (44) variable -> VARIABLE L_QBRACKET expression R_QBRACKET .

    ASSIGNMENT      reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    NEWLINE         reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    R_FBRACKET      reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    DOT             reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    PLUS            reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    MINUS           reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    STAR            reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    SLASH           reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    CARET           reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    GREATER         reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    LESS            reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    EQ              reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    NOTEQ           reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    R_QBRACKET      reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    COMMA           reduce using rule 44 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)


state 149

    (43) variables -> expression COMMA . variables
    (42) variables -> . expression
    (43) variables -> . expression COMMA variables
    (39) expression -> . variable
    (40) expression -> . const
    (41) expression -> . complex_expression
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE
    (46) const -> . TRUE
    (47) const -> . FALSE
    (48) const -> . UNDEF
    (49) const -> . DECIMAL
    (50) const -> . TEXT
    (51) complex_expression -> . part_expression PLUS part_expression
    (52) complex_expression -> . part_expression MINUS part_expression
    (53) complex_expression -> . part_expression STAR part_expression
    (54) complex_expression -> . part_expression SLASH part_expression
    (55) complex_expression -> . part_expression CARET part_expression
    (56) complex_expression -> . part_expression GREATER part_expression
    (57) complex_expression -> . part_expression LESS part_expression
    (58) complex_expression -> . part_expression EQ part_expression
    (59) complex_expression -> . part_expression NOTEQ part_expression
    (60) complex_expression -> . MINUS expression
    (61) part_expression -> . DOT expression
    (62) part_expression -> . expression DOT
    (63) part_expression -> . expression

    VARIABLE        shift and go to state 42
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49
    UNDEF           shift and go to state 50
    DECIMAL         shift and go to state 51
    TEXT            shift and go to state 52
    MINUS           shift and go to state 54
    DOT             shift and go to state 55

    expression                     shift and go to state 162
    variables                      shift and go to state 163
    variable                       shift and go to state 45
    const                          shift and go to state 46
    complex_expression             shift and go to state 47
    part_expression                shift and go to state 53

state 150

    (28) record -> RECORD VARIABLE DATA L_QBRACKET . parameters R_QBRACKET
    (29) record -> RECORD VARIABLE DATA L_QBRACKET . parameters R_QBRACKET conversions
    (64) parameters -> . parameter COMMA parameters
    (65) parameters -> . parameter
    (66) parameter -> . type VARIABLE AMPERSAND
    (67) parameter -> . type VARIABLE
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE

    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31
    VARIABLE        shift and go to state 143

    parameters                     shift and go to state 164
    parameter                      shift and go to state 145
    type                           shift and go to state 146

state 151

    (15) cycle -> L_FBRACKET expression R_FBRACKET BLOCK inner_statements . UNBLOCK

    UNBLOCK         shift and go to state 165


state 152

    (70) inner_statements -> inner_statement . inner_statements
    (71) inner_statements -> inner_statement .
    (70) inner_statements -> . inner_statement inner_statements
    (71) inner_statements -> . inner_statement
    (72) inner_statement -> . declaration NEWLINE
    (73) inner_statement -> . assignment NEWLINE
    (74) inner_statement -> . cycle NEWLINE
    (75) inner_statement -> . command NEWLINE
    (76) inner_statement -> . call NEWLINE
    (77) inner_statement -> . empty NEWLINE
    (12) declaration -> . type variable
    (13) assignment -> . variable ASSIGNMENT expression
    (14) assignment -> . variable ASSIGNMENT assignment
    (79) assignment -> . variable ASSIGNMENT error
    (15) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (16) command -> . MOVEUP L_QBRACKET variable R_QBRACKET
    (17) command -> . MOVEDOWN L_QBRACKET variable R_QBRACKET
    (18) command -> . MOVERIGHT L_QBRACKET variable R_QBRACKET
    (19) command -> . MOVELEFT L_QBRACKET variable R_QBRACKET
    (20) command -> . PINGUP L_QBRACKET variable R_QBRACKET
    (21) command -> . PINGDOWN L_QBRACKET variable R_QBRACKET
    (22) command -> . PINGRIGHT L_QBRACKET variable R_QBRACKET
    (23) command -> . PINGLEFT L_QBRACKET variable R_QBRACKET
    (24) command -> . VISION L_QBRACKET variable R_QBRACKET
    (25) command -> . VOICE L_QBRACKET expression R_QBRACKET
    (80) command -> . MOVEUP L_QBRACKET error R_QBRACKET
    (81) command -> . MOVEDOWN L_QBRACKET error R_QBRACKET
    (82) command -> . MOVERIGHT L_QBRACKET error R_QBRACKET
    (83) command -> . MOVELEFT L_QBRACKET error R_QBRACKET
    (84) command -> . PINGUP L_QBRACKET error R_QBRACKET
    (85) command -> . PINGDOWN L_QBRACKET error R_QBRACKET
    (86) command -> . PINGRIGHT L_QBRACKET error R_QBRACKET
    (87) command -> . PINGLEFT L_QBRACKET error R_QBRACKET
    (88) command -> . VISION L_QBRACKET error R_QBRACKET
    (89) command -> . VOICE L_QBRACKET error R_QBRACKET
    (27) call -> . VARIABLE L_QBRACKET variables R_QBRACKET
    (34) empty -> .
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    UNBLOCK         reduce using rule 71 (inner_statements -> inner_statement .)
    L_FBRACKET      shift and go to state 15
    MOVEUP          shift and go to state 16
    MOVEDOWN        shift and go to state 17
    MOVERIGHT       shift and go to state 18
    MOVELEFT        shift and go to state 19
    PINGUP          shift and go to state 20
    PINGDOWN        shift and go to state 21
    PINGRIGHT       shift and go to state 22
    PINGLEFT        shift and go to state 23
    VISION          shift and go to state 24
    VOICE           shift and go to state 25
    VARIABLE        shift and go to state 27
    NEWLINE         reduce using rule 34 (empty -> .)
    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31

    inner_statement                shift and go to state 152
    inner_statements               shift and go to state 166
    declaration                    shift and go to state 153
    assignment                     shift and go to state 154
    cycle                          shift and go to state 155
    command                        shift and go to state 156
    call                           shift and go to state 157
    empty                          shift and go to state 158
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 153

    (72) inner_statement -> declaration . NEWLINE

    NEWLINE         shift and go to state 167


state 154

    (73) inner_statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 168


state 155

    (74) inner_statement -> cycle . NEWLINE

    NEWLINE         shift and go to state 169


state 156

    (75) inner_statement -> command . NEWLINE

    NEWLINE         shift and go to state 170


state 157

    (76) inner_statement -> call . NEWLINE

    NEWLINE         shift and go to state 171


state 158

    (77) inner_statement -> empty . NEWLINE

    NEWLINE         shift and go to state 172


state 159

    (26) procedure -> PROC VARIABLE L_QBRACKET parameters R_QBRACKET . statements_group
    (68) statements_group -> . BLOCK inner_statements UNBLOCK
    (69) statements_group -> . inner_statement
    (72) inner_statement -> . declaration NEWLINE
    (73) inner_statement -> . assignment NEWLINE
    (74) inner_statement -> . cycle NEWLINE
    (75) inner_statement -> . command NEWLINE
    (76) inner_statement -> . call NEWLINE
    (77) inner_statement -> . empty NEWLINE
    (12) declaration -> . type variable
    (13) assignment -> . variable ASSIGNMENT expression
    (14) assignment -> . variable ASSIGNMENT assignment
    (79) assignment -> . variable ASSIGNMENT error
    (15) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (16) command -> . MOVEUP L_QBRACKET variable R_QBRACKET
    (17) command -> . MOVEDOWN L_QBRACKET variable R_QBRACKET
    (18) command -> . MOVERIGHT L_QBRACKET variable R_QBRACKET
    (19) command -> . MOVELEFT L_QBRACKET variable R_QBRACKET
    (20) command -> . PINGUP L_QBRACKET variable R_QBRACKET
    (21) command -> . PINGDOWN L_QBRACKET variable R_QBRACKET
    (22) command -> . PINGRIGHT L_QBRACKET variable R_QBRACKET
    (23) command -> . PINGLEFT L_QBRACKET variable R_QBRACKET
    (24) command -> . VISION L_QBRACKET variable R_QBRACKET
    (25) command -> . VOICE L_QBRACKET expression R_QBRACKET
    (80) command -> . MOVEUP L_QBRACKET error R_QBRACKET
    (81) command -> . MOVEDOWN L_QBRACKET error R_QBRACKET
    (82) command -> . MOVERIGHT L_QBRACKET error R_QBRACKET
    (83) command -> . MOVELEFT L_QBRACKET error R_QBRACKET
    (84) command -> . PINGUP L_QBRACKET error R_QBRACKET
    (85) command -> . PINGDOWN L_QBRACKET error R_QBRACKET
    (86) command -> . PINGRIGHT L_QBRACKET error R_QBRACKET
    (87) command -> . PINGLEFT L_QBRACKET error R_QBRACKET
    (88) command -> . VISION L_QBRACKET error R_QBRACKET
    (89) command -> . VOICE L_QBRACKET error R_QBRACKET
    (27) call -> . VARIABLE L_QBRACKET variables R_QBRACKET
    (34) empty -> .
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    BLOCK           shift and go to state 174
    L_FBRACKET      shift and go to state 15
    MOVEUP          shift and go to state 16
    MOVEDOWN        shift and go to state 17
    MOVERIGHT       shift and go to state 18
    MOVELEFT        shift and go to state 19
    PINGUP          shift and go to state 20
    PINGDOWN        shift and go to state 21
    PINGRIGHT       shift and go to state 22
    PINGLEFT        shift and go to state 23
    VISION          shift and go to state 24
    VOICE           shift and go to state 25
    VARIABLE        shift and go to state 27
    NEWLINE         reduce using rule 34 (empty -> .)
    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31

    statements_group               shift and go to state 173
    inner_statement                shift and go to state 175
    declaration                    shift and go to state 153
    assignment                     shift and go to state 154
    cycle                          shift and go to state 155
    command                        shift and go to state 156
    call                           shift and go to state 157
    empty                          shift and go to state 158
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 160

    (64) parameters -> parameter COMMA . parameters
    (64) parameters -> . parameter COMMA parameters
    (65) parameters -> . parameter
    (66) parameter -> . type VARIABLE AMPERSAND
    (67) parameter -> . type VARIABLE
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE

    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31
    VARIABLE        shift and go to state 143

    parameter                      shift and go to state 145
    parameters                     shift and go to state 176
    type                           shift and go to state 146

state 161

    (66) parameter -> type VARIABLE . AMPERSAND
    (67) parameter -> type VARIABLE .

    AMPERSAND       shift and go to state 177
    COMMA           reduce using rule 67 (parameter -> type VARIABLE .)
    R_QBRACKET      reduce using rule 67 (parameter -> type VARIABLE .)


state 162

    (42) variables -> expression .
    (43) variables -> expression . COMMA variables
    (62) part_expression -> expression . DOT
    (63) part_expression -> expression .

    R_QBRACKET      reduce using rule 42 (variables -> expression .)
    COMMA           shift and go to state 149
    DOT             shift and go to state 75
    PLUS            reduce using rule 63 (part_expression -> expression .)
    MINUS           reduce using rule 63 (part_expression -> expression .)
    STAR            reduce using rule 63 (part_expression -> expression .)
    SLASH           reduce using rule 63 (part_expression -> expression .)
    CARET           reduce using rule 63 (part_expression -> expression .)
    GREATER         reduce using rule 63 (part_expression -> expression .)
    LESS            reduce using rule 63 (part_expression -> expression .)
    EQ              reduce using rule 63 (part_expression -> expression .)
    NOTEQ           reduce using rule 63 (part_expression -> expression .)


state 163

    (43) variables -> expression COMMA variables .

    R_QBRACKET      reduce using rule 43 (variables -> expression COMMA variables .)


state 164

    (28) record -> RECORD VARIABLE DATA L_QBRACKET parameters . R_QBRACKET
    (29) record -> RECORD VARIABLE DATA L_QBRACKET parameters . R_QBRACKET conversions

    R_QBRACKET      shift and go to state 178


state 165

    (15) cycle -> L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK .

    NEWLINE         reduce using rule 15 (cycle -> L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK .)


state 166

    (70) inner_statements -> inner_statement inner_statements .

    UNBLOCK         reduce using rule 70 (inner_statements -> inner_statement inner_statements .)


state 167

    (72) inner_statement -> declaration NEWLINE .

    L_FBRACKET      reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    MOVEUP          reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    MOVEDOWN        reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    MOVERIGHT       reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    MOVELEFT        reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    PINGUP          reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    PINGDOWN        reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    PINGRIGHT       reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    PINGLEFT        reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    VISION          reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    VOICE           reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    VARIABLE        reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    NUMERIC         reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    STRING          reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    LOGIC           reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 72 (inner_statement -> declaration NEWLINE .)
    UNBLOCK         reduce using rule 72 (inner_statement -> declaration NEWLINE .)


state 168

    (73) inner_statement -> assignment NEWLINE .

    L_FBRACKET      reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    MOVEUP          reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    MOVEDOWN        reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    MOVERIGHT       reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    MOVELEFT        reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    PINGUP          reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    PINGDOWN        reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    PINGRIGHT       reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    PINGLEFT        reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    VISION          reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    VOICE           reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    VARIABLE        reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    NUMERIC         reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    STRING          reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    LOGIC           reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 73 (inner_statement -> assignment NEWLINE .)
    UNBLOCK         reduce using rule 73 (inner_statement -> assignment NEWLINE .)


state 169

    (74) inner_statement -> cycle NEWLINE .

    L_FBRACKET      reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    MOVEUP          reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    MOVEDOWN        reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    MOVERIGHT       reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    MOVELEFT        reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    PINGUP          reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    PINGDOWN        reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    PINGRIGHT       reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    PINGLEFT        reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    VISION          reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    VOICE           reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    VARIABLE        reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    NUMERIC         reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    STRING          reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    LOGIC           reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    NEWLINE         reduce using rule 74 (inner_statement -> cycle NEWLINE .)
    UNBLOCK         reduce using rule 74 (inner_statement -> cycle NEWLINE .)


state 170

    (75) inner_statement -> command NEWLINE .

    L_FBRACKET      reduce using rule 75 (inner_statement -> command NEWLINE .)
    MOVEUP          reduce using rule 75 (inner_statement -> command NEWLINE .)
    MOVEDOWN        reduce using rule 75 (inner_statement -> command NEWLINE .)
    MOVERIGHT       reduce using rule 75 (inner_statement -> command NEWLINE .)
    MOVELEFT        reduce using rule 75 (inner_statement -> command NEWLINE .)
    PINGUP          reduce using rule 75 (inner_statement -> command NEWLINE .)
    PINGDOWN        reduce using rule 75 (inner_statement -> command NEWLINE .)
    PINGRIGHT       reduce using rule 75 (inner_statement -> command NEWLINE .)
    PINGLEFT        reduce using rule 75 (inner_statement -> command NEWLINE .)
    VISION          reduce using rule 75 (inner_statement -> command NEWLINE .)
    VOICE           reduce using rule 75 (inner_statement -> command NEWLINE .)
    VARIABLE        reduce using rule 75 (inner_statement -> command NEWLINE .)
    NUMERIC         reduce using rule 75 (inner_statement -> command NEWLINE .)
    STRING          reduce using rule 75 (inner_statement -> command NEWLINE .)
    LOGIC           reduce using rule 75 (inner_statement -> command NEWLINE .)
    NEWLINE         reduce using rule 75 (inner_statement -> command NEWLINE .)
    UNBLOCK         reduce using rule 75 (inner_statement -> command NEWLINE .)


state 171

    (76) inner_statement -> call NEWLINE .

    L_FBRACKET      reduce using rule 76 (inner_statement -> call NEWLINE .)
    MOVEUP          reduce using rule 76 (inner_statement -> call NEWLINE .)
    MOVEDOWN        reduce using rule 76 (inner_statement -> call NEWLINE .)
    MOVERIGHT       reduce using rule 76 (inner_statement -> call NEWLINE .)
    MOVELEFT        reduce using rule 76 (inner_statement -> call NEWLINE .)
    PINGUP          reduce using rule 76 (inner_statement -> call NEWLINE .)
    PINGDOWN        reduce using rule 76 (inner_statement -> call NEWLINE .)
    PINGRIGHT       reduce using rule 76 (inner_statement -> call NEWLINE .)
    PINGLEFT        reduce using rule 76 (inner_statement -> call NEWLINE .)
    VISION          reduce using rule 76 (inner_statement -> call NEWLINE .)
    VOICE           reduce using rule 76 (inner_statement -> call NEWLINE .)
    VARIABLE        reduce using rule 76 (inner_statement -> call NEWLINE .)
    NUMERIC         reduce using rule 76 (inner_statement -> call NEWLINE .)
    STRING          reduce using rule 76 (inner_statement -> call NEWLINE .)
    LOGIC           reduce using rule 76 (inner_statement -> call NEWLINE .)
    NEWLINE         reduce using rule 76 (inner_statement -> call NEWLINE .)
    UNBLOCK         reduce using rule 76 (inner_statement -> call NEWLINE .)


state 172

    (77) inner_statement -> empty NEWLINE .

    L_FBRACKET      reduce using rule 77 (inner_statement -> empty NEWLINE .)
    MOVEUP          reduce using rule 77 (inner_statement -> empty NEWLINE .)
    MOVEDOWN        reduce using rule 77 (inner_statement -> empty NEWLINE .)
    MOVERIGHT       reduce using rule 77 (inner_statement -> empty NEWLINE .)
    MOVELEFT        reduce using rule 77 (inner_statement -> empty NEWLINE .)
    PINGUP          reduce using rule 77 (inner_statement -> empty NEWLINE .)
    PINGDOWN        reduce using rule 77 (inner_statement -> empty NEWLINE .)
    PINGRIGHT       reduce using rule 77 (inner_statement -> empty NEWLINE .)
    PINGLEFT        reduce using rule 77 (inner_statement -> empty NEWLINE .)
    VISION          reduce using rule 77 (inner_statement -> empty NEWLINE .)
    VOICE           reduce using rule 77 (inner_statement -> empty NEWLINE .)
    VARIABLE        reduce using rule 77 (inner_statement -> empty NEWLINE .)
    NUMERIC         reduce using rule 77 (inner_statement -> empty NEWLINE .)
    STRING          reduce using rule 77 (inner_statement -> empty NEWLINE .)
    LOGIC           reduce using rule 77 (inner_statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 77 (inner_statement -> empty NEWLINE .)
    UNBLOCK         reduce using rule 77 (inner_statement -> empty NEWLINE .)


state 173

    (26) procedure -> PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group .

    NEWLINE         reduce using rule 26 (procedure -> PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group .)


state 174

    (68) statements_group -> BLOCK . inner_statements UNBLOCK
    (70) inner_statements -> . inner_statement inner_statements
    (71) inner_statements -> . inner_statement
    (72) inner_statement -> . declaration NEWLINE
    (73) inner_statement -> . assignment NEWLINE
    (74) inner_statement -> . cycle NEWLINE
    (75) inner_statement -> . command NEWLINE
    (76) inner_statement -> . call NEWLINE
    (77) inner_statement -> . empty NEWLINE
    (12) declaration -> . type variable
    (13) assignment -> . variable ASSIGNMENT expression
    (14) assignment -> . variable ASSIGNMENT assignment
    (79) assignment -> . variable ASSIGNMENT error
    (15) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (16) command -> . MOVEUP L_QBRACKET variable R_QBRACKET
    (17) command -> . MOVEDOWN L_QBRACKET variable R_QBRACKET
    (18) command -> . MOVERIGHT L_QBRACKET variable R_QBRACKET
    (19) command -> . MOVELEFT L_QBRACKET variable R_QBRACKET
    (20) command -> . PINGUP L_QBRACKET variable R_QBRACKET
    (21) command -> . PINGDOWN L_QBRACKET variable R_QBRACKET
    (22) command -> . PINGRIGHT L_QBRACKET variable R_QBRACKET
    (23) command -> . PINGLEFT L_QBRACKET variable R_QBRACKET
    (24) command -> . VISION L_QBRACKET variable R_QBRACKET
    (25) command -> . VOICE L_QBRACKET expression R_QBRACKET
    (80) command -> . MOVEUP L_QBRACKET error R_QBRACKET
    (81) command -> . MOVEDOWN L_QBRACKET error R_QBRACKET
    (82) command -> . MOVERIGHT L_QBRACKET error R_QBRACKET
    (83) command -> . MOVELEFT L_QBRACKET error R_QBRACKET
    (84) command -> . PINGUP L_QBRACKET error R_QBRACKET
    (85) command -> . PINGDOWN L_QBRACKET error R_QBRACKET
    (86) command -> . PINGRIGHT L_QBRACKET error R_QBRACKET
    (87) command -> . PINGLEFT L_QBRACKET error R_QBRACKET
    (88) command -> . VISION L_QBRACKET error R_QBRACKET
    (89) command -> . VOICE L_QBRACKET error R_QBRACKET
    (27) call -> . VARIABLE L_QBRACKET variables R_QBRACKET
    (34) empty -> .
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE
    (44) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (45) variable -> . VARIABLE

    L_FBRACKET      shift and go to state 15
    MOVEUP          shift and go to state 16
    MOVEDOWN        shift and go to state 17
    MOVERIGHT       shift and go to state 18
    MOVELEFT        shift and go to state 19
    PINGUP          shift and go to state 20
    PINGDOWN        shift and go to state 21
    PINGRIGHT       shift and go to state 22
    PINGLEFT        shift and go to state 23
    VISION          shift and go to state 24
    VOICE           shift and go to state 25
    VARIABLE        shift and go to state 27
    NEWLINE         reduce using rule 34 (empty -> .)
    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31

    inner_statements               shift and go to state 179
    inner_statement                shift and go to state 152
    declaration                    shift and go to state 153
    assignment                     shift and go to state 154
    cycle                          shift and go to state 155
    command                        shift and go to state 156
    call                           shift and go to state 157
    empty                          shift and go to state 158
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 175

    (69) statements_group -> inner_statement .

    NEWLINE         reduce using rule 69 (statements_group -> inner_statement .)


state 176

    (64) parameters -> parameter COMMA parameters .

    R_QBRACKET      reduce using rule 64 (parameters -> parameter COMMA parameters .)


state 177

    (66) parameter -> type VARIABLE AMPERSAND .

    COMMA           reduce using rule 66 (parameter -> type VARIABLE AMPERSAND .)
    R_QBRACKET      reduce using rule 66 (parameter -> type VARIABLE AMPERSAND .)


state 178

    (28) record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET .
    (29) record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET . conversions
    (30) conversions -> . conversions conversion
    (31) conversions -> . conversion
    (32) conversion -> . CONVERSION TO type VARIABLE
    (33) conversion -> . CONVERSION FROM type VARIABLE

    NEWLINE         reduce using rule 28 (record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET .)
    CONVERSION      shift and go to state 182

    conversions                    shift and go to state 180
    conversion                     shift and go to state 181

state 179

    (68) statements_group -> BLOCK inner_statements . UNBLOCK

    UNBLOCK         shift and go to state 183


state 180

    (29) record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions .
    (30) conversions -> conversions . conversion
    (32) conversion -> . CONVERSION TO type VARIABLE
    (33) conversion -> . CONVERSION FROM type VARIABLE

    NEWLINE         reduce using rule 29 (record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions .)
    CONVERSION      shift and go to state 182

    conversion                     shift and go to state 184

state 181

    (31) conversions -> conversion .

    CONVERSION      reduce using rule 31 (conversions -> conversion .)
    NEWLINE         reduce using rule 31 (conversions -> conversion .)


state 182

    (32) conversion -> CONVERSION . TO type VARIABLE
    (33) conversion -> CONVERSION . FROM type VARIABLE

    TO              shift and go to state 185
    FROM            shift and go to state 186


state 183

    (68) statements_group -> BLOCK inner_statements UNBLOCK .

    NEWLINE         reduce using rule 68 (statements_group -> BLOCK inner_statements UNBLOCK .)


state 184

    (30) conversions -> conversions conversion .

    CONVERSION      reduce using rule 30 (conversions -> conversions conversion .)
    NEWLINE         reduce using rule 30 (conversions -> conversions conversion .)


state 185

    (32) conversion -> CONVERSION TO . type VARIABLE
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE

    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31
    VARIABLE        shift and go to state 143

    type                           shift and go to state 187

state 186

    (33) conversion -> CONVERSION FROM . type VARIABLE
    (35) type -> . NUMERIC
    (36) type -> . STRING
    (37) type -> . LOGIC
    (38) type -> . VARIABLE

    NUMERIC         shift and go to state 29
    STRING          shift and go to state 30
    LOGIC           shift and go to state 31
    VARIABLE        shift and go to state 143

    type                           shift and go to state 188

state 187

    (32) conversion -> CONVERSION TO type . VARIABLE

    VARIABLE        shift and go to state 189


state 188

    (33) conversion -> CONVERSION FROM type . VARIABLE

    VARIABLE        shift and go to state 190


state 189

    (32) conversion -> CONVERSION TO type VARIABLE .

    CONVERSION      reduce using rule 32 (conversion -> CONVERSION TO type VARIABLE .)
    NEWLINE         reduce using rule 32 (conversion -> CONVERSION TO type VARIABLE .)


state 190

    (33) conversion -> CONVERSION FROM type VARIABLE .

    CONVERSION      reduce using rule 33 (conversion -> CONVERSION FROM type VARIABLE .)
    NEWLINE         reduce using rule 33 (conversion -> CONVERSION FROM type VARIABLE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for DOT in state 86 resolved as shift
WARNING: shift/reduce conflict for R_QBRACKET in state 109 resolved as shift
WARNING: shift/reduce conflict for DOT in state 114 resolved as shift
WARNING: reduce/reduce conflict in state 85 resolved using rule (complex_expression -> MINUS expression)
WARNING: rejected rule (part_expression -> expression) in state 85
WARNING: reduce/reduce conflict in state 86 resolved using rule (part_expression -> DOT expression)
WARNING: rejected rule (part_expression -> expression) in state 86
