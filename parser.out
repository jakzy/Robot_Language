Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> declaration NEWLINE
Rule 5     statement -> assignment NEWLINE
Rule 6     statement -> cycle NEWLINE
Rule 7     statement -> command NEWLINE
Rule 8     statement -> procedure NEWLINE
Rule 9     statement -> call NEWLINE
Rule 10    statement -> record NEWLINE
Rule 11    statement -> empty NEWLINE
Rule 12    declaration -> type variable
Rule 13    assignment -> variable ASSIGNMENT expression
Rule 14    cycle -> L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
Rule 15    command -> MOVEUP L_QBRACKET variable R_QBRACKET
Rule 16    command -> MOVEDOWN L_QBRACKET variable R_QBRACKET
Rule 17    command -> MOVERIGHT L_QBRACKET variable R_QBRACKET
Rule 18    command -> MOVELEFT L_QBRACKET variable R_QBRACKET
Rule 19    command -> PINGUP L_QBRACKET variable R_QBRACKET
Rule 20    command -> PINGDOWN L_QBRACKET variable R_QBRACKET
Rule 21    command -> PINGRIGHT L_QBRACKET variable R_QBRACKET
Rule 22    command -> PINGLEFT L_QBRACKET variable R_QBRACKET
Rule 23    command -> VISION L_QBRACKET variable R_QBRACKET
Rule 24    command -> VOICE L_QBRACKET variable R_QBRACKET
Rule 25    procedure -> PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group
Rule 26    call -> VARIABLE L_QBRACKET variables R_QBRACKET
Rule 27    record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET
Rule 28    record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions
Rule 29    conversions -> conversions conversion
Rule 30    conversions -> conversion
Rule 31    conversion -> CONVERSION TO type VARIABLE
Rule 32    conversion -> CONVERSION FROM type VARIABLE
Rule 33    empty -> <empty>
Rule 34    type -> NUMERIC
Rule 35    type -> STRING
Rule 36    type -> LOGIC
Rule 37    type -> VARIABLE
Rule 38    expression -> variable
Rule 39    expression -> const
Rule 40    expression -> text
Rule 41    expression -> complex_expression
Rule 42    expression -> call
Rule 43    text -> TEXT
Rule 44    variables -> variables COMMA variable
Rule 45    variables -> variable
Rule 46    variable -> VARIABLE L_QBRACKET expression R_QBRACKET
Rule 47    variable -> VARIABLE
Rule 48    const -> TRUE
Rule 49    const -> FALSE
Rule 50    const -> UNDEF
Rule 51    const -> DECIMAL
Rule 52    complex_expression -> expression sign expression
Rule 53    complex_expression -> MINUS expression
Rule 54    sign -> r_sign
Rule 55    sign -> l_sign
Rule 56    sign -> u_sign
Rule 57    r_sign -> u_sign DOT
Rule 58    l_sign -> DOT u_sign
Rule 59    u_sign -> PLUS
Rule 60    u_sign -> MINUS
Rule 61    u_sign -> STAR
Rule 62    u_sign -> SLASH
Rule 63    u_sign -> CARET
Rule 64    u_sign -> GREATER
Rule 65    u_sign -> LESS
Rule 66    u_sign -> EQ
Rule 67    u_sign -> NOTEQ
Rule 68    parameters -> parameter COMMA parameters
Rule 69    parameters -> parameter
Rule 70    parameter -> type VARIABLE AMPERSAND
Rule 71    parameter -> type VARIABLE
Rule 72    statements_group -> BLOCK inner_statements UNBLOCK
Rule 73    statements_group -> inner_statement
Rule 74    inner_statements -> inner_statement inner_statements
Rule 75    inner_statements -> inner_statement
Rule 76    inner_statement -> declaration NEWLINE
Rule 77    inner_statement -> assignment NEWLINE
Rule 78    inner_statement -> cycle NEWLINE
Rule 79    inner_statement -> command NEWLINE
Rule 80    inner_statement -> call NEWLINE
Rule 81    inner_statement -> empty NEWLINE
Rule 82    statement -> errors NEWLINE
Rule 83    statement -> errors
Rule 84    errors -> errors error
Rule 85    errors -> error

Terminals, with rules where they appear

AMPERSAND            : 70
ASSIGNMENT           : 13
BLOCK                : 14 72
CARET                : 63
COMMA                : 44 68
CONVERSION           : 31 32
DATA                 : 27 28
DECIMAL              : 51
DOT                  : 57 58
EQ                   : 66
FALSE                : 49
FROM                 : 32
GREATER              : 64
LESS                 : 65
LOGIC                : 36
L_FBRACKET           : 14
L_QBRACKET           : 15 16 17 18 19 20 21 22 23 24 25 26 27 28 46
MINUS                : 53 60
MOVEDOWN             : 16
MOVELEFT             : 18
MOVERIGHT            : 17
MOVEUP               : 15
NEWLINE              : 4 5 6 7 8 9 10 11 76 77 78 79 80 81 82
NOTEQ                : 67
NUMERIC              : 34
PINGDOWN             : 20
PINGLEFT             : 22
PINGRIGHT            : 21
PINGUP               : 19
PLUS                 : 59
PROC                 : 25
RECORD               : 27 28
R_FBRACKET           : 14
R_QBRACKET           : 15 16 17 18 19 20 21 22 23 24 25 26 27 28 46
SLASH                : 62
STAR                 : 61
STRING               : 35
TEXT                 : 43
TO                   : 31
TRUE                 : 48
UNBLOCK              : 14 72
UNDEF                : 50
VARIABLE             : 25 26 27 28 31 32 37 46 47 70 71
VISION               : 23
VOICE                : 24
error                : 84 85

Nonterminals, with rules where they appear

assignment           : 5 77
call                 : 9 42 80
command              : 7 79
complex_expression   : 41
const                : 39
conversion           : 29 30
conversions          : 28 29
cycle                : 6 78
declaration          : 4 76
empty                : 11 81
errors               : 82 83 84
expression           : 13 14 46 52 52 53
inner_statement      : 73 74 75
inner_statements     : 14 72 74
l_sign               : 55
parameter            : 68 69
parameters           : 25 27 28 68
procedure            : 8
program              : 0
r_sign               : 54
record               : 10
sign                 : 52
statement            : 2 3
statements           : 1 2
statements_group     : 25
text                 : 40
type                 : 12 31 32 70 71
u_sign               : 56 57 58
variable             : 12 13 15 16 17 18 19 20 21 22 23 24 38 44 45
variables            : 26 44

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . declaration NEWLINE
    (5) statement -> . assignment NEWLINE
    (6) statement -> . cycle NEWLINE
    (7) statement -> . command NEWLINE
    (8) statement -> . procedure NEWLINE
    (9) statement -> . call NEWLINE
    (10) statement -> . record NEWLINE
    (11) statement -> . empty NEWLINE
    (82) statement -> . errors NEWLINE
    (83) statement -> . errors
    (12) declaration -> . type variable
    (13) assignment -> . variable ASSIGNMENT expression
    (14) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (15) command -> . MOVEUP L_QBRACKET variable R_QBRACKET
    (16) command -> . MOVEDOWN L_QBRACKET variable R_QBRACKET
    (17) command -> . MOVERIGHT L_QBRACKET variable R_QBRACKET
    (18) command -> . MOVELEFT L_QBRACKET variable R_QBRACKET
    (19) command -> . PINGUP L_QBRACKET variable R_QBRACKET
    (20) command -> . PINGDOWN L_QBRACKET variable R_QBRACKET
    (21) command -> . PINGRIGHT L_QBRACKET variable R_QBRACKET
    (22) command -> . PINGLEFT L_QBRACKET variable R_QBRACKET
    (23) command -> . VISION L_QBRACKET variable R_QBRACKET
    (24) command -> . VOICE L_QBRACKET variable R_QBRACKET
    (25) procedure -> . PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group
    (26) call -> . VARIABLE L_QBRACKET variables R_QBRACKET
    (27) record -> . RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET
    (28) record -> . RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions
    (33) empty -> .
    (84) errors -> . errors error
    (85) errors -> . error
    (34) type -> . NUMERIC
    (35) type -> . STRING
    (36) type -> . LOGIC
    (37) type -> . VARIABLE
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    L_FBRACKET      shift and go to state 15
    MOVEUP          shift and go to state 16
    MOVEDOWN        shift and go to state 17
    MOVERIGHT       shift and go to state 18
    MOVELEFT        shift and go to state 19
    PINGUP          shift and go to state 20
    PINGDOWN        shift and go to state 21
    PINGRIGHT       shift and go to state 22
    PINGLEFT        shift and go to state 23
    VISION          shift and go to state 24
    VOICE           shift and go to state 25
    PROC            shift and go to state 26
    VARIABLE        shift and go to state 27
    RECORD          shift and go to state 28
    NEWLINE         reduce using rule 33 (empty -> .)
    error           shift and go to state 29
    NUMERIC         shift and go to state 30
    STRING          shift and go to state 31
    LOGIC           shift and go to state 32

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    cycle                          shift and go to state 6
    command                        shift and go to state 7
    procedure                      shift and go to state 8
    call                           shift and go to state 9
    record                         shift and go to state 10
    empty                          shift and go to state 11
    errors                         shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . declaration NEWLINE
    (5) statement -> . assignment NEWLINE
    (6) statement -> . cycle NEWLINE
    (7) statement -> . command NEWLINE
    (8) statement -> . procedure NEWLINE
    (9) statement -> . call NEWLINE
    (10) statement -> . record NEWLINE
    (11) statement -> . empty NEWLINE
    (82) statement -> . errors NEWLINE
    (83) statement -> . errors
    (12) declaration -> . type variable
    (13) assignment -> . variable ASSIGNMENT expression
    (14) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (15) command -> . MOVEUP L_QBRACKET variable R_QBRACKET
    (16) command -> . MOVEDOWN L_QBRACKET variable R_QBRACKET
    (17) command -> . MOVERIGHT L_QBRACKET variable R_QBRACKET
    (18) command -> . MOVELEFT L_QBRACKET variable R_QBRACKET
    (19) command -> . PINGUP L_QBRACKET variable R_QBRACKET
    (20) command -> . PINGDOWN L_QBRACKET variable R_QBRACKET
    (21) command -> . PINGRIGHT L_QBRACKET variable R_QBRACKET
    (22) command -> . PINGLEFT L_QBRACKET variable R_QBRACKET
    (23) command -> . VISION L_QBRACKET variable R_QBRACKET
    (24) command -> . VOICE L_QBRACKET variable R_QBRACKET
    (25) procedure -> . PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group
    (26) call -> . VARIABLE L_QBRACKET variables R_QBRACKET
    (27) record -> . RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET
    (28) record -> . RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions
    (33) empty -> .
    (84) errors -> . errors error
    (85) errors -> . error
    (34) type -> . NUMERIC
    (35) type -> . STRING
    (36) type -> . LOGIC
    (37) type -> . VARIABLE
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    $end            reduce using rule 1 (program -> statements .)
    L_FBRACKET      shift and go to state 15
    MOVEUP          shift and go to state 16
    MOVEDOWN        shift and go to state 17
    MOVERIGHT       shift and go to state 18
    MOVELEFT        shift and go to state 19
    PINGUP          shift and go to state 20
    PINGDOWN        shift and go to state 21
    PINGRIGHT       shift and go to state 22
    PINGLEFT        shift and go to state 23
    VISION          shift and go to state 24
    VOICE           shift and go to state 25
    PROC            shift and go to state 26
    VARIABLE        shift and go to state 27
    RECORD          shift and go to state 28
    NEWLINE         reduce using rule 33 (empty -> .)
    error           shift and go to state 29
    NUMERIC         shift and go to state 30
    STRING          shift and go to state 31
    LOGIC           shift and go to state 32

    statement                      shift and go to state 33
    declaration                    shift and go to state 4
    assignment                     shift and go to state 5
    cycle                          shift and go to state 6
    command                        shift and go to state 7
    procedure                      shift and go to state 8
    call                           shift and go to state 9
    record                         shift and go to state 10
    empty                          shift and go to state 11
    errors                         shift and go to state 12
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 3

    (3) statements -> statement .

    L_FBRACKET      reduce using rule 3 (statements -> statement .)
    MOVEUP          reduce using rule 3 (statements -> statement .)
    MOVEDOWN        reduce using rule 3 (statements -> statement .)
    MOVERIGHT       reduce using rule 3 (statements -> statement .)
    MOVELEFT        reduce using rule 3 (statements -> statement .)
    PINGUP          reduce using rule 3 (statements -> statement .)
    PINGDOWN        reduce using rule 3 (statements -> statement .)
    PINGRIGHT       reduce using rule 3 (statements -> statement .)
    PINGLEFT        reduce using rule 3 (statements -> statement .)
    VISION          reduce using rule 3 (statements -> statement .)
    VOICE           reduce using rule 3 (statements -> statement .)
    PROC            reduce using rule 3 (statements -> statement .)
    VARIABLE        reduce using rule 3 (statements -> statement .)
    RECORD          reduce using rule 3 (statements -> statement .)
    error           reduce using rule 3 (statements -> statement .)
    NUMERIC         reduce using rule 3 (statements -> statement .)
    STRING          reduce using rule 3 (statements -> statement .)
    LOGIC           reduce using rule 3 (statements -> statement .)
    NEWLINE         reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> declaration . NEWLINE

    NEWLINE         shift and go to state 34


state 5

    (5) statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 35


state 6

    (6) statement -> cycle . NEWLINE

    NEWLINE         shift and go to state 36


state 7

    (7) statement -> command . NEWLINE

    NEWLINE         shift and go to state 37


state 8

    (8) statement -> procedure . NEWLINE

    NEWLINE         shift and go to state 38


state 9

    (9) statement -> call . NEWLINE

    NEWLINE         shift and go to state 39


state 10

    (10) statement -> record . NEWLINE

    NEWLINE         shift and go to state 40


state 11

    (11) statement -> empty . NEWLINE

    NEWLINE         shift and go to state 41


state 12

    (82) statement -> errors . NEWLINE
    (83) statement -> errors .
    (84) errors -> errors . error

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for error resolved as shift
    NEWLINE         shift and go to state 42
    L_FBRACKET      reduce using rule 83 (statement -> errors .)
    MOVEUP          reduce using rule 83 (statement -> errors .)
    MOVEDOWN        reduce using rule 83 (statement -> errors .)
    MOVERIGHT       reduce using rule 83 (statement -> errors .)
    MOVELEFT        reduce using rule 83 (statement -> errors .)
    PINGUP          reduce using rule 83 (statement -> errors .)
    PINGDOWN        reduce using rule 83 (statement -> errors .)
    PINGRIGHT       reduce using rule 83 (statement -> errors .)
    PINGLEFT        reduce using rule 83 (statement -> errors .)
    VISION          reduce using rule 83 (statement -> errors .)
    VOICE           reduce using rule 83 (statement -> errors .)
    PROC            reduce using rule 83 (statement -> errors .)
    VARIABLE        reduce using rule 83 (statement -> errors .)
    RECORD          reduce using rule 83 (statement -> errors .)
    NUMERIC         reduce using rule 83 (statement -> errors .)
    STRING          reduce using rule 83 (statement -> errors .)
    LOGIC           reduce using rule 83 (statement -> errors .)
    $end            reduce using rule 83 (statement -> errors .)
    error           shift and go to state 43

  ! error           [ reduce using rule 83 (statement -> errors .) ]
  ! NEWLINE         [ reduce using rule 83 (statement -> errors .) ]


state 13

    (12) declaration -> type . variable
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 44

state 14

    (13) assignment -> variable . ASSIGNMENT expression

    ASSIGNMENT      shift and go to state 46


state 15

    (14) cycle -> L_FBRACKET . expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (38) expression -> . variable
    (39) expression -> . const
    (40) expression -> . text
    (41) expression -> . complex_expression
    (42) expression -> . call
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE
    (48) const -> . TRUE
    (49) const -> . FALSE
    (50) const -> . UNDEF
    (51) const -> . DECIMAL
    (43) text -> . TEXT
    (52) complex_expression -> . expression sign expression
    (53) complex_expression -> . MINUS expression
    (26) call -> . VARIABLE L_QBRACKET variables R_QBRACKET

    VARIABLE        shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    UNDEF           shift and go to state 56
    DECIMAL         shift and go to state 57
    TEXT            shift and go to state 58
    MINUS           shift and go to state 59

    expression                     shift and go to state 47
    variable                       shift and go to state 48
    const                          shift and go to state 49
    text                           shift and go to state 50
    complex_expression             shift and go to state 51
    call                           shift and go to state 52

state 16

    (15) command -> MOVEUP . L_QBRACKET variable R_QBRACKET

    L_QBRACKET      shift and go to state 60


state 17

    (16) command -> MOVEDOWN . L_QBRACKET variable R_QBRACKET

    L_QBRACKET      shift and go to state 61


state 18

    (17) command -> MOVERIGHT . L_QBRACKET variable R_QBRACKET

    L_QBRACKET      shift and go to state 62


state 19

    (18) command -> MOVELEFT . L_QBRACKET variable R_QBRACKET

    L_QBRACKET      shift and go to state 63


state 20

    (19) command -> PINGUP . L_QBRACKET variable R_QBRACKET

    L_QBRACKET      shift and go to state 64


state 21

    (20) command -> PINGDOWN . L_QBRACKET variable R_QBRACKET

    L_QBRACKET      shift and go to state 65


state 22

    (21) command -> PINGRIGHT . L_QBRACKET variable R_QBRACKET

    L_QBRACKET      shift and go to state 66


state 23

    (22) command -> PINGLEFT . L_QBRACKET variable R_QBRACKET

    L_QBRACKET      shift and go to state 67


state 24

    (23) command -> VISION . L_QBRACKET variable R_QBRACKET

    L_QBRACKET      shift and go to state 68


state 25

    (24) command -> VOICE . L_QBRACKET variable R_QBRACKET

    L_QBRACKET      shift and go to state 69


state 26

    (25) procedure -> PROC . VARIABLE L_QBRACKET parameters R_QBRACKET statements_group

    VARIABLE        shift and go to state 70


state 27

    (26) call -> VARIABLE . L_QBRACKET variables R_QBRACKET
    (37) type -> VARIABLE .
    (46) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (47) variable -> VARIABLE .

    L_QBRACKET      shift and go to state 71
    VARIABLE        reduce using rule 37 (type -> VARIABLE .)
    ASSIGNMENT      reduce using rule 47 (variable -> VARIABLE .)


state 28

    (27) record -> RECORD . VARIABLE DATA L_QBRACKET parameters R_QBRACKET
    (28) record -> RECORD . VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions

    VARIABLE        shift and go to state 72


state 29

    (85) errors -> error .

    NEWLINE         reduce using rule 85 (errors -> error .)
    error           reduce using rule 85 (errors -> error .)
    L_FBRACKET      reduce using rule 85 (errors -> error .)
    MOVEUP          reduce using rule 85 (errors -> error .)
    MOVEDOWN        reduce using rule 85 (errors -> error .)
    MOVERIGHT       reduce using rule 85 (errors -> error .)
    MOVELEFT        reduce using rule 85 (errors -> error .)
    PINGUP          reduce using rule 85 (errors -> error .)
    PINGDOWN        reduce using rule 85 (errors -> error .)
    PINGRIGHT       reduce using rule 85 (errors -> error .)
    PINGLEFT        reduce using rule 85 (errors -> error .)
    VISION          reduce using rule 85 (errors -> error .)
    VOICE           reduce using rule 85 (errors -> error .)
    PROC            reduce using rule 85 (errors -> error .)
    VARIABLE        reduce using rule 85 (errors -> error .)
    RECORD          reduce using rule 85 (errors -> error .)
    NUMERIC         reduce using rule 85 (errors -> error .)
    STRING          reduce using rule 85 (errors -> error .)
    LOGIC           reduce using rule 85 (errors -> error .)
    $end            reduce using rule 85 (errors -> error .)


state 30

    (34) type -> NUMERIC .

    VARIABLE        reduce using rule 34 (type -> NUMERIC .)


state 31

    (35) type -> STRING .

    VARIABLE        reduce using rule 35 (type -> STRING .)


state 32

    (36) type -> LOGIC .

    VARIABLE        reduce using rule 36 (type -> LOGIC .)


state 33

    (2) statements -> statements statement .

    L_FBRACKET      reduce using rule 2 (statements -> statements statement .)
    MOVEUP          reduce using rule 2 (statements -> statements statement .)
    MOVEDOWN        reduce using rule 2 (statements -> statements statement .)
    MOVERIGHT       reduce using rule 2 (statements -> statements statement .)
    MOVELEFT        reduce using rule 2 (statements -> statements statement .)
    PINGUP          reduce using rule 2 (statements -> statements statement .)
    PINGDOWN        reduce using rule 2 (statements -> statements statement .)
    PINGRIGHT       reduce using rule 2 (statements -> statements statement .)
    PINGLEFT        reduce using rule 2 (statements -> statements statement .)
    VISION          reduce using rule 2 (statements -> statements statement .)
    VOICE           reduce using rule 2 (statements -> statements statement .)
    PROC            reduce using rule 2 (statements -> statements statement .)
    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    RECORD          reduce using rule 2 (statements -> statements statement .)
    error           reduce using rule 2 (statements -> statements statement .)
    NUMERIC         reduce using rule 2 (statements -> statements statement .)
    STRING          reduce using rule 2 (statements -> statements statement .)
    LOGIC           reduce using rule 2 (statements -> statements statement .)
    NEWLINE         reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 34

    (4) statement -> declaration NEWLINE .

    L_FBRACKET      reduce using rule 4 (statement -> declaration NEWLINE .)
    MOVEUP          reduce using rule 4 (statement -> declaration NEWLINE .)
    MOVEDOWN        reduce using rule 4 (statement -> declaration NEWLINE .)
    MOVERIGHT       reduce using rule 4 (statement -> declaration NEWLINE .)
    MOVELEFT        reduce using rule 4 (statement -> declaration NEWLINE .)
    PINGUP          reduce using rule 4 (statement -> declaration NEWLINE .)
    PINGDOWN        reduce using rule 4 (statement -> declaration NEWLINE .)
    PINGRIGHT       reduce using rule 4 (statement -> declaration NEWLINE .)
    PINGLEFT        reduce using rule 4 (statement -> declaration NEWLINE .)
    VISION          reduce using rule 4 (statement -> declaration NEWLINE .)
    VOICE           reduce using rule 4 (statement -> declaration NEWLINE .)
    PROC            reduce using rule 4 (statement -> declaration NEWLINE .)
    VARIABLE        reduce using rule 4 (statement -> declaration NEWLINE .)
    RECORD          reduce using rule 4 (statement -> declaration NEWLINE .)
    error           reduce using rule 4 (statement -> declaration NEWLINE .)
    NUMERIC         reduce using rule 4 (statement -> declaration NEWLINE .)
    STRING          reduce using rule 4 (statement -> declaration NEWLINE .)
    LOGIC           reduce using rule 4 (statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> declaration NEWLINE .)
    $end            reduce using rule 4 (statement -> declaration NEWLINE .)


state 35

    (5) statement -> assignment NEWLINE .

    L_FBRACKET      reduce using rule 5 (statement -> assignment NEWLINE .)
    MOVEUP          reduce using rule 5 (statement -> assignment NEWLINE .)
    MOVEDOWN        reduce using rule 5 (statement -> assignment NEWLINE .)
    MOVERIGHT       reduce using rule 5 (statement -> assignment NEWLINE .)
    MOVELEFT        reduce using rule 5 (statement -> assignment NEWLINE .)
    PINGUP          reduce using rule 5 (statement -> assignment NEWLINE .)
    PINGDOWN        reduce using rule 5 (statement -> assignment NEWLINE .)
    PINGRIGHT       reduce using rule 5 (statement -> assignment NEWLINE .)
    PINGLEFT        reduce using rule 5 (statement -> assignment NEWLINE .)
    VISION          reduce using rule 5 (statement -> assignment NEWLINE .)
    VOICE           reduce using rule 5 (statement -> assignment NEWLINE .)
    PROC            reduce using rule 5 (statement -> assignment NEWLINE .)
    VARIABLE        reduce using rule 5 (statement -> assignment NEWLINE .)
    RECORD          reduce using rule 5 (statement -> assignment NEWLINE .)
    error           reduce using rule 5 (statement -> assignment NEWLINE .)
    NUMERIC         reduce using rule 5 (statement -> assignment NEWLINE .)
    STRING          reduce using rule 5 (statement -> assignment NEWLINE .)
    LOGIC           reduce using rule 5 (statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 5 (statement -> assignment NEWLINE .)
    $end            reduce using rule 5 (statement -> assignment NEWLINE .)


state 36

    (6) statement -> cycle NEWLINE .

    L_FBRACKET      reduce using rule 6 (statement -> cycle NEWLINE .)
    MOVEUP          reduce using rule 6 (statement -> cycle NEWLINE .)
    MOVEDOWN        reduce using rule 6 (statement -> cycle NEWLINE .)
    MOVERIGHT       reduce using rule 6 (statement -> cycle NEWLINE .)
    MOVELEFT        reduce using rule 6 (statement -> cycle NEWLINE .)
    PINGUP          reduce using rule 6 (statement -> cycle NEWLINE .)
    PINGDOWN        reduce using rule 6 (statement -> cycle NEWLINE .)
    PINGRIGHT       reduce using rule 6 (statement -> cycle NEWLINE .)
    PINGLEFT        reduce using rule 6 (statement -> cycle NEWLINE .)
    VISION          reduce using rule 6 (statement -> cycle NEWLINE .)
    VOICE           reduce using rule 6 (statement -> cycle NEWLINE .)
    PROC            reduce using rule 6 (statement -> cycle NEWLINE .)
    VARIABLE        reduce using rule 6 (statement -> cycle NEWLINE .)
    RECORD          reduce using rule 6 (statement -> cycle NEWLINE .)
    error           reduce using rule 6 (statement -> cycle NEWLINE .)
    NUMERIC         reduce using rule 6 (statement -> cycle NEWLINE .)
    STRING          reduce using rule 6 (statement -> cycle NEWLINE .)
    LOGIC           reduce using rule 6 (statement -> cycle NEWLINE .)
    NEWLINE         reduce using rule 6 (statement -> cycle NEWLINE .)
    $end            reduce using rule 6 (statement -> cycle NEWLINE .)


state 37

    (7) statement -> command NEWLINE .

    L_FBRACKET      reduce using rule 7 (statement -> command NEWLINE .)
    MOVEUP          reduce using rule 7 (statement -> command NEWLINE .)
    MOVEDOWN        reduce using rule 7 (statement -> command NEWLINE .)
    MOVERIGHT       reduce using rule 7 (statement -> command NEWLINE .)
    MOVELEFT        reduce using rule 7 (statement -> command NEWLINE .)
    PINGUP          reduce using rule 7 (statement -> command NEWLINE .)
    PINGDOWN        reduce using rule 7 (statement -> command NEWLINE .)
    PINGRIGHT       reduce using rule 7 (statement -> command NEWLINE .)
    PINGLEFT        reduce using rule 7 (statement -> command NEWLINE .)
    VISION          reduce using rule 7 (statement -> command NEWLINE .)
    VOICE           reduce using rule 7 (statement -> command NEWLINE .)
    PROC            reduce using rule 7 (statement -> command NEWLINE .)
    VARIABLE        reduce using rule 7 (statement -> command NEWLINE .)
    RECORD          reduce using rule 7 (statement -> command NEWLINE .)
    error           reduce using rule 7 (statement -> command NEWLINE .)
    NUMERIC         reduce using rule 7 (statement -> command NEWLINE .)
    STRING          reduce using rule 7 (statement -> command NEWLINE .)
    LOGIC           reduce using rule 7 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 7 (statement -> command NEWLINE .)
    $end            reduce using rule 7 (statement -> command NEWLINE .)


state 38

    (8) statement -> procedure NEWLINE .

    L_FBRACKET      reduce using rule 8 (statement -> procedure NEWLINE .)
    MOVEUP          reduce using rule 8 (statement -> procedure NEWLINE .)
    MOVEDOWN        reduce using rule 8 (statement -> procedure NEWLINE .)
    MOVERIGHT       reduce using rule 8 (statement -> procedure NEWLINE .)
    MOVELEFT        reduce using rule 8 (statement -> procedure NEWLINE .)
    PINGUP          reduce using rule 8 (statement -> procedure NEWLINE .)
    PINGDOWN        reduce using rule 8 (statement -> procedure NEWLINE .)
    PINGRIGHT       reduce using rule 8 (statement -> procedure NEWLINE .)
    PINGLEFT        reduce using rule 8 (statement -> procedure NEWLINE .)
    VISION          reduce using rule 8 (statement -> procedure NEWLINE .)
    VOICE           reduce using rule 8 (statement -> procedure NEWLINE .)
    PROC            reduce using rule 8 (statement -> procedure NEWLINE .)
    VARIABLE        reduce using rule 8 (statement -> procedure NEWLINE .)
    RECORD          reduce using rule 8 (statement -> procedure NEWLINE .)
    error           reduce using rule 8 (statement -> procedure NEWLINE .)
    NUMERIC         reduce using rule 8 (statement -> procedure NEWLINE .)
    STRING          reduce using rule 8 (statement -> procedure NEWLINE .)
    LOGIC           reduce using rule 8 (statement -> procedure NEWLINE .)
    NEWLINE         reduce using rule 8 (statement -> procedure NEWLINE .)
    $end            reduce using rule 8 (statement -> procedure NEWLINE .)


state 39

    (9) statement -> call NEWLINE .

    L_FBRACKET      reduce using rule 9 (statement -> call NEWLINE .)
    MOVEUP          reduce using rule 9 (statement -> call NEWLINE .)
    MOVEDOWN        reduce using rule 9 (statement -> call NEWLINE .)
    MOVERIGHT       reduce using rule 9 (statement -> call NEWLINE .)
    MOVELEFT        reduce using rule 9 (statement -> call NEWLINE .)
    PINGUP          reduce using rule 9 (statement -> call NEWLINE .)
    PINGDOWN        reduce using rule 9 (statement -> call NEWLINE .)
    PINGRIGHT       reduce using rule 9 (statement -> call NEWLINE .)
    PINGLEFT        reduce using rule 9 (statement -> call NEWLINE .)
    VISION          reduce using rule 9 (statement -> call NEWLINE .)
    VOICE           reduce using rule 9 (statement -> call NEWLINE .)
    PROC            reduce using rule 9 (statement -> call NEWLINE .)
    VARIABLE        reduce using rule 9 (statement -> call NEWLINE .)
    RECORD          reduce using rule 9 (statement -> call NEWLINE .)
    error           reduce using rule 9 (statement -> call NEWLINE .)
    NUMERIC         reduce using rule 9 (statement -> call NEWLINE .)
    STRING          reduce using rule 9 (statement -> call NEWLINE .)
    LOGIC           reduce using rule 9 (statement -> call NEWLINE .)
    NEWLINE         reduce using rule 9 (statement -> call NEWLINE .)
    $end            reduce using rule 9 (statement -> call NEWLINE .)


state 40

    (10) statement -> record NEWLINE .

    L_FBRACKET      reduce using rule 10 (statement -> record NEWLINE .)
    MOVEUP          reduce using rule 10 (statement -> record NEWLINE .)
    MOVEDOWN        reduce using rule 10 (statement -> record NEWLINE .)
    MOVERIGHT       reduce using rule 10 (statement -> record NEWLINE .)
    MOVELEFT        reduce using rule 10 (statement -> record NEWLINE .)
    PINGUP          reduce using rule 10 (statement -> record NEWLINE .)
    PINGDOWN        reduce using rule 10 (statement -> record NEWLINE .)
    PINGRIGHT       reduce using rule 10 (statement -> record NEWLINE .)
    PINGLEFT        reduce using rule 10 (statement -> record NEWLINE .)
    VISION          reduce using rule 10 (statement -> record NEWLINE .)
    VOICE           reduce using rule 10 (statement -> record NEWLINE .)
    PROC            reduce using rule 10 (statement -> record NEWLINE .)
    VARIABLE        reduce using rule 10 (statement -> record NEWLINE .)
    RECORD          reduce using rule 10 (statement -> record NEWLINE .)
    error           reduce using rule 10 (statement -> record NEWLINE .)
    NUMERIC         reduce using rule 10 (statement -> record NEWLINE .)
    STRING          reduce using rule 10 (statement -> record NEWLINE .)
    LOGIC           reduce using rule 10 (statement -> record NEWLINE .)
    NEWLINE         reduce using rule 10 (statement -> record NEWLINE .)
    $end            reduce using rule 10 (statement -> record NEWLINE .)


state 41

    (11) statement -> empty NEWLINE .

    L_FBRACKET      reduce using rule 11 (statement -> empty NEWLINE .)
    MOVEUP          reduce using rule 11 (statement -> empty NEWLINE .)
    MOVEDOWN        reduce using rule 11 (statement -> empty NEWLINE .)
    MOVERIGHT       reduce using rule 11 (statement -> empty NEWLINE .)
    MOVELEFT        reduce using rule 11 (statement -> empty NEWLINE .)
    PINGUP          reduce using rule 11 (statement -> empty NEWLINE .)
    PINGDOWN        reduce using rule 11 (statement -> empty NEWLINE .)
    PINGRIGHT       reduce using rule 11 (statement -> empty NEWLINE .)
    PINGLEFT        reduce using rule 11 (statement -> empty NEWLINE .)
    VISION          reduce using rule 11 (statement -> empty NEWLINE .)
    VOICE           reduce using rule 11 (statement -> empty NEWLINE .)
    PROC            reduce using rule 11 (statement -> empty NEWLINE .)
    VARIABLE        reduce using rule 11 (statement -> empty NEWLINE .)
    RECORD          reduce using rule 11 (statement -> empty NEWLINE .)
    error           reduce using rule 11 (statement -> empty NEWLINE .)
    NUMERIC         reduce using rule 11 (statement -> empty NEWLINE .)
    STRING          reduce using rule 11 (statement -> empty NEWLINE .)
    LOGIC           reduce using rule 11 (statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 11 (statement -> empty NEWLINE .)
    $end            reduce using rule 11 (statement -> empty NEWLINE .)


state 42

    (82) statement -> errors NEWLINE .

    L_FBRACKET      reduce using rule 82 (statement -> errors NEWLINE .)
    MOVEUP          reduce using rule 82 (statement -> errors NEWLINE .)
    MOVEDOWN        reduce using rule 82 (statement -> errors NEWLINE .)
    MOVERIGHT       reduce using rule 82 (statement -> errors NEWLINE .)
    MOVELEFT        reduce using rule 82 (statement -> errors NEWLINE .)
    PINGUP          reduce using rule 82 (statement -> errors NEWLINE .)
    PINGDOWN        reduce using rule 82 (statement -> errors NEWLINE .)
    PINGRIGHT       reduce using rule 82 (statement -> errors NEWLINE .)
    PINGLEFT        reduce using rule 82 (statement -> errors NEWLINE .)
    VISION          reduce using rule 82 (statement -> errors NEWLINE .)
    VOICE           reduce using rule 82 (statement -> errors NEWLINE .)
    PROC            reduce using rule 82 (statement -> errors NEWLINE .)
    VARIABLE        reduce using rule 82 (statement -> errors NEWLINE .)
    RECORD          reduce using rule 82 (statement -> errors NEWLINE .)
    error           reduce using rule 82 (statement -> errors NEWLINE .)
    NUMERIC         reduce using rule 82 (statement -> errors NEWLINE .)
    STRING          reduce using rule 82 (statement -> errors NEWLINE .)
    LOGIC           reduce using rule 82 (statement -> errors NEWLINE .)
    NEWLINE         reduce using rule 82 (statement -> errors NEWLINE .)
    $end            reduce using rule 82 (statement -> errors NEWLINE .)


state 43

    (84) errors -> errors error .

    NEWLINE         reduce using rule 84 (errors -> errors error .)
    error           reduce using rule 84 (errors -> errors error .)
    L_FBRACKET      reduce using rule 84 (errors -> errors error .)
    MOVEUP          reduce using rule 84 (errors -> errors error .)
    MOVEDOWN        reduce using rule 84 (errors -> errors error .)
    MOVERIGHT       reduce using rule 84 (errors -> errors error .)
    MOVELEFT        reduce using rule 84 (errors -> errors error .)
    PINGUP          reduce using rule 84 (errors -> errors error .)
    PINGDOWN        reduce using rule 84 (errors -> errors error .)
    PINGRIGHT       reduce using rule 84 (errors -> errors error .)
    PINGLEFT        reduce using rule 84 (errors -> errors error .)
    VISION          reduce using rule 84 (errors -> errors error .)
    VOICE           reduce using rule 84 (errors -> errors error .)
    PROC            reduce using rule 84 (errors -> errors error .)
    VARIABLE        reduce using rule 84 (errors -> errors error .)
    RECORD          reduce using rule 84 (errors -> errors error .)
    NUMERIC         reduce using rule 84 (errors -> errors error .)
    STRING          reduce using rule 84 (errors -> errors error .)
    LOGIC           reduce using rule 84 (errors -> errors error .)
    $end            reduce using rule 84 (errors -> errors error .)


state 44

    (12) declaration -> type variable .

    NEWLINE         reduce using rule 12 (declaration -> type variable .)


state 45

    (46) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (47) variable -> VARIABLE .

    L_QBRACKET      shift and go to state 73
    NEWLINE         reduce using rule 47 (variable -> VARIABLE .)
    R_QBRACKET      reduce using rule 47 (variable -> VARIABLE .)
    COMMA           reduce using rule 47 (variable -> VARIABLE .)


state 46

    (13) assignment -> variable ASSIGNMENT . expression
    (38) expression -> . variable
    (39) expression -> . const
    (40) expression -> . text
    (41) expression -> . complex_expression
    (42) expression -> . call
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE
    (48) const -> . TRUE
    (49) const -> . FALSE
    (50) const -> . UNDEF
    (51) const -> . DECIMAL
    (43) text -> . TEXT
    (52) complex_expression -> . expression sign expression
    (53) complex_expression -> . MINUS expression
    (26) call -> . VARIABLE L_QBRACKET variables R_QBRACKET

    VARIABLE        shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    UNDEF           shift and go to state 56
    DECIMAL         shift and go to state 57
    TEXT            shift and go to state 58
    MINUS           shift and go to state 59

    variable                       shift and go to state 48
    expression                     shift and go to state 74
    const                          shift and go to state 49
    text                           shift and go to state 50
    complex_expression             shift and go to state 51
    call                           shift and go to state 52

state 47

    (14) cycle -> L_FBRACKET expression . R_FBRACKET BLOCK inner_statements UNBLOCK
    (52) complex_expression -> expression . sign expression
    (54) sign -> . r_sign
    (55) sign -> . l_sign
    (56) sign -> . u_sign
    (57) r_sign -> . u_sign DOT
    (58) l_sign -> . DOT u_sign
    (59) u_sign -> . PLUS
    (60) u_sign -> . MINUS
    (61) u_sign -> . STAR
    (62) u_sign -> . SLASH
    (63) u_sign -> . CARET
    (64) u_sign -> . GREATER
    (65) u_sign -> . LESS
    (66) u_sign -> . EQ
    (67) u_sign -> . NOTEQ

    R_FBRACKET      shift and go to state 75
    DOT             shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    STAR            shift and go to state 83
    SLASH           shift and go to state 84
    CARET           shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    EQ              shift and go to state 88
    NOTEQ           shift and go to state 89

    sign                           shift and go to state 76
    r_sign                         shift and go to state 77
    l_sign                         shift and go to state 78
    u_sign                         shift and go to state 79

state 48

    (38) expression -> variable .

    R_FBRACKET      reduce using rule 38 (expression -> variable .)
    DOT             reduce using rule 38 (expression -> variable .)
    PLUS            reduce using rule 38 (expression -> variable .)
    MINUS           reduce using rule 38 (expression -> variable .)
    STAR            reduce using rule 38 (expression -> variable .)
    SLASH           reduce using rule 38 (expression -> variable .)
    CARET           reduce using rule 38 (expression -> variable .)
    GREATER         reduce using rule 38 (expression -> variable .)
    LESS            reduce using rule 38 (expression -> variable .)
    EQ              reduce using rule 38 (expression -> variable .)
    NOTEQ           reduce using rule 38 (expression -> variable .)
    NEWLINE         reduce using rule 38 (expression -> variable .)
    R_QBRACKET      reduce using rule 38 (expression -> variable .)


state 49

    (39) expression -> const .

    R_FBRACKET      reduce using rule 39 (expression -> const .)
    DOT             reduce using rule 39 (expression -> const .)
    PLUS            reduce using rule 39 (expression -> const .)
    MINUS           reduce using rule 39 (expression -> const .)
    STAR            reduce using rule 39 (expression -> const .)
    SLASH           reduce using rule 39 (expression -> const .)
    CARET           reduce using rule 39 (expression -> const .)
    GREATER         reduce using rule 39 (expression -> const .)
    LESS            reduce using rule 39 (expression -> const .)
    EQ              reduce using rule 39 (expression -> const .)
    NOTEQ           reduce using rule 39 (expression -> const .)
    NEWLINE         reduce using rule 39 (expression -> const .)
    R_QBRACKET      reduce using rule 39 (expression -> const .)


state 50

    (40) expression -> text .

    R_FBRACKET      reduce using rule 40 (expression -> text .)
    DOT             reduce using rule 40 (expression -> text .)
    PLUS            reduce using rule 40 (expression -> text .)
    MINUS           reduce using rule 40 (expression -> text .)
    STAR            reduce using rule 40 (expression -> text .)
    SLASH           reduce using rule 40 (expression -> text .)
    CARET           reduce using rule 40 (expression -> text .)
    GREATER         reduce using rule 40 (expression -> text .)
    LESS            reduce using rule 40 (expression -> text .)
    EQ              reduce using rule 40 (expression -> text .)
    NOTEQ           reduce using rule 40 (expression -> text .)
    NEWLINE         reduce using rule 40 (expression -> text .)
    R_QBRACKET      reduce using rule 40 (expression -> text .)


state 51

    (41) expression -> complex_expression .

    R_FBRACKET      reduce using rule 41 (expression -> complex_expression .)
    DOT             reduce using rule 41 (expression -> complex_expression .)
    PLUS            reduce using rule 41 (expression -> complex_expression .)
    MINUS           reduce using rule 41 (expression -> complex_expression .)
    STAR            reduce using rule 41 (expression -> complex_expression .)
    SLASH           reduce using rule 41 (expression -> complex_expression .)
    CARET           reduce using rule 41 (expression -> complex_expression .)
    GREATER         reduce using rule 41 (expression -> complex_expression .)
    LESS            reduce using rule 41 (expression -> complex_expression .)
    EQ              reduce using rule 41 (expression -> complex_expression .)
    NOTEQ           reduce using rule 41 (expression -> complex_expression .)
    NEWLINE         reduce using rule 41 (expression -> complex_expression .)
    R_QBRACKET      reduce using rule 41 (expression -> complex_expression .)


state 52

    (42) expression -> call .

    R_FBRACKET      reduce using rule 42 (expression -> call .)
    DOT             reduce using rule 42 (expression -> call .)
    PLUS            reduce using rule 42 (expression -> call .)
    MINUS           reduce using rule 42 (expression -> call .)
    STAR            reduce using rule 42 (expression -> call .)
    SLASH           reduce using rule 42 (expression -> call .)
    CARET           reduce using rule 42 (expression -> call .)
    GREATER         reduce using rule 42 (expression -> call .)
    LESS            reduce using rule 42 (expression -> call .)
    EQ              reduce using rule 42 (expression -> call .)
    NOTEQ           reduce using rule 42 (expression -> call .)
    NEWLINE         reduce using rule 42 (expression -> call .)
    R_QBRACKET      reduce using rule 42 (expression -> call .)


state 53

    (46) variable -> VARIABLE . L_QBRACKET expression R_QBRACKET
    (47) variable -> VARIABLE .
    (26) call -> VARIABLE . L_QBRACKET variables R_QBRACKET

    L_QBRACKET      shift and go to state 90
    R_FBRACKET      reduce using rule 47 (variable -> VARIABLE .)
    DOT             reduce using rule 47 (variable -> VARIABLE .)
    PLUS            reduce using rule 47 (variable -> VARIABLE .)
    MINUS           reduce using rule 47 (variable -> VARIABLE .)
    STAR            reduce using rule 47 (variable -> VARIABLE .)
    SLASH           reduce using rule 47 (variable -> VARIABLE .)
    CARET           reduce using rule 47 (variable -> VARIABLE .)
    GREATER         reduce using rule 47 (variable -> VARIABLE .)
    LESS            reduce using rule 47 (variable -> VARIABLE .)
    EQ              reduce using rule 47 (variable -> VARIABLE .)
    NOTEQ           reduce using rule 47 (variable -> VARIABLE .)
    NEWLINE         reduce using rule 47 (variable -> VARIABLE .)
    R_QBRACKET      reduce using rule 47 (variable -> VARIABLE .)
    COMMA           reduce using rule 47 (variable -> VARIABLE .)


state 54

    (48) const -> TRUE .

    R_FBRACKET      reduce using rule 48 (const -> TRUE .)
    DOT             reduce using rule 48 (const -> TRUE .)
    PLUS            reduce using rule 48 (const -> TRUE .)
    MINUS           reduce using rule 48 (const -> TRUE .)
    STAR            reduce using rule 48 (const -> TRUE .)
    SLASH           reduce using rule 48 (const -> TRUE .)
    CARET           reduce using rule 48 (const -> TRUE .)
    GREATER         reduce using rule 48 (const -> TRUE .)
    LESS            reduce using rule 48 (const -> TRUE .)
    EQ              reduce using rule 48 (const -> TRUE .)
    NOTEQ           reduce using rule 48 (const -> TRUE .)
    NEWLINE         reduce using rule 48 (const -> TRUE .)
    R_QBRACKET      reduce using rule 48 (const -> TRUE .)


state 55

    (49) const -> FALSE .

    R_FBRACKET      reduce using rule 49 (const -> FALSE .)
    DOT             reduce using rule 49 (const -> FALSE .)
    PLUS            reduce using rule 49 (const -> FALSE .)
    MINUS           reduce using rule 49 (const -> FALSE .)
    STAR            reduce using rule 49 (const -> FALSE .)
    SLASH           reduce using rule 49 (const -> FALSE .)
    CARET           reduce using rule 49 (const -> FALSE .)
    GREATER         reduce using rule 49 (const -> FALSE .)
    LESS            reduce using rule 49 (const -> FALSE .)
    EQ              reduce using rule 49 (const -> FALSE .)
    NOTEQ           reduce using rule 49 (const -> FALSE .)
    NEWLINE         reduce using rule 49 (const -> FALSE .)
    R_QBRACKET      reduce using rule 49 (const -> FALSE .)


state 56

    (50) const -> UNDEF .

    R_FBRACKET      reduce using rule 50 (const -> UNDEF .)
    DOT             reduce using rule 50 (const -> UNDEF .)
    PLUS            reduce using rule 50 (const -> UNDEF .)
    MINUS           reduce using rule 50 (const -> UNDEF .)
    STAR            reduce using rule 50 (const -> UNDEF .)
    SLASH           reduce using rule 50 (const -> UNDEF .)
    CARET           reduce using rule 50 (const -> UNDEF .)
    GREATER         reduce using rule 50 (const -> UNDEF .)
    LESS            reduce using rule 50 (const -> UNDEF .)
    EQ              reduce using rule 50 (const -> UNDEF .)
    NOTEQ           reduce using rule 50 (const -> UNDEF .)
    NEWLINE         reduce using rule 50 (const -> UNDEF .)
    R_QBRACKET      reduce using rule 50 (const -> UNDEF .)


state 57

    (51) const -> DECIMAL .

    R_FBRACKET      reduce using rule 51 (const -> DECIMAL .)
    DOT             reduce using rule 51 (const -> DECIMAL .)
    PLUS            reduce using rule 51 (const -> DECIMAL .)
    MINUS           reduce using rule 51 (const -> DECIMAL .)
    STAR            reduce using rule 51 (const -> DECIMAL .)
    SLASH           reduce using rule 51 (const -> DECIMAL .)
    CARET           reduce using rule 51 (const -> DECIMAL .)
    GREATER         reduce using rule 51 (const -> DECIMAL .)
    LESS            reduce using rule 51 (const -> DECIMAL .)
    EQ              reduce using rule 51 (const -> DECIMAL .)
    NOTEQ           reduce using rule 51 (const -> DECIMAL .)
    NEWLINE         reduce using rule 51 (const -> DECIMAL .)
    R_QBRACKET      reduce using rule 51 (const -> DECIMAL .)


state 58

    (43) text -> TEXT .

    R_FBRACKET      reduce using rule 43 (text -> TEXT .)
    DOT             reduce using rule 43 (text -> TEXT .)
    PLUS            reduce using rule 43 (text -> TEXT .)
    MINUS           reduce using rule 43 (text -> TEXT .)
    STAR            reduce using rule 43 (text -> TEXT .)
    SLASH           reduce using rule 43 (text -> TEXT .)
    CARET           reduce using rule 43 (text -> TEXT .)
    GREATER         reduce using rule 43 (text -> TEXT .)
    LESS            reduce using rule 43 (text -> TEXT .)
    EQ              reduce using rule 43 (text -> TEXT .)
    NOTEQ           reduce using rule 43 (text -> TEXT .)
    NEWLINE         reduce using rule 43 (text -> TEXT .)
    R_QBRACKET      reduce using rule 43 (text -> TEXT .)


state 59

    (53) complex_expression -> MINUS . expression
    (38) expression -> . variable
    (39) expression -> . const
    (40) expression -> . text
    (41) expression -> . complex_expression
    (42) expression -> . call
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE
    (48) const -> . TRUE
    (49) const -> . FALSE
    (50) const -> . UNDEF
    (51) const -> . DECIMAL
    (43) text -> . TEXT
    (52) complex_expression -> . expression sign expression
    (53) complex_expression -> . MINUS expression
    (26) call -> . VARIABLE L_QBRACKET variables R_QBRACKET

    VARIABLE        shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    UNDEF           shift and go to state 56
    DECIMAL         shift and go to state 57
    TEXT            shift and go to state 58
    MINUS           shift and go to state 59

    expression                     shift and go to state 91
    variable                       shift and go to state 48
    const                          shift and go to state 49
    text                           shift and go to state 50
    complex_expression             shift and go to state 51
    call                           shift and go to state 52

state 60

    (15) command -> MOVEUP L_QBRACKET . variable R_QBRACKET
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 92

state 61

    (16) command -> MOVEDOWN L_QBRACKET . variable R_QBRACKET
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 93

state 62

    (17) command -> MOVERIGHT L_QBRACKET . variable R_QBRACKET
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 94

state 63

    (18) command -> MOVELEFT L_QBRACKET . variable R_QBRACKET
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 95

state 64

    (19) command -> PINGUP L_QBRACKET . variable R_QBRACKET
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 96

state 65

    (20) command -> PINGDOWN L_QBRACKET . variable R_QBRACKET
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 97

state 66

    (21) command -> PINGRIGHT L_QBRACKET . variable R_QBRACKET
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 98

state 67

    (22) command -> PINGLEFT L_QBRACKET . variable R_QBRACKET
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 99

state 68

    (23) command -> VISION L_QBRACKET . variable R_QBRACKET
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 100

state 69

    (24) command -> VOICE L_QBRACKET . variable R_QBRACKET
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 101

state 70

    (25) procedure -> PROC VARIABLE . L_QBRACKET parameters R_QBRACKET statements_group

    L_QBRACKET      shift and go to state 102


state 71

    (26) call -> VARIABLE L_QBRACKET . variables R_QBRACKET
    (46) variable -> VARIABLE L_QBRACKET . expression R_QBRACKET
    (44) variables -> . variables COMMA variable
    (45) variables -> . variable
    (38) expression -> . variable
    (39) expression -> . const
    (40) expression -> . text
    (41) expression -> . complex_expression
    (42) expression -> . call
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE
    (48) const -> . TRUE
    (49) const -> . FALSE
    (50) const -> . UNDEF
    (51) const -> . DECIMAL
    (43) text -> . TEXT
    (52) complex_expression -> . expression sign expression
    (53) complex_expression -> . MINUS expression
    (26) call -> . VARIABLE L_QBRACKET variables R_QBRACKET

    VARIABLE        shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    UNDEF           shift and go to state 56
    DECIMAL         shift and go to state 57
    TEXT            shift and go to state 58
    MINUS           shift and go to state 59

    variables                      shift and go to state 103
    expression                     shift and go to state 104
    variable                       shift and go to state 105
    const                          shift and go to state 49
    text                           shift and go to state 50
    complex_expression             shift and go to state 51
    call                           shift and go to state 52

state 72

    (27) record -> RECORD VARIABLE . DATA L_QBRACKET parameters R_QBRACKET
    (28) record -> RECORD VARIABLE . DATA L_QBRACKET parameters R_QBRACKET conversions

    DATA            shift and go to state 106


state 73

    (46) variable -> VARIABLE L_QBRACKET . expression R_QBRACKET
    (38) expression -> . variable
    (39) expression -> . const
    (40) expression -> . text
    (41) expression -> . complex_expression
    (42) expression -> . call
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE
    (48) const -> . TRUE
    (49) const -> . FALSE
    (50) const -> . UNDEF
    (51) const -> . DECIMAL
    (43) text -> . TEXT
    (52) complex_expression -> . expression sign expression
    (53) complex_expression -> . MINUS expression
    (26) call -> . VARIABLE L_QBRACKET variables R_QBRACKET

    VARIABLE        shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    UNDEF           shift and go to state 56
    DECIMAL         shift and go to state 57
    TEXT            shift and go to state 58
    MINUS           shift and go to state 59

    expression                     shift and go to state 104
    variable                       shift and go to state 48
    const                          shift and go to state 49
    text                           shift and go to state 50
    complex_expression             shift and go to state 51
    call                           shift and go to state 52

state 74

    (13) assignment -> variable ASSIGNMENT expression .
    (52) complex_expression -> expression . sign expression
    (54) sign -> . r_sign
    (55) sign -> . l_sign
    (56) sign -> . u_sign
    (57) r_sign -> . u_sign DOT
    (58) l_sign -> . DOT u_sign
    (59) u_sign -> . PLUS
    (60) u_sign -> . MINUS
    (61) u_sign -> . STAR
    (62) u_sign -> . SLASH
    (63) u_sign -> . CARET
    (64) u_sign -> . GREATER
    (65) u_sign -> . LESS
    (66) u_sign -> . EQ
    (67) u_sign -> . NOTEQ

    NEWLINE         reduce using rule 13 (assignment -> variable ASSIGNMENT expression .)
    DOT             shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    STAR            shift and go to state 83
    SLASH           shift and go to state 84
    CARET           shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    EQ              shift and go to state 88
    NOTEQ           shift and go to state 89

    sign                           shift and go to state 76
    r_sign                         shift and go to state 77
    l_sign                         shift and go to state 78
    u_sign                         shift and go to state 79

state 75

    (14) cycle -> L_FBRACKET expression R_FBRACKET . BLOCK inner_statements UNBLOCK

    BLOCK           shift and go to state 107


state 76

    (52) complex_expression -> expression sign . expression
    (38) expression -> . variable
    (39) expression -> . const
    (40) expression -> . text
    (41) expression -> . complex_expression
    (42) expression -> . call
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE
    (48) const -> . TRUE
    (49) const -> . FALSE
    (50) const -> . UNDEF
    (51) const -> . DECIMAL
    (43) text -> . TEXT
    (52) complex_expression -> . expression sign expression
    (53) complex_expression -> . MINUS expression
    (26) call -> . VARIABLE L_QBRACKET variables R_QBRACKET

    VARIABLE        shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    UNDEF           shift and go to state 56
    DECIMAL         shift and go to state 57
    TEXT            shift and go to state 58
    MINUS           shift and go to state 59

    expression                     shift and go to state 108
    variable                       shift and go to state 48
    const                          shift and go to state 49
    text                           shift and go to state 50
    complex_expression             shift and go to state 51
    call                           shift and go to state 52

state 77

    (54) sign -> r_sign .

    VARIABLE        reduce using rule 54 (sign -> r_sign .)
    TRUE            reduce using rule 54 (sign -> r_sign .)
    FALSE           reduce using rule 54 (sign -> r_sign .)
    UNDEF           reduce using rule 54 (sign -> r_sign .)
    DECIMAL         reduce using rule 54 (sign -> r_sign .)
    TEXT            reduce using rule 54 (sign -> r_sign .)
    MINUS           reduce using rule 54 (sign -> r_sign .)


state 78

    (55) sign -> l_sign .

    VARIABLE        reduce using rule 55 (sign -> l_sign .)
    TRUE            reduce using rule 55 (sign -> l_sign .)
    FALSE           reduce using rule 55 (sign -> l_sign .)
    UNDEF           reduce using rule 55 (sign -> l_sign .)
    DECIMAL         reduce using rule 55 (sign -> l_sign .)
    TEXT            reduce using rule 55 (sign -> l_sign .)
    MINUS           reduce using rule 55 (sign -> l_sign .)


state 79

    (56) sign -> u_sign .
    (57) r_sign -> u_sign . DOT

    VARIABLE        reduce using rule 56 (sign -> u_sign .)
    TRUE            reduce using rule 56 (sign -> u_sign .)
    FALSE           reduce using rule 56 (sign -> u_sign .)
    UNDEF           reduce using rule 56 (sign -> u_sign .)
    DECIMAL         reduce using rule 56 (sign -> u_sign .)
    TEXT            reduce using rule 56 (sign -> u_sign .)
    MINUS           reduce using rule 56 (sign -> u_sign .)
    DOT             shift and go to state 109


state 80

    (58) l_sign -> DOT . u_sign
    (59) u_sign -> . PLUS
    (60) u_sign -> . MINUS
    (61) u_sign -> . STAR
    (62) u_sign -> . SLASH
    (63) u_sign -> . CARET
    (64) u_sign -> . GREATER
    (65) u_sign -> . LESS
    (66) u_sign -> . EQ
    (67) u_sign -> . NOTEQ

    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    STAR            shift and go to state 83
    SLASH           shift and go to state 84
    CARET           shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    EQ              shift and go to state 88
    NOTEQ           shift and go to state 89

    u_sign                         shift and go to state 110

state 81

    (59) u_sign -> PLUS .

    DOT             reduce using rule 59 (u_sign -> PLUS .)
    VARIABLE        reduce using rule 59 (u_sign -> PLUS .)
    TRUE            reduce using rule 59 (u_sign -> PLUS .)
    FALSE           reduce using rule 59 (u_sign -> PLUS .)
    UNDEF           reduce using rule 59 (u_sign -> PLUS .)
    DECIMAL         reduce using rule 59 (u_sign -> PLUS .)
    TEXT            reduce using rule 59 (u_sign -> PLUS .)
    MINUS           reduce using rule 59 (u_sign -> PLUS .)


state 82

    (60) u_sign -> MINUS .

    DOT             reduce using rule 60 (u_sign -> MINUS .)
    VARIABLE        reduce using rule 60 (u_sign -> MINUS .)
    TRUE            reduce using rule 60 (u_sign -> MINUS .)
    FALSE           reduce using rule 60 (u_sign -> MINUS .)
    UNDEF           reduce using rule 60 (u_sign -> MINUS .)
    DECIMAL         reduce using rule 60 (u_sign -> MINUS .)
    TEXT            reduce using rule 60 (u_sign -> MINUS .)
    MINUS           reduce using rule 60 (u_sign -> MINUS .)


state 83

    (61) u_sign -> STAR .

    DOT             reduce using rule 61 (u_sign -> STAR .)
    VARIABLE        reduce using rule 61 (u_sign -> STAR .)
    TRUE            reduce using rule 61 (u_sign -> STAR .)
    FALSE           reduce using rule 61 (u_sign -> STAR .)
    UNDEF           reduce using rule 61 (u_sign -> STAR .)
    DECIMAL         reduce using rule 61 (u_sign -> STAR .)
    TEXT            reduce using rule 61 (u_sign -> STAR .)
    MINUS           reduce using rule 61 (u_sign -> STAR .)


state 84

    (62) u_sign -> SLASH .

    DOT             reduce using rule 62 (u_sign -> SLASH .)
    VARIABLE        reduce using rule 62 (u_sign -> SLASH .)
    TRUE            reduce using rule 62 (u_sign -> SLASH .)
    FALSE           reduce using rule 62 (u_sign -> SLASH .)
    UNDEF           reduce using rule 62 (u_sign -> SLASH .)
    DECIMAL         reduce using rule 62 (u_sign -> SLASH .)
    TEXT            reduce using rule 62 (u_sign -> SLASH .)
    MINUS           reduce using rule 62 (u_sign -> SLASH .)


state 85

    (63) u_sign -> CARET .

    DOT             reduce using rule 63 (u_sign -> CARET .)
    VARIABLE        reduce using rule 63 (u_sign -> CARET .)
    TRUE            reduce using rule 63 (u_sign -> CARET .)
    FALSE           reduce using rule 63 (u_sign -> CARET .)
    UNDEF           reduce using rule 63 (u_sign -> CARET .)
    DECIMAL         reduce using rule 63 (u_sign -> CARET .)
    TEXT            reduce using rule 63 (u_sign -> CARET .)
    MINUS           reduce using rule 63 (u_sign -> CARET .)


state 86

    (64) u_sign -> GREATER .

    DOT             reduce using rule 64 (u_sign -> GREATER .)
    VARIABLE        reduce using rule 64 (u_sign -> GREATER .)
    TRUE            reduce using rule 64 (u_sign -> GREATER .)
    FALSE           reduce using rule 64 (u_sign -> GREATER .)
    UNDEF           reduce using rule 64 (u_sign -> GREATER .)
    DECIMAL         reduce using rule 64 (u_sign -> GREATER .)
    TEXT            reduce using rule 64 (u_sign -> GREATER .)
    MINUS           reduce using rule 64 (u_sign -> GREATER .)


state 87

    (65) u_sign -> LESS .

    DOT             reduce using rule 65 (u_sign -> LESS .)
    VARIABLE        reduce using rule 65 (u_sign -> LESS .)
    TRUE            reduce using rule 65 (u_sign -> LESS .)
    FALSE           reduce using rule 65 (u_sign -> LESS .)
    UNDEF           reduce using rule 65 (u_sign -> LESS .)
    DECIMAL         reduce using rule 65 (u_sign -> LESS .)
    TEXT            reduce using rule 65 (u_sign -> LESS .)
    MINUS           reduce using rule 65 (u_sign -> LESS .)


state 88

    (66) u_sign -> EQ .

    DOT             reduce using rule 66 (u_sign -> EQ .)
    VARIABLE        reduce using rule 66 (u_sign -> EQ .)
    TRUE            reduce using rule 66 (u_sign -> EQ .)
    FALSE           reduce using rule 66 (u_sign -> EQ .)
    UNDEF           reduce using rule 66 (u_sign -> EQ .)
    DECIMAL         reduce using rule 66 (u_sign -> EQ .)
    TEXT            reduce using rule 66 (u_sign -> EQ .)
    MINUS           reduce using rule 66 (u_sign -> EQ .)


state 89

    (67) u_sign -> NOTEQ .

    DOT             reduce using rule 67 (u_sign -> NOTEQ .)
    VARIABLE        reduce using rule 67 (u_sign -> NOTEQ .)
    TRUE            reduce using rule 67 (u_sign -> NOTEQ .)
    FALSE           reduce using rule 67 (u_sign -> NOTEQ .)
    UNDEF           reduce using rule 67 (u_sign -> NOTEQ .)
    DECIMAL         reduce using rule 67 (u_sign -> NOTEQ .)
    TEXT            reduce using rule 67 (u_sign -> NOTEQ .)
    MINUS           reduce using rule 67 (u_sign -> NOTEQ .)


state 90

    (46) variable -> VARIABLE L_QBRACKET . expression R_QBRACKET
    (26) call -> VARIABLE L_QBRACKET . variables R_QBRACKET
    (38) expression -> . variable
    (39) expression -> . const
    (40) expression -> . text
    (41) expression -> . complex_expression
    (42) expression -> . call
    (44) variables -> . variables COMMA variable
    (45) variables -> . variable
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE
    (48) const -> . TRUE
    (49) const -> . FALSE
    (50) const -> . UNDEF
    (51) const -> . DECIMAL
    (43) text -> . TEXT
    (52) complex_expression -> . expression sign expression
    (53) complex_expression -> . MINUS expression
    (26) call -> . VARIABLE L_QBRACKET variables R_QBRACKET

    VARIABLE        shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55
    UNDEF           shift and go to state 56
    DECIMAL         shift and go to state 57
    TEXT            shift and go to state 58
    MINUS           shift and go to state 59

    expression                     shift and go to state 104
    variables                      shift and go to state 103
    variable                       shift and go to state 111
    const                          shift and go to state 49
    text                           shift and go to state 50
    complex_expression             shift and go to state 51
    call                           shift and go to state 52

state 91

    (53) complex_expression -> MINUS expression .
    (52) complex_expression -> expression . sign expression
    (54) sign -> . r_sign
    (55) sign -> . l_sign
    (56) sign -> . u_sign
    (57) r_sign -> . u_sign DOT
    (58) l_sign -> . DOT u_sign
    (59) u_sign -> . PLUS
    (60) u_sign -> . MINUS
    (61) u_sign -> . STAR
    (62) u_sign -> . SLASH
    (63) u_sign -> . CARET
    (64) u_sign -> . GREATER
    (65) u_sign -> . LESS
    (66) u_sign -> . EQ
    (67) u_sign -> . NOTEQ

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    R_FBRACKET      reduce using rule 53 (complex_expression -> MINUS expression .)
    NEWLINE         reduce using rule 53 (complex_expression -> MINUS expression .)
    R_QBRACKET      reduce using rule 53 (complex_expression -> MINUS expression .)
    DOT             shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    STAR            shift and go to state 83
    SLASH           shift and go to state 84
    CARET           shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    EQ              shift and go to state 88
    NOTEQ           shift and go to state 89

  ! DOT             [ reduce using rule 53 (complex_expression -> MINUS expression .) ]
  ! PLUS            [ reduce using rule 53 (complex_expression -> MINUS expression .) ]
  ! MINUS           [ reduce using rule 53 (complex_expression -> MINUS expression .) ]
  ! STAR            [ reduce using rule 53 (complex_expression -> MINUS expression .) ]
  ! SLASH           [ reduce using rule 53 (complex_expression -> MINUS expression .) ]
  ! CARET           [ reduce using rule 53 (complex_expression -> MINUS expression .) ]
  ! GREATER         [ reduce using rule 53 (complex_expression -> MINUS expression .) ]
  ! LESS            [ reduce using rule 53 (complex_expression -> MINUS expression .) ]
  ! EQ              [ reduce using rule 53 (complex_expression -> MINUS expression .) ]
  ! NOTEQ           [ reduce using rule 53 (complex_expression -> MINUS expression .) ]

    sign                           shift and go to state 76
    r_sign                         shift and go to state 77
    l_sign                         shift and go to state 78
    u_sign                         shift and go to state 79

state 92

    (15) command -> MOVEUP L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 112


state 93

    (16) command -> MOVEDOWN L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 113


state 94

    (17) command -> MOVERIGHT L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 114


state 95

    (18) command -> MOVELEFT L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 115


state 96

    (19) command -> PINGUP L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 116


state 97

    (20) command -> PINGDOWN L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 117


state 98

    (21) command -> PINGRIGHT L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 118


state 99

    (22) command -> PINGLEFT L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 119


state 100

    (23) command -> VISION L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 120


state 101

    (24) command -> VOICE L_QBRACKET variable . R_QBRACKET

    R_QBRACKET      shift and go to state 121


state 102

    (25) procedure -> PROC VARIABLE L_QBRACKET . parameters R_QBRACKET statements_group
    (68) parameters -> . parameter COMMA parameters
    (69) parameters -> . parameter
    (70) parameter -> . type VARIABLE AMPERSAND
    (71) parameter -> . type VARIABLE
    (34) type -> . NUMERIC
    (35) type -> . STRING
    (36) type -> . LOGIC
    (37) type -> . VARIABLE

    NUMERIC         shift and go to state 30
    STRING          shift and go to state 31
    LOGIC           shift and go to state 32
    VARIABLE        shift and go to state 122

    parameters                     shift and go to state 123
    parameter                      shift and go to state 124
    type                           shift and go to state 125

state 103

    (26) call -> VARIABLE L_QBRACKET variables . R_QBRACKET
    (44) variables -> variables . COMMA variable

    R_QBRACKET      shift and go to state 126
    COMMA           shift and go to state 127


state 104

    (46) variable -> VARIABLE L_QBRACKET expression . R_QBRACKET
    (52) complex_expression -> expression . sign expression
    (54) sign -> . r_sign
    (55) sign -> . l_sign
    (56) sign -> . u_sign
    (57) r_sign -> . u_sign DOT
    (58) l_sign -> . DOT u_sign
    (59) u_sign -> . PLUS
    (60) u_sign -> . MINUS
    (61) u_sign -> . STAR
    (62) u_sign -> . SLASH
    (63) u_sign -> . CARET
    (64) u_sign -> . GREATER
    (65) u_sign -> . LESS
    (66) u_sign -> . EQ
    (67) u_sign -> . NOTEQ

    R_QBRACKET      shift and go to state 128
    DOT             shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    STAR            shift and go to state 83
    SLASH           shift and go to state 84
    CARET           shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    EQ              shift and go to state 88
    NOTEQ           shift and go to state 89

    sign                           shift and go to state 76
    r_sign                         shift and go to state 77
    l_sign                         shift and go to state 78
    u_sign                         shift and go to state 79

state 105

    (45) variables -> variable .
    (38) expression -> variable .

  ! reduce/reduce conflict for R_QBRACKET resolved using rule 38 (expression -> variable .)
    COMMA           reduce using rule 45 (variables -> variable .)
    R_QBRACKET      reduce using rule 38 (expression -> variable .)
    DOT             reduce using rule 38 (expression -> variable .)
    PLUS            reduce using rule 38 (expression -> variable .)
    MINUS           reduce using rule 38 (expression -> variable .)
    STAR            reduce using rule 38 (expression -> variable .)
    SLASH           reduce using rule 38 (expression -> variable .)
    CARET           reduce using rule 38 (expression -> variable .)
    GREATER         reduce using rule 38 (expression -> variable .)
    LESS            reduce using rule 38 (expression -> variable .)
    EQ              reduce using rule 38 (expression -> variable .)
    NOTEQ           reduce using rule 38 (expression -> variable .)

  ! R_QBRACKET      [ reduce using rule 45 (variables -> variable .) ]


state 106

    (27) record -> RECORD VARIABLE DATA . L_QBRACKET parameters R_QBRACKET
    (28) record -> RECORD VARIABLE DATA . L_QBRACKET parameters R_QBRACKET conversions

    L_QBRACKET      shift and go to state 129


state 107

    (14) cycle -> L_FBRACKET expression R_FBRACKET BLOCK . inner_statements UNBLOCK
    (74) inner_statements -> . inner_statement inner_statements
    (75) inner_statements -> . inner_statement
    (76) inner_statement -> . declaration NEWLINE
    (77) inner_statement -> . assignment NEWLINE
    (78) inner_statement -> . cycle NEWLINE
    (79) inner_statement -> . command NEWLINE
    (80) inner_statement -> . call NEWLINE
    (81) inner_statement -> . empty NEWLINE
    (12) declaration -> . type variable
    (13) assignment -> . variable ASSIGNMENT expression
    (14) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (15) command -> . MOVEUP L_QBRACKET variable R_QBRACKET
    (16) command -> . MOVEDOWN L_QBRACKET variable R_QBRACKET
    (17) command -> . MOVERIGHT L_QBRACKET variable R_QBRACKET
    (18) command -> . MOVELEFT L_QBRACKET variable R_QBRACKET
    (19) command -> . PINGUP L_QBRACKET variable R_QBRACKET
    (20) command -> . PINGDOWN L_QBRACKET variable R_QBRACKET
    (21) command -> . PINGRIGHT L_QBRACKET variable R_QBRACKET
    (22) command -> . PINGLEFT L_QBRACKET variable R_QBRACKET
    (23) command -> . VISION L_QBRACKET variable R_QBRACKET
    (24) command -> . VOICE L_QBRACKET variable R_QBRACKET
    (26) call -> . VARIABLE L_QBRACKET variables R_QBRACKET
    (33) empty -> .
    (34) type -> . NUMERIC
    (35) type -> . STRING
    (36) type -> . LOGIC
    (37) type -> . VARIABLE
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    L_FBRACKET      shift and go to state 15
    MOVEUP          shift and go to state 16
    MOVEDOWN        shift and go to state 17
    MOVERIGHT       shift and go to state 18
    MOVELEFT        shift and go to state 19
    PINGUP          shift and go to state 20
    PINGDOWN        shift and go to state 21
    PINGRIGHT       shift and go to state 22
    PINGLEFT        shift and go to state 23
    VISION          shift and go to state 24
    VOICE           shift and go to state 25
    VARIABLE        shift and go to state 27
    NEWLINE         reduce using rule 33 (empty -> .)
    NUMERIC         shift and go to state 30
    STRING          shift and go to state 31
    LOGIC           shift and go to state 32

    inner_statements               shift and go to state 130
    inner_statement                shift and go to state 131
    declaration                    shift and go to state 132
    assignment                     shift and go to state 133
    cycle                          shift and go to state 134
    command                        shift and go to state 135
    call                           shift and go to state 136
    empty                          shift and go to state 137
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 108

    (52) complex_expression -> expression sign expression .
    (52) complex_expression -> expression . sign expression
    (54) sign -> . r_sign
    (55) sign -> . l_sign
    (56) sign -> . u_sign
    (57) r_sign -> . u_sign DOT
    (58) l_sign -> . DOT u_sign
    (59) u_sign -> . PLUS
    (60) u_sign -> . MINUS
    (61) u_sign -> . STAR
    (62) u_sign -> . SLASH
    (63) u_sign -> . CARET
    (64) u_sign -> . GREATER
    (65) u_sign -> . LESS
    (66) u_sign -> . EQ
    (67) u_sign -> . NOTEQ

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for STAR resolved as shift
  ! shift/reduce conflict for SLASH resolved as shift
  ! shift/reduce conflict for CARET resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
    R_FBRACKET      reduce using rule 52 (complex_expression -> expression sign expression .)
    NEWLINE         reduce using rule 52 (complex_expression -> expression sign expression .)
    R_QBRACKET      reduce using rule 52 (complex_expression -> expression sign expression .)
    DOT             shift and go to state 80
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    STAR            shift and go to state 83
    SLASH           shift and go to state 84
    CARET           shift and go to state 85
    GREATER         shift and go to state 86
    LESS            shift and go to state 87
    EQ              shift and go to state 88
    NOTEQ           shift and go to state 89

  ! DOT             [ reduce using rule 52 (complex_expression -> expression sign expression .) ]
  ! PLUS            [ reduce using rule 52 (complex_expression -> expression sign expression .) ]
  ! MINUS           [ reduce using rule 52 (complex_expression -> expression sign expression .) ]
  ! STAR            [ reduce using rule 52 (complex_expression -> expression sign expression .) ]
  ! SLASH           [ reduce using rule 52 (complex_expression -> expression sign expression .) ]
  ! CARET           [ reduce using rule 52 (complex_expression -> expression sign expression .) ]
  ! GREATER         [ reduce using rule 52 (complex_expression -> expression sign expression .) ]
  ! LESS            [ reduce using rule 52 (complex_expression -> expression sign expression .) ]
  ! EQ              [ reduce using rule 52 (complex_expression -> expression sign expression .) ]
  ! NOTEQ           [ reduce using rule 52 (complex_expression -> expression sign expression .) ]

    sign                           shift and go to state 76
    r_sign                         shift and go to state 77
    l_sign                         shift and go to state 78
    u_sign                         shift and go to state 79

state 109

    (57) r_sign -> u_sign DOT .

    VARIABLE        reduce using rule 57 (r_sign -> u_sign DOT .)
    TRUE            reduce using rule 57 (r_sign -> u_sign DOT .)
    FALSE           reduce using rule 57 (r_sign -> u_sign DOT .)
    UNDEF           reduce using rule 57 (r_sign -> u_sign DOT .)
    DECIMAL         reduce using rule 57 (r_sign -> u_sign DOT .)
    TEXT            reduce using rule 57 (r_sign -> u_sign DOT .)
    MINUS           reduce using rule 57 (r_sign -> u_sign DOT .)


state 110

    (58) l_sign -> DOT u_sign .

    VARIABLE        reduce using rule 58 (l_sign -> DOT u_sign .)
    TRUE            reduce using rule 58 (l_sign -> DOT u_sign .)
    FALSE           reduce using rule 58 (l_sign -> DOT u_sign .)
    UNDEF           reduce using rule 58 (l_sign -> DOT u_sign .)
    DECIMAL         reduce using rule 58 (l_sign -> DOT u_sign .)
    TEXT            reduce using rule 58 (l_sign -> DOT u_sign .)
    MINUS           reduce using rule 58 (l_sign -> DOT u_sign .)


state 111

    (38) expression -> variable .
    (45) variables -> variable .

  ! reduce/reduce conflict for R_QBRACKET resolved using rule 38 (expression -> variable .)
    R_QBRACKET      reduce using rule 38 (expression -> variable .)
    DOT             reduce using rule 38 (expression -> variable .)
    PLUS            reduce using rule 38 (expression -> variable .)
    MINUS           reduce using rule 38 (expression -> variable .)
    STAR            reduce using rule 38 (expression -> variable .)
    SLASH           reduce using rule 38 (expression -> variable .)
    CARET           reduce using rule 38 (expression -> variable .)
    GREATER         reduce using rule 38 (expression -> variable .)
    LESS            reduce using rule 38 (expression -> variable .)
    EQ              reduce using rule 38 (expression -> variable .)
    NOTEQ           reduce using rule 38 (expression -> variable .)
    COMMA           reduce using rule 45 (variables -> variable .)

  ! R_QBRACKET      [ reduce using rule 45 (variables -> variable .) ]


state 112

    (15) command -> MOVEUP L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 15 (command -> MOVEUP L_QBRACKET variable R_QBRACKET .)


state 113

    (16) command -> MOVEDOWN L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 16 (command -> MOVEDOWN L_QBRACKET variable R_QBRACKET .)


state 114

    (17) command -> MOVERIGHT L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 17 (command -> MOVERIGHT L_QBRACKET variable R_QBRACKET .)


state 115

    (18) command -> MOVELEFT L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 18 (command -> MOVELEFT L_QBRACKET variable R_QBRACKET .)


state 116

    (19) command -> PINGUP L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 19 (command -> PINGUP L_QBRACKET variable R_QBRACKET .)


state 117

    (20) command -> PINGDOWN L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 20 (command -> PINGDOWN L_QBRACKET variable R_QBRACKET .)


state 118

    (21) command -> PINGRIGHT L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 21 (command -> PINGRIGHT L_QBRACKET variable R_QBRACKET .)


state 119

    (22) command -> PINGLEFT L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 22 (command -> PINGLEFT L_QBRACKET variable R_QBRACKET .)


state 120

    (23) command -> VISION L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 23 (command -> VISION L_QBRACKET variable R_QBRACKET .)


state 121

    (24) command -> VOICE L_QBRACKET variable R_QBRACKET .

    NEWLINE         reduce using rule 24 (command -> VOICE L_QBRACKET variable R_QBRACKET .)


state 122

    (37) type -> VARIABLE .

    VARIABLE        reduce using rule 37 (type -> VARIABLE .)


state 123

    (25) procedure -> PROC VARIABLE L_QBRACKET parameters . R_QBRACKET statements_group

    R_QBRACKET      shift and go to state 138


state 124

    (68) parameters -> parameter . COMMA parameters
    (69) parameters -> parameter .

    COMMA           shift and go to state 139
    R_QBRACKET      reduce using rule 69 (parameters -> parameter .)


state 125

    (70) parameter -> type . VARIABLE AMPERSAND
    (71) parameter -> type . VARIABLE

    VARIABLE        shift and go to state 140


state 126

    (26) call -> VARIABLE L_QBRACKET variables R_QBRACKET .

    NEWLINE         reduce using rule 26 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)
    R_FBRACKET      reduce using rule 26 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)
    DOT             reduce using rule 26 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)
    PLUS            reduce using rule 26 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)
    MINUS           reduce using rule 26 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)
    STAR            reduce using rule 26 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)
    SLASH           reduce using rule 26 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)
    CARET           reduce using rule 26 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)
    GREATER         reduce using rule 26 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)
    LESS            reduce using rule 26 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)
    EQ              reduce using rule 26 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)
    NOTEQ           reduce using rule 26 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)
    R_QBRACKET      reduce using rule 26 (call -> VARIABLE L_QBRACKET variables R_QBRACKET .)


state 127

    (44) variables -> variables COMMA . variable
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    VARIABLE        shift and go to state 45

    variable                       shift and go to state 141

state 128

    (46) variable -> VARIABLE L_QBRACKET expression R_QBRACKET .

    ASSIGNMENT      reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    NEWLINE         reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    R_FBRACKET      reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    DOT             reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    PLUS            reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    MINUS           reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    STAR            reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    SLASH           reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    CARET           reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    GREATER         reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    LESS            reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    EQ              reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    NOTEQ           reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    R_QBRACKET      reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)
    COMMA           reduce using rule 46 (variable -> VARIABLE L_QBRACKET expression R_QBRACKET .)


state 129

    (27) record -> RECORD VARIABLE DATA L_QBRACKET . parameters R_QBRACKET
    (28) record -> RECORD VARIABLE DATA L_QBRACKET . parameters R_QBRACKET conversions
    (68) parameters -> . parameter COMMA parameters
    (69) parameters -> . parameter
    (70) parameter -> . type VARIABLE AMPERSAND
    (71) parameter -> . type VARIABLE
    (34) type -> . NUMERIC
    (35) type -> . STRING
    (36) type -> . LOGIC
    (37) type -> . VARIABLE

    NUMERIC         shift and go to state 30
    STRING          shift and go to state 31
    LOGIC           shift and go to state 32
    VARIABLE        shift and go to state 122

    parameters                     shift and go to state 142
    parameter                      shift and go to state 124
    type                           shift and go to state 125

state 130

    (14) cycle -> L_FBRACKET expression R_FBRACKET BLOCK inner_statements . UNBLOCK

    UNBLOCK         shift and go to state 143


state 131

    (74) inner_statements -> inner_statement . inner_statements
    (75) inner_statements -> inner_statement .
    (74) inner_statements -> . inner_statement inner_statements
    (75) inner_statements -> . inner_statement
    (76) inner_statement -> . declaration NEWLINE
    (77) inner_statement -> . assignment NEWLINE
    (78) inner_statement -> . cycle NEWLINE
    (79) inner_statement -> . command NEWLINE
    (80) inner_statement -> . call NEWLINE
    (81) inner_statement -> . empty NEWLINE
    (12) declaration -> . type variable
    (13) assignment -> . variable ASSIGNMENT expression
    (14) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (15) command -> . MOVEUP L_QBRACKET variable R_QBRACKET
    (16) command -> . MOVEDOWN L_QBRACKET variable R_QBRACKET
    (17) command -> . MOVERIGHT L_QBRACKET variable R_QBRACKET
    (18) command -> . MOVELEFT L_QBRACKET variable R_QBRACKET
    (19) command -> . PINGUP L_QBRACKET variable R_QBRACKET
    (20) command -> . PINGDOWN L_QBRACKET variable R_QBRACKET
    (21) command -> . PINGRIGHT L_QBRACKET variable R_QBRACKET
    (22) command -> . PINGLEFT L_QBRACKET variable R_QBRACKET
    (23) command -> . VISION L_QBRACKET variable R_QBRACKET
    (24) command -> . VOICE L_QBRACKET variable R_QBRACKET
    (26) call -> . VARIABLE L_QBRACKET variables R_QBRACKET
    (33) empty -> .
    (34) type -> . NUMERIC
    (35) type -> . STRING
    (36) type -> . LOGIC
    (37) type -> . VARIABLE
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    UNBLOCK         reduce using rule 75 (inner_statements -> inner_statement .)
    L_FBRACKET      shift and go to state 15
    MOVEUP          shift and go to state 16
    MOVEDOWN        shift and go to state 17
    MOVERIGHT       shift and go to state 18
    MOVELEFT        shift and go to state 19
    PINGUP          shift and go to state 20
    PINGDOWN        shift and go to state 21
    PINGRIGHT       shift and go to state 22
    PINGLEFT        shift and go to state 23
    VISION          shift and go to state 24
    VOICE           shift and go to state 25
    VARIABLE        shift and go to state 27
    NEWLINE         reduce using rule 33 (empty -> .)
    NUMERIC         shift and go to state 30
    STRING          shift and go to state 31
    LOGIC           shift and go to state 32

    inner_statement                shift and go to state 131
    inner_statements               shift and go to state 144
    declaration                    shift and go to state 132
    assignment                     shift and go to state 133
    cycle                          shift and go to state 134
    command                        shift and go to state 135
    call                           shift and go to state 136
    empty                          shift and go to state 137
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 132

    (76) inner_statement -> declaration . NEWLINE

    NEWLINE         shift and go to state 145


state 133

    (77) inner_statement -> assignment . NEWLINE

    NEWLINE         shift and go to state 146


state 134

    (78) inner_statement -> cycle . NEWLINE

    NEWLINE         shift and go to state 147


state 135

    (79) inner_statement -> command . NEWLINE

    NEWLINE         shift and go to state 148


state 136

    (80) inner_statement -> call . NEWLINE

    NEWLINE         shift and go to state 149


state 137

    (81) inner_statement -> empty . NEWLINE

    NEWLINE         shift and go to state 150


state 138

    (25) procedure -> PROC VARIABLE L_QBRACKET parameters R_QBRACKET . statements_group
    (72) statements_group -> . BLOCK inner_statements UNBLOCK
    (73) statements_group -> . inner_statement
    (76) inner_statement -> . declaration NEWLINE
    (77) inner_statement -> . assignment NEWLINE
    (78) inner_statement -> . cycle NEWLINE
    (79) inner_statement -> . command NEWLINE
    (80) inner_statement -> . call NEWLINE
    (81) inner_statement -> . empty NEWLINE
    (12) declaration -> . type variable
    (13) assignment -> . variable ASSIGNMENT expression
    (14) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (15) command -> . MOVEUP L_QBRACKET variable R_QBRACKET
    (16) command -> . MOVEDOWN L_QBRACKET variable R_QBRACKET
    (17) command -> . MOVERIGHT L_QBRACKET variable R_QBRACKET
    (18) command -> . MOVELEFT L_QBRACKET variable R_QBRACKET
    (19) command -> . PINGUP L_QBRACKET variable R_QBRACKET
    (20) command -> . PINGDOWN L_QBRACKET variable R_QBRACKET
    (21) command -> . PINGRIGHT L_QBRACKET variable R_QBRACKET
    (22) command -> . PINGLEFT L_QBRACKET variable R_QBRACKET
    (23) command -> . VISION L_QBRACKET variable R_QBRACKET
    (24) command -> . VOICE L_QBRACKET variable R_QBRACKET
    (26) call -> . VARIABLE L_QBRACKET variables R_QBRACKET
    (33) empty -> .
    (34) type -> . NUMERIC
    (35) type -> . STRING
    (36) type -> . LOGIC
    (37) type -> . VARIABLE
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    BLOCK           shift and go to state 152
    L_FBRACKET      shift and go to state 15
    MOVEUP          shift and go to state 16
    MOVEDOWN        shift and go to state 17
    MOVERIGHT       shift and go to state 18
    MOVELEFT        shift and go to state 19
    PINGUP          shift and go to state 20
    PINGDOWN        shift and go to state 21
    PINGRIGHT       shift and go to state 22
    PINGLEFT        shift and go to state 23
    VISION          shift and go to state 24
    VOICE           shift and go to state 25
    VARIABLE        shift and go to state 27
    NEWLINE         reduce using rule 33 (empty -> .)
    NUMERIC         shift and go to state 30
    STRING          shift and go to state 31
    LOGIC           shift and go to state 32

    statements_group               shift and go to state 151
    inner_statement                shift and go to state 153
    declaration                    shift and go to state 132
    assignment                     shift and go to state 133
    cycle                          shift and go to state 134
    command                        shift and go to state 135
    call                           shift and go to state 136
    empty                          shift and go to state 137
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 139

    (68) parameters -> parameter COMMA . parameters
    (68) parameters -> . parameter COMMA parameters
    (69) parameters -> . parameter
    (70) parameter -> . type VARIABLE AMPERSAND
    (71) parameter -> . type VARIABLE
    (34) type -> . NUMERIC
    (35) type -> . STRING
    (36) type -> . LOGIC
    (37) type -> . VARIABLE

    NUMERIC         shift and go to state 30
    STRING          shift and go to state 31
    LOGIC           shift and go to state 32
    VARIABLE        shift and go to state 122

    parameter                      shift and go to state 124
    parameters                     shift and go to state 154
    type                           shift and go to state 125

state 140

    (70) parameter -> type VARIABLE . AMPERSAND
    (71) parameter -> type VARIABLE .

    AMPERSAND       shift and go to state 155
    COMMA           reduce using rule 71 (parameter -> type VARIABLE .)
    R_QBRACKET      reduce using rule 71 (parameter -> type VARIABLE .)


state 141

    (44) variables -> variables COMMA variable .

    R_QBRACKET      reduce using rule 44 (variables -> variables COMMA variable .)
    COMMA           reduce using rule 44 (variables -> variables COMMA variable .)


state 142

    (27) record -> RECORD VARIABLE DATA L_QBRACKET parameters . R_QBRACKET
    (28) record -> RECORD VARIABLE DATA L_QBRACKET parameters . R_QBRACKET conversions

    R_QBRACKET      shift and go to state 156


state 143

    (14) cycle -> L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK .

    NEWLINE         reduce using rule 14 (cycle -> L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK .)


state 144

    (74) inner_statements -> inner_statement inner_statements .

    UNBLOCK         reduce using rule 74 (inner_statements -> inner_statement inner_statements .)


state 145

    (76) inner_statement -> declaration NEWLINE .

    L_FBRACKET      reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    MOVEUP          reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    MOVEDOWN        reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    MOVERIGHT       reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    MOVELEFT        reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    PINGUP          reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    PINGDOWN        reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    PINGRIGHT       reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    PINGLEFT        reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    VISION          reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    VOICE           reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    VARIABLE        reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    NUMERIC         reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    STRING          reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    LOGIC           reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    NEWLINE         reduce using rule 76 (inner_statement -> declaration NEWLINE .)
    UNBLOCK         reduce using rule 76 (inner_statement -> declaration NEWLINE .)


state 146

    (77) inner_statement -> assignment NEWLINE .

    L_FBRACKET      reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    MOVEUP          reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    MOVEDOWN        reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    MOVERIGHT       reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    MOVELEFT        reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    PINGUP          reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    PINGDOWN        reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    PINGRIGHT       reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    PINGLEFT        reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    VISION          reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    VOICE           reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    VARIABLE        reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    NUMERIC         reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    STRING          reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    LOGIC           reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    NEWLINE         reduce using rule 77 (inner_statement -> assignment NEWLINE .)
    UNBLOCK         reduce using rule 77 (inner_statement -> assignment NEWLINE .)


state 147

    (78) inner_statement -> cycle NEWLINE .

    L_FBRACKET      reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    MOVEUP          reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    MOVEDOWN        reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    MOVERIGHT       reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    MOVELEFT        reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    PINGUP          reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    PINGDOWN        reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    PINGRIGHT       reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    PINGLEFT        reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    VISION          reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    VOICE           reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    VARIABLE        reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    NUMERIC         reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    STRING          reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    LOGIC           reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    NEWLINE         reduce using rule 78 (inner_statement -> cycle NEWLINE .)
    UNBLOCK         reduce using rule 78 (inner_statement -> cycle NEWLINE .)


state 148

    (79) inner_statement -> command NEWLINE .

    L_FBRACKET      reduce using rule 79 (inner_statement -> command NEWLINE .)
    MOVEUP          reduce using rule 79 (inner_statement -> command NEWLINE .)
    MOVEDOWN        reduce using rule 79 (inner_statement -> command NEWLINE .)
    MOVERIGHT       reduce using rule 79 (inner_statement -> command NEWLINE .)
    MOVELEFT        reduce using rule 79 (inner_statement -> command NEWLINE .)
    PINGUP          reduce using rule 79 (inner_statement -> command NEWLINE .)
    PINGDOWN        reduce using rule 79 (inner_statement -> command NEWLINE .)
    PINGRIGHT       reduce using rule 79 (inner_statement -> command NEWLINE .)
    PINGLEFT        reduce using rule 79 (inner_statement -> command NEWLINE .)
    VISION          reduce using rule 79 (inner_statement -> command NEWLINE .)
    VOICE           reduce using rule 79 (inner_statement -> command NEWLINE .)
    VARIABLE        reduce using rule 79 (inner_statement -> command NEWLINE .)
    NUMERIC         reduce using rule 79 (inner_statement -> command NEWLINE .)
    STRING          reduce using rule 79 (inner_statement -> command NEWLINE .)
    LOGIC           reduce using rule 79 (inner_statement -> command NEWLINE .)
    NEWLINE         reduce using rule 79 (inner_statement -> command NEWLINE .)
    UNBLOCK         reduce using rule 79 (inner_statement -> command NEWLINE .)


state 149

    (80) inner_statement -> call NEWLINE .

    L_FBRACKET      reduce using rule 80 (inner_statement -> call NEWLINE .)
    MOVEUP          reduce using rule 80 (inner_statement -> call NEWLINE .)
    MOVEDOWN        reduce using rule 80 (inner_statement -> call NEWLINE .)
    MOVERIGHT       reduce using rule 80 (inner_statement -> call NEWLINE .)
    MOVELEFT        reduce using rule 80 (inner_statement -> call NEWLINE .)
    PINGUP          reduce using rule 80 (inner_statement -> call NEWLINE .)
    PINGDOWN        reduce using rule 80 (inner_statement -> call NEWLINE .)
    PINGRIGHT       reduce using rule 80 (inner_statement -> call NEWLINE .)
    PINGLEFT        reduce using rule 80 (inner_statement -> call NEWLINE .)
    VISION          reduce using rule 80 (inner_statement -> call NEWLINE .)
    VOICE           reduce using rule 80 (inner_statement -> call NEWLINE .)
    VARIABLE        reduce using rule 80 (inner_statement -> call NEWLINE .)
    NUMERIC         reduce using rule 80 (inner_statement -> call NEWLINE .)
    STRING          reduce using rule 80 (inner_statement -> call NEWLINE .)
    LOGIC           reduce using rule 80 (inner_statement -> call NEWLINE .)
    NEWLINE         reduce using rule 80 (inner_statement -> call NEWLINE .)
    UNBLOCK         reduce using rule 80 (inner_statement -> call NEWLINE .)


state 150

    (81) inner_statement -> empty NEWLINE .

    L_FBRACKET      reduce using rule 81 (inner_statement -> empty NEWLINE .)
    MOVEUP          reduce using rule 81 (inner_statement -> empty NEWLINE .)
    MOVEDOWN        reduce using rule 81 (inner_statement -> empty NEWLINE .)
    MOVERIGHT       reduce using rule 81 (inner_statement -> empty NEWLINE .)
    MOVELEFT        reduce using rule 81 (inner_statement -> empty NEWLINE .)
    PINGUP          reduce using rule 81 (inner_statement -> empty NEWLINE .)
    PINGDOWN        reduce using rule 81 (inner_statement -> empty NEWLINE .)
    PINGRIGHT       reduce using rule 81 (inner_statement -> empty NEWLINE .)
    PINGLEFT        reduce using rule 81 (inner_statement -> empty NEWLINE .)
    VISION          reduce using rule 81 (inner_statement -> empty NEWLINE .)
    VOICE           reduce using rule 81 (inner_statement -> empty NEWLINE .)
    VARIABLE        reduce using rule 81 (inner_statement -> empty NEWLINE .)
    NUMERIC         reduce using rule 81 (inner_statement -> empty NEWLINE .)
    STRING          reduce using rule 81 (inner_statement -> empty NEWLINE .)
    LOGIC           reduce using rule 81 (inner_statement -> empty NEWLINE .)
    NEWLINE         reduce using rule 81 (inner_statement -> empty NEWLINE .)
    UNBLOCK         reduce using rule 81 (inner_statement -> empty NEWLINE .)


state 151

    (25) procedure -> PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group .

    NEWLINE         reduce using rule 25 (procedure -> PROC VARIABLE L_QBRACKET parameters R_QBRACKET statements_group .)


state 152

    (72) statements_group -> BLOCK . inner_statements UNBLOCK
    (74) inner_statements -> . inner_statement inner_statements
    (75) inner_statements -> . inner_statement
    (76) inner_statement -> . declaration NEWLINE
    (77) inner_statement -> . assignment NEWLINE
    (78) inner_statement -> . cycle NEWLINE
    (79) inner_statement -> . command NEWLINE
    (80) inner_statement -> . call NEWLINE
    (81) inner_statement -> . empty NEWLINE
    (12) declaration -> . type variable
    (13) assignment -> . variable ASSIGNMENT expression
    (14) cycle -> . L_FBRACKET expression R_FBRACKET BLOCK inner_statements UNBLOCK
    (15) command -> . MOVEUP L_QBRACKET variable R_QBRACKET
    (16) command -> . MOVEDOWN L_QBRACKET variable R_QBRACKET
    (17) command -> . MOVERIGHT L_QBRACKET variable R_QBRACKET
    (18) command -> . MOVELEFT L_QBRACKET variable R_QBRACKET
    (19) command -> . PINGUP L_QBRACKET variable R_QBRACKET
    (20) command -> . PINGDOWN L_QBRACKET variable R_QBRACKET
    (21) command -> . PINGRIGHT L_QBRACKET variable R_QBRACKET
    (22) command -> . PINGLEFT L_QBRACKET variable R_QBRACKET
    (23) command -> . VISION L_QBRACKET variable R_QBRACKET
    (24) command -> . VOICE L_QBRACKET variable R_QBRACKET
    (26) call -> . VARIABLE L_QBRACKET variables R_QBRACKET
    (33) empty -> .
    (34) type -> . NUMERIC
    (35) type -> . STRING
    (36) type -> . LOGIC
    (37) type -> . VARIABLE
    (46) variable -> . VARIABLE L_QBRACKET expression R_QBRACKET
    (47) variable -> . VARIABLE

    L_FBRACKET      shift and go to state 15
    MOVEUP          shift and go to state 16
    MOVEDOWN        shift and go to state 17
    MOVERIGHT       shift and go to state 18
    MOVELEFT        shift and go to state 19
    PINGUP          shift and go to state 20
    PINGDOWN        shift and go to state 21
    PINGRIGHT       shift and go to state 22
    PINGLEFT        shift and go to state 23
    VISION          shift and go to state 24
    VOICE           shift and go to state 25
    VARIABLE        shift and go to state 27
    NEWLINE         reduce using rule 33 (empty -> .)
    NUMERIC         shift and go to state 30
    STRING          shift and go to state 31
    LOGIC           shift and go to state 32

    inner_statements               shift and go to state 157
    inner_statement                shift and go to state 131
    declaration                    shift and go to state 132
    assignment                     shift and go to state 133
    cycle                          shift and go to state 134
    command                        shift and go to state 135
    call                           shift and go to state 136
    empty                          shift and go to state 137
    type                           shift and go to state 13
    variable                       shift and go to state 14

state 153

    (73) statements_group -> inner_statement .

    NEWLINE         reduce using rule 73 (statements_group -> inner_statement .)


state 154

    (68) parameters -> parameter COMMA parameters .

    R_QBRACKET      reduce using rule 68 (parameters -> parameter COMMA parameters .)


state 155

    (70) parameter -> type VARIABLE AMPERSAND .

    COMMA           reduce using rule 70 (parameter -> type VARIABLE AMPERSAND .)
    R_QBRACKET      reduce using rule 70 (parameter -> type VARIABLE AMPERSAND .)


state 156

    (27) record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET .
    (28) record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET . conversions
    (29) conversions -> . conversions conversion
    (30) conversions -> . conversion
    (31) conversion -> . CONVERSION TO type VARIABLE
    (32) conversion -> . CONVERSION FROM type VARIABLE

    NEWLINE         reduce using rule 27 (record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET .)
    CONVERSION      shift and go to state 160

    conversions                    shift and go to state 158
    conversion                     shift and go to state 159

state 157

    (72) statements_group -> BLOCK inner_statements . UNBLOCK

    UNBLOCK         shift and go to state 161


state 158

    (28) record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions .
    (29) conversions -> conversions . conversion
    (31) conversion -> . CONVERSION TO type VARIABLE
    (32) conversion -> . CONVERSION FROM type VARIABLE

    NEWLINE         reduce using rule 28 (record -> RECORD VARIABLE DATA L_QBRACKET parameters R_QBRACKET conversions .)
    CONVERSION      shift and go to state 160

    conversion                     shift and go to state 162

state 159

    (30) conversions -> conversion .

    CONVERSION      reduce using rule 30 (conversions -> conversion .)
    NEWLINE         reduce using rule 30 (conversions -> conversion .)


state 160

    (31) conversion -> CONVERSION . TO type VARIABLE
    (32) conversion -> CONVERSION . FROM type VARIABLE

    TO              shift and go to state 163
    FROM            shift and go to state 164


state 161

    (72) statements_group -> BLOCK inner_statements UNBLOCK .

    NEWLINE         reduce using rule 72 (statements_group -> BLOCK inner_statements UNBLOCK .)


state 162

    (29) conversions -> conversions conversion .

    CONVERSION      reduce using rule 29 (conversions -> conversions conversion .)
    NEWLINE         reduce using rule 29 (conversions -> conversions conversion .)


state 163

    (31) conversion -> CONVERSION TO . type VARIABLE
    (34) type -> . NUMERIC
    (35) type -> . STRING
    (36) type -> . LOGIC
    (37) type -> . VARIABLE

    NUMERIC         shift and go to state 30
    STRING          shift and go to state 31
    LOGIC           shift and go to state 32
    VARIABLE        shift and go to state 122

    type                           shift and go to state 165

state 164

    (32) conversion -> CONVERSION FROM . type VARIABLE
    (34) type -> . NUMERIC
    (35) type -> . STRING
    (36) type -> . LOGIC
    (37) type -> . VARIABLE

    NUMERIC         shift and go to state 30
    STRING          shift and go to state 31
    LOGIC           shift and go to state 32
    VARIABLE        shift and go to state 122

    type                           shift and go to state 166

state 165

    (31) conversion -> CONVERSION TO type . VARIABLE

    VARIABLE        shift and go to state 167


state 166

    (32) conversion -> CONVERSION FROM type . VARIABLE

    VARIABLE        shift and go to state 168


state 167

    (31) conversion -> CONVERSION TO type VARIABLE .

    CONVERSION      reduce using rule 31 (conversion -> CONVERSION TO type VARIABLE .)
    NEWLINE         reduce using rule 31 (conversion -> CONVERSION TO type VARIABLE .)


state 168

    (32) conversion -> CONVERSION FROM type VARIABLE .

    CONVERSION      reduce using rule 32 (conversion -> CONVERSION FROM type VARIABLE .)
    NEWLINE         reduce using rule 32 (conversion -> CONVERSION FROM type VARIABLE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 12 resolved as shift
WARNING: shift/reduce conflict for error in state 12 resolved as shift
WARNING: shift/reduce conflict for DOT in state 91 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 91 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 91 resolved as shift
WARNING: shift/reduce conflict for STAR in state 91 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 91 resolved as shift
WARNING: shift/reduce conflict for CARET in state 91 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 91 resolved as shift
WARNING: shift/reduce conflict for LESS in state 91 resolved as shift
WARNING: shift/reduce conflict for EQ in state 91 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 91 resolved as shift
WARNING: shift/reduce conflict for DOT in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for STAR in state 108 resolved as shift
WARNING: shift/reduce conflict for SLASH in state 108 resolved as shift
WARNING: shift/reduce conflict for CARET in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 108 resolved as shift
WARNING: shift/reduce conflict for LESS in state 108 resolved as shift
WARNING: shift/reduce conflict for EQ in state 108 resolved as shift
WARNING: shift/reduce conflict for NOTEQ in state 108 resolved as shift
WARNING: reduce/reduce conflict in state 105 resolved using rule (expression -> variable)
WARNING: rejected rule (variables -> variable) in state 105
WARNING: reduce/reduce conflict in state 111 resolved using rule (expression -> variable)
WARNING: rejected rule (variables -> variable) in state 111
